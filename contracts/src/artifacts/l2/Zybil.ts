
/* Autogenerated file, do not edit! */

/* eslint-disable */
import { AztecAddress, CompleteAddress, Contract, ContractBase, ContractFunctionInteraction, ContractMethod, DeployMethod, EthAddress, FieldLike, AztecAddressLike, EthAddressLike, Wallet } from '@aztec/aztec.js';
import { Fr, Point } from '@aztec/foundation/fields';
import { PXE, PublicKey } from '@aztec/types';
import { ContractArtifact } from '@aztec/foundation/abi';
import ZybilContractArtifactJson from './Zybil.json' assert { type: 'json' };
export const ZybilContractArtifact = ZybilContractArtifactJson as ContractArtifact;

/**
 * Type-safe interface for contract Zybil;
 */
export class ZybilContract extends ContractBase {

  private constructor(
    completeAddress: CompleteAddress,
    wallet: Wallet,
    portalContract = EthAddress.ZERO
  ) {
    super(completeAddress, ZybilContractArtifact, wallet, portalContract);
  }



  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(
    address: AztecAddress,
    wallet: Wallet,
  ) {
    return Contract.at(address, ZybilContract.artifact, wallet) as Promise<ZybilContract>;
  }


  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(pxe: PXE, signer: { x: FieldLike, y: FieldLike }) {
    return new DeployMethod<ZybilContract>(Point.ZERO, pxe, ZybilContractArtifact, Array.from(arguments).slice(1));
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
   */
  public static deployWithPublicKey(pxe: PXE, publicKey: PublicKey, signer: { x: FieldLike, y: FieldLike }) {
    return new DeployMethod<ZybilContract>(publicKey, pxe, ZybilContractArtifact, Array.from(arguments).slice(2));
  }



  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return ZybilContractArtifact;
  }


  /** Type-safe wrappers for the public methods exposed by the contract. */
  public methods!: {

    /** initialize(signer_x: field, signer_y: field) */
    initialize: ((signer_x: FieldLike, signer_y: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** stamp_ens(redemption_hash: field, addr: struct, timestamp: field, canceller: struct, msg_key: field, consumption_hash: field) */
    stamp_ens: ((redemption_hash: FieldLike, addr: EthAddressLike, timestamp: FieldLike, canceller: EthAddressLike, msg_key: FieldLike, consumption_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** stamp_ethkey(pubkey_x: array, pubkey_y: array, signature: array) */
    stamp_ethkey: ((pubkey_x: (bigint | number)[], pubkey_y: (bigint | number)[], signature: (bigint | number)[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** valid_signature(signature: array, msg: array) */
    valid_signature: ((signature: (bigint | number)[], msg: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
