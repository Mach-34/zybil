{
  "name": "Zybil",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signer",
          "type": {
            "kind": "struct",
            "path": "types::public_key::Pubkey",
            "fields": [
              {
                "name": "x",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "y",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+2dd3RVxRbGJwmhKUUsgICAgICA3HuTkERAQKoCAgLSSyrSQo2KKGABbPAUEVREUBFBRQQVEey9994FKVKk2Bu82fKdxSQv+v64e+7Kt8hZa9Y3xDj5fXv2mTlz7zlz8uKN6WWLHHG2SDUR9eDfpQv9uwzq7hH8uy00KdQiOTknNZITTgpnhCLpmWkpoeSUzBZp4bRwSlpKdiQtKSknLTktNT0zPTWUHk5OygnnpqQn5YYOHdWdtkJRHj45TyThrEHCWZOEsxYJ50kknLVJOOuQcNYl4TyZhLMeCWd9Es4GJJynkHA2JOFsRMLZmITzVBLOJiScTUk4m5FwnkbC2ZyEM0TCGSbhjJBwJpFwJpNwppBwtlDkFDb5LK8O2qtqywFbqkGrQ0+E1oDWhNaCngStDa0DrQs9GVoPWh/aAHoKtCG0EbQx9FRoE2hTaDPoadDm0BA0DI1Ak6DJ0BRoC6fdVFvSTMFDuw/TDUeunU7C2ZKEsxUJZ2sSzjNIONuQcLYl4WxHwnkmCWd7Es4OJJwdSTg7kXB2NvrXvJXRnlzvybVfOvR0aEtoK2hr6BnQNtC20HbQM6HtoR2gHaGdoJ3N4WvOLracZQoe2jE8m6Svu5JwdiPh7E7CeQ4JZw8Szp4knL1IOM8l4exNwtmHhLMvCed5JJz9SDj7k3AOIOEcSMI5iIRzMAnnEBLOoSScw0g4h5NwZpBwZpJwZpFwZpNw5pBw5pJwjlDk/H/fn58N7QrtBu0OPQfaA9oT2gt6LrQ3tA+0L/Q8aD9of+gA6EDoIOhg6BDoUOgw6HBoBjQTmgXNhuZAc6EjzOHPMs+3ZaQpeGj34SjDkWujSTjHkHCOJeHMI+EcR8I5noRzAgnnRBLOSSSck0k480k4LyDhvJCE8yKjf81bGe3J9Z5c+42CjoaOgY6F5kHHQcdDJ0AnQidBJ0PzoRdAL4ReZA5fc06x5WJbEpzYBc+m/1tcQ9Ed4apGv/+1Gasp931wTHXq5aHlioh5aafeVocjEuw/oNhmKNFhLecwB34q2lLWlgr49/iMrNHtJo7IH5uTN3mSG5iEQh3pJmK88wdKFfp9N3jBfytqYwW1zDBFuNRqe4rRG72m6nGFEpyAu4f2WRdv/MwMWjkQSU1PbhH5++EMbzGYYvRHHtHgDLzElkttmWbLdFtm2HKZLZfbcoUtV9oy05ZZtsy25SrHayWoeyK6J2fhkzhGI1vI18hW1vFhCvmtCC+ldf9utvytRFPwKDyYtS0insJaHfWcvAn5Ofk5PfMzx4zM6pSflzV55Li89hljxrgJEfyRIDESijBZ+OelnICUQT3R+Vnw/5VxNCYjsfa139UKbeXkHjoSigqC0R85rjb6I4cc1zj1wme9HEGCeDgLC/RxUXGsaDwnmI9OusZDu9caveT35fta/T761wVgKLqjQExDUR6SvIWnQh/M00zxvoTCEXFjcR10jvOzRCc+7vX9wSJiF+fU4/E78f/yO3H/0M4/TfPeBpjAnATgL8fsnCL+qPZa4zqjN2DMddoKpyVFIqlJ8ntp2aFwcnZWJC0Syc5MDmWFMrIiOenJ4fTc5EhyUlZ2VqZtMyOcG8rNyErPTTvEFavZcq7xM1v+x6mXzJZRtjkXAdVu93pTvGdL8X29fh8VyRqt/zlg1W73BqN7gspJeIP531k4QbnvpinEIFg6aA7Sc5TzKDi0+32eYvxiNZnMM34mkxudeslkEmWb8xBQ7Xbnm+I9mYjv+fp95HXpNV+RM1ZLr+meYqvcbwWWXjdBFzg/O6KWXhIAd+m1wPhfet1k9AaMhYZv6bXQ+Jktb3bqJbNllG0uREC1273FFO/ZUnzfot9HXpZeC8Cq3e6tRvcElZPwVuN/6TVdIQbB0kFzkF6gnEfBod3vixTjF6vJZJHxM5nc5tRLJpMo21yEgGq3u9gU78lEfC/W7yOvS6/FipyxWnrN8BRb5X4rsPS6HbrE+dkRtfSSALhLryXG/9LrdqM3YCw1fEuvpcbPbHmHUy+ZLaNscykCqt3unaZ4z5bi+079PvKy9FoCVu127zK6J6ichHcZ/0uvGQoxCJYOmoP0EuU8Cg7tfl+mGL9YTSbLjJ/J5G6nXjKZRNnmMgRUu93lpnhPJuJ7uX4feV16LVfkjNXSa6an2Cr3W4Gl1z3QFc7PjqillwTAXXqtMP6XXvcYvQFjpeFbeq00fmbLe516yWwZZZsrEVDtdu8zxXu2FN/36feRl6XXCrBqt3u/0T1B5SS83/hfes1UiEGwdNAcpFco51FwaPf7KsX4xWoyWWX8TCYPOPWSySTKNlchoNrtrjbFezIR36v1+8jr0mu1Imesll6zPMVWud8KLL0ehK5xfnZELb0kAO7Sa43xv/R60OgNGGsN39JrrfEzWz7k1EtmyyjbXIuAarf7sCnes6X4fli/j7wsvdaAVbvdR4zuCSon4SPG/9JrlkIMgqWD5iC9RjmPgkO739cpxi9Wk8k642cyedSpl0wmUba5DgHVbne9Kd6Tifher99HXpde6xU5Y7X0mu0ptsr9VmDp9Rh0g/OzI2rpJQFwl14bjP+l12NGb8DYaPiWXhuNn9nycadeMltG2eZGBFS73SdM8Z4txfcT+n3kZem1Aaza7T5pdE9QOQmfNP6XXrMVYhAsHTQH6Q3KeRQc2hNTvKLnSzx51s71SxU4i9oDVrtvNPcBvipGfROK7gjH6tviUHRHOFYfrYSiO8KxGoeizc94Rc+XHYGeLzccY+9TRm/sFTa5sA8u/KVteavBHOgC6BKo7LT/tC3PmIKHtsdnSfriORLO5xU5g5wJtqaOR24EegX0Suiz0Oegz0OPseUFW140fnPpJZI+epmE8xUPuRSsaV5CbrwMfQUqn3S9astrxm+uvE7SB2+QcL7pMVdeR268AX3TyZW3bHnb+M2Vd0j64F0Szvc85so7yI13oe85ufK+LR8Yv7nyIUkffETC+bHHXPkQufER9GMnVz6x5VPjN1c+I+mDz0k4v/CYK58hNz6HfuHkype2fGX85srXJH3wDQnnJo+58jVy4xvoJidXNtvyrfGbK1tI+mArCec2j7myBbmxFbrNyZXttnxn/ObKDpI+2EnCuctjruxAbuyE7nJyZbct3xu/ubKHpA/2knDu85gre5Abe6H7nFzZb8sPxm+u/EjSBz+RcP7sMVd+RG78BP3ZyZVfbPnV+M2V30j64HcSzj885spvyI3foX84ufKnOXSzoE9vB0j64CAJpzToK1cOoByEyt8KciXO1uPj/OZKQhxHH5Qi4Uz0mCsJyI1S0EQnV0rbehnPuVKWpA/KkXCW95grZYPcgJZ3cuUoWz/ac65UIOmDiiSclTzmSgXkRkVoJSdXKtv6MZ5zpQpJHxxLwnmcx1ypgtw4FnqckyvH2/oJnnOlKkkfVPPQB/ForypiXg1a1pbqtn6i59jXIIl9TY+xr4GY13RiX8vWT/Ic+9oksa/jMfa1EfM6Tuzr2vrJnmNfjyT29T3Gvh5iXt+JfQNbP8Vz7BuSxL6Rx9g3RMwbObFvbOuneo59E5LYN/UY+yaIeVMn9s1s/TTPsW9OEvuQx9g3R8xDTuzlqeuI59gnkcQ+2WPskxDzZCf2KbbewnPsU0lin+Yx9qmIeZoT+3RbP91z7FuSxL6Vx9i3RMxbObFvbetneI59G5LYt/UY+zaIeVsn9u1s/UzPsW9PEvsOHmPfHjHv4MS+o6138hz7ziSx7+Ix9p0R8y5O7M+y9bM9x74rSey7eYx9V8S8mxP77rZ+jufY9yCJfU+Pse+BmPd0Yt/L1s/1HPveJLHv4zH2vRHzPk7s+9r6eZ5j348k9v1JOAeQcA4k4RxEwjmYhHMICedQEs5hJJzDSTgzSDgzSTizSDizSThzSDhzSThHkHCeT8I5koRzFAnnaBLOMSScY0k480g4x5FwjifhnEDCOZGEcxIJ52QSznwSzgtIOC8k4byIhHMKCefFJJxTSTgvIeG8lIRzGgnndBLOGSScl5FwXk7CeQUJ55UknDNJOGeRcM4m4byKhPNqEs5rSDiv9XDPSz+0J/ury70uU6D9cO9Lf+gA6EDoq/i9t6DvQz+BfgndDN0O3Q3dD/0F+ic0Du2Xhh4FrQw9HlodWgtaF9oA2hjaDBqGpkDToa2h7aAdoWdBu0N7QftCB0EHQ4dAh0KHQYdDM6CZ0CxoNjQHmgsdAT0fOhI6CjoaOgY6FpoHHQcdD50AnQidBJ0MzYdeAL0QehF0CvRi6FToJdBLodOg06EzoJdBL4deAb0SOhM6CzobehX0aug10GuhTWy5ztbnxB0639znseORU09Dr8P/U8WWubb+n+AExaF9vl5PMq7cQMI5j4TzRhLO+SScN5FwLiDhXEjCeTMJ5y0knLeScC4i4byNhHMxCeftJJxLSDiXknDeQcJ5JwnnXSScy0g47ybhXE7CeQ8J5woSzpUknPeScN5Hwnk/CecqEs4HSDhXk3A+SMK5hoRzLQnnQyScD5NwPkLCuY6E81ESzvUknI+RcG4g4dxIwvk4CecTJJxPknA+RcL5NAnnMyScz5JwPkfC+TwJ5wsknC+ScL5EwvkyCecrJJyvknC+RsL5OgnnGyScb5JwvkXC+TYJ5zsknO+ScL5Hwvk+CecHJJwfknB+RML5MQnnJyScn5JwfkbC+TkJ5xcknF+ScH5Fwvk1Cec3JJybSDg3k3B+S8K5hYRzKwnnNhLO7SSc35Fw7iDh3EnCuYuEczcJ5/cknHtIOPeScO4j4dzviTO+EGcoukO22lDz/AOJ53hFzz+SeE5Q9PwTiedSip5/JvGcqOj5FxLPpRU9/0riuYyi599IPHdR9Pw7iWd3X6JoPf9B4vkGRc9/kniep+j5LxLPNyp6PkDieb6i54Mknm9S9CxwDJ4XKHqOI/G8UNFzPInnmxU9J5B4vkXRcykSz7cqek4k8bxI0XNpEs+3KXouQ+J5saLnsiSeb1f0XI7E8xJFz+VJPC9V9HwUiec7FD0fTeL5TkXPFUg836XouSKJ52WKniuReL5b0XNlEs/LFT0fQ+L5HkXPVUg8r1D0fCyJ55WKno8j8XyvoufjSTzfp+j5BBLP9yt6rkrieZWi52oknh9Q9FydxPNqRc8nknh+UNFzDRLPaxQ91yTxvFbRcy0Szw8pej6JxPPDip5rk3h+RNFzHRLP6xQ91yXx/Kii55NJPK9X9FyPxPNjip7rk3jeoOi5AYnnjYqeTyHx/Lii54Yknp9Q9NyIxPOTip4bk3h+StHzqSSen1b03ITE8zOKnpuSeH5W0XMzEs/PKXo+jcTz84qem5N4fkHRc4jE84uKnsMknl9S9Bwh8fyyouckEs+vKHpOJvH8qqLnFBLPryl6bkHi+XVFz6kknt9Q9JxG4vlNRc/pJJ7fUvR8OonntxU9tyTx/I6i51Yknt9V9NyaxPN7ip7PIPH8vqLnNiSeP1D03JbE84eKntuReP5I0fOZJJ4/VvTcnsTzJ4qeO5B4/lTRc0cSz58peu5E4vlzRc+dSTx/oei5C4nnLxU9n0Xi+StFz2eTeP5a0XNXEs/fKHruRuJ5k6Ln7iSeNyt6PofE87eKnnuQeN6i6Lknieetip57kXjepuj5XBLPcxU99ybxvF3Rcx8Sz98peu5L4nmHoufzSDzvVPTcj8TzLkXP/Uk871b0PIDE8/eKngeSeN6j6HkQiee9ip4Hk3jep+h5CInn/Yqeh5J4Lmv0PA8j8VxO0fNwEs/lFT1nkHg+StFzJonnoxU9Z5F4rqDoOZvEc0VFzzkknispes4l8VxZ0fMIEs/HKHo+n8RzFUXPI0k8H6voeRSJ5+MUPY8m8Xy8oucxJJ5PUPQ8VtFzNbQTB8/yHkx5L6S8J1HeGyjv0ZM1oayRZM0g19ByTSnXWHLNIXOwzEkyRsuYJeew5LT0sXiuaks1J65TofIuVHk3qLwrU94dKe9SlHcLyrv25N1z8i42eTeZvKtL3l11EIDyrh959428C0bejSLvCpF3Z8i7JOTdCvKuAdl7X/ail73ZZa9y2btb9rKWvZ1lr2PZ+1f2wpW9YWWvVNk7VPbSlL0lZa9F2XtQ9uKTvelkrzbZu0z28qpji+z1JHsfyV5AsjeO7BUje6fIXiKyt4bsNSF7L8heBPJsvjyrLs9uy7PM8myvPOsqz37Ks5DybKA8KyfPjsmzVPJskTxrI8+eyLMY8myC3Ksv967/fS+3LXKvr9z7KveCyr2Rcq+g3Dsn95LJvVVyr5HceyP3osi9GXKvgnx3L99ly3e78l2nfPcn34XJd0PyXYl8dyCfpctny/JZq3z2KJ/FyWdT8lmNfHYha3lZ28paT9Y+shaQa2O5VpRrJ7mWkLlV5hoZe2UsknNzbPzhvv8vMaEuBOa6AQA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "encode_msg",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "msg",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 33,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getEthAddress",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getScore",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 120
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "signer_x",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "signer_y",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ens",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "name",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "consumption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ethkey",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "pubkey_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "pubkey_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_web2",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "msg",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "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",
      "",
      "",
      "",
      "",
      "",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\nmod util;\n\ncontract Zybil {\n    use dep::aztec::{\n        constants_gen::{MAX_NOTES_PER_PAGE},\n        context::Context,\n        hash::compute_secret_hash,\n        note::{\n            note_viewer_options::NoteViewerOptions,\n            note_header::NoteHeader,\n            utils as note_utils\n        },\n        selector::compute_selector,\n        types::{\n            address::{AztecAddress, EthereumAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods, FIELD_SERIALIZED_LEN\n            },\n        },\n        oracle::get_public_key::get_public_key,\n        log::emit_encrypted_log,\n        state_vars::{map::Map, public_state::PublicState, set::Set}\n    };\n    use crate::{\n        types::{\n            public_key::{ Pubkey, PubkeyMethods, PUBKEY_SERIALIZED_LEN },\n            stamp_note::{ StampNote, StampNoteMethods, STAMP_SERIALIZED_NOTE_LEN }\n        },\n        util::{\n            get_ens_stamp_private_content_hash,\n            filter_eth_address_stamp,\n            STAMP_ID\n        },\n    };\n    use dep::std::option::Option;\n\n    global STAMP_SCORES = [7, 12, 4, 2, 15];\n\n    mod StorageSlots {\n        global BACKEND_ID = 1;\n        global STAMP_TYPE_ID = 2;\n        global STAMPS_ID = 3;\n        global SIGNER_ID = 4;\n    }\n\n    struct Storage {\n        registered_signer: PublicState<Pubkey, PUBKEY_SERIALIZED_LEN>,\n        stamp_type: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        stamps: Map<Set<StampNote, STAMP_SERIALIZED_NOTE_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                registered_signer: PublicState::new(\n                    context,\n                    StorageSlots::SIGNER_ID,\n                    PubkeyMethods\n                ),\n                stamp_type: Map::new(\n                    context,\n                    StorageSlots::STAMP_TYPE_ID,\n                    |context, slot| PublicState::new(\n                        context,\n                        slot,\n                        FieldSerializationMethods\n                    )\n                ),\n                stamps: Map::new(\n                    context,\n                    StorageSlots::STAMPS_ID,\n                    |context, slot| Set::new(\n                        context,\n                        slot,\n                        StampNoteMethods\n                    )\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(signer: Pubkey) {\n        // Set registered signer\n        let selector = compute_selector(\"initialize(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [signer.x, signer.y]);\n        // set the backend address based on the sender\n        // setup bridge\n        // let selector = compute_selector(\"_initialize((Field))\");\n        // context.call_public_function(context.this_address(), selector, )\n    }\n\n    #[aztec(private)]\n    fn stamp_ens(\n        redemption_hash: Field,\n        name: Field,\n        timestamp: Field,\n        msg_key: Field,\n        consumption_hash: Field,\n    ) {\n        // GET THE STORED ETH ADDRESS OUT OF ETHKEY STAMP\n        // use as canceller, will fail if wrong eth address stamped/ provided\n        // Retrieve Eth Address from stamps\n        let address = getEthAddress(context.msg_sender());\n        assert(address != 0, \"Address is not zero\");\n        // consume L1 to L2 and emit nullifier\n        // todo: fix inputs\n        // let content_hash = get_ens_stamp_private_content_hash(\n        //     redemption_hash,\n        //     addr.address,\n        //     timestamp,\n        //     canceller.address\n        // );\n\n        // https://docs.aztec.network/dev_docs/tutorials/token_portal/minting_on_aztec#private-flow\n        // do (context.consume_l1_to_l2_message(msg_key, content_hash, secret_for_L1_to_L2_message_consumption);)\n        // CONSUME L1 MESSAGE TO L2\n\n        // CREATE NEW ENS STAMP AND STORE IN SET\n        \n        // EMIT ENCRYPTED LOG OF STAMP CREATION\n    }\n\n    /**\n     * Generate a stamp for an Ethereum address by proving a signature over the sender's Aztec Address\n     *\n     * @param pubkey_x: the X coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param pubkey_y: the Y coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param signature: the signature on the sender's aztec address by given pubkey\n     */\n    #[aztec(private)]\n    fn stamp_ethkey(pubkey_x: [u8; 32], pubkey_y: [u8; 32], signature: [u8; 64]) {\n        // convert msg.sender to [u8] as message to be signed\n        let message = context.msg_sender().to_be_bytes(32);\n\n        // check signature\n        let valid_signature = dep::std::ecdsa_secp256k1::verify_signature(\n            pubkey_x,\n            pubkey_y,\n            signature,\n            message\n        );\n        assert(valid_signature);\n\n        // convert pubkey to EthAddress\n        let mut pubkey: [u8; 64] = [0; 64];\n        for i in 0..32 {\n            pubkey[i] = pubkey_x[i];\n            pubkey[i + 32] = pubkey_y[i];\n        };\n        let pubkeyHash = dep::std::hash::keccak256(pubkey, 64);\n        let mut address: Field = 0;\n        let mut v: Field = 1;\n        for i in 0..20 {\n            let index = 20 - i;\n            address += pubkeyHash[index + 11] as Field * v;\n            v *= 256;\n        }\n\n        // create stamp\n        let mut stamp = StampNote::new(\n            context.msg_sender(),\n            STAMP_ID::ETHEREUM,\n            address\n        );\n        storage.stamps.at(context.msg_sender()).insert(&mut stamp);\n\n        // emit encrypted log of stamp creation\n        emit_encrypted_log(\n            &mut context,\n            context.this_address(),\n            stamp.header.storage_slot,\n            get_public_key(context.msg_sender()),\n            stamp.serialize()\n        );\n    }\n\n   unconstrained fn getEthAddress(owner: Field) -> Field {\n        let mut address = 0; \n        let options = NoteViewerOptions::new().set_offset(0);\n        let notes = storage.stamps.at(owner).view_notes(options);\n        let filtered = filter_eth_address_stamp(notes);\n        if filtered[0].is_some() {\n            let stamp = filtered[0].unwrap_unchecked();\n            address = stamp.data;\n        }\n        address\n    }\n\n    unconstrained fn getScore(owner: AztecAddress) -> u120 {\n        let options = NoteViewerOptions::new().set_offset(0);\n        let notes = storage.stamps.at(owner.address).view_notes(options);\n        let mut sum = 0;\n        for i in 0..notes.len() {\n            if notes[i].is_some() {\n                let stamp = notes[i].unwrap_unchecked();\n                sum += STAMP_SCORES[stamp.stamp_type];\n            }\n        }\n        sum\n    }\n\n    // TODO: Need to nullify stamps \n    #[aztec(private)]\n    fn stamp_web2(signature: [u8; 64], msg: [Field; 2]) {\n        // Encode msg to bytes\n        // let encoded_msg = encode_msg(msg);\n        // let Pubkey { x, y } = storage.registered_signer.read();\n        // let valid_signature = dep::std::schnorr::verify_signature(x, y, signature, encoded_msg);\n        // assert(valid_signature, \"Signature could not be verified with provided data\");\n        let mut stamp = StampNote::new(\n            context.msg_sender(),\n            msg[0] as u8,\n            msg[1]\n        );        \n        storage.stamps.at(context.msg_sender()).insert(&mut stamp);\n        \n        emit_encrypted_log(\n            &mut context,\n            context.this_address(),\n            stamp.header.storage_slot,\n            get_public_key(context.msg_sender()),\n            stamp.serialize()\n        );\n    }\n\n    unconstrained fn encode_msg(msg: [Field; 2]) -> [u8; 33] {\n            let mut bytes: [u8; 33] = [0; 33]; \n            let data = msg[1].to_be_bytes(32);\n            bytes[0] = msg[0] as u8;\n            for i in 0..32 {\n                bytes[i + 1] = data[i];\n            }\n            bytes\n    }\n\n    #[aztec(public)]\n    internal fn initialize(signer_x: Field, signer_y: Field) {\n        storage.registered_signer.write(Pubkey {x: signer_x, y: signer_y});\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(StampNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/main"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "21": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    pub fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    pub fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    pub fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    pub fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    pub fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/abi"
      },
      "36": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/address"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/context"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/log"
      },
      "45": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/lifecycle"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/note_getter"
      },
      "48": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/note_hash"
      },
      "51": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{Select, Sort};\nuse crate::types::vec::BoundedVec;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(Option::none()),\n            sorts: BoundedVec::new(Option::none()),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n        }\n    }\n\n    pub fn select(&mut self, field_index: u8, value: Field) -> Self {\n        self.selects.push(Option::some(Select::new(field_index, value)));\n        *self\n    }\n\n    pub fn sort(&mut self, field_index: u8, order: u2) -> Self {\n        self.sorts.push(Option::some(Sort::new(field_index, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/note_viewer_options"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/utils"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/arguments"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/logs"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "74": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/set"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/utils"
      },
      "89": {
        "source": "use dep::aztec::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_siloed_note_hash,\n};\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\nglobal STAMP_SERIALIZED_NOTE_LEN: Field = 3;\n\nstruct StampNote {\n    owner: Field,\n    // type of stamp\n    stamp_type: u8,\n    // timestamp of when the stamp was issued\n    // timestamp: Field,\n    data: Field,\n    header: NoteHeader\n}\n\nimpl StampNote {\n    pub fn new(owner: Field, stamp_type: u8, data: Field) -> Self {\n        Self { owner, stamp_type, data, header: NoteHeader::empty() }\n    }\n\n    fn serialize(self) -> [Field; STAMP_SERIALIZED_NOTE_LEN] {\n        [\n            self.owner,\n            self.stamp_type as Field,\n            self.data,\n        ]\n    }\n\n    fn deserialize(preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> Self {\n        StampNote {\n            owner: preimage[0],\n            stamp_type: preimage[1] as u8,\n            data: preimage[2],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen(self.serialize())[0]\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let siloed_note_hash = compute_siloed_note_hash(StampNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        dep::std::hash::pedersen([\n            siloed_note_hash,\n            secret.low,\n            secret.high\n        ])[0]\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> StampNote {\n    StampNote::deserialize(preimage)\n}\n\nfn serialize(note: StampNote) -> [Field; STAMP_SERIALIZED_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: StampNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: StampNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: StampNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut StampNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal StampNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header\n};",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/types/stamp_note"
      },
      "90": {
        "source": "use dep::aztec::{\n    constants_gen::MAX_NOTES_PER_PAGE,\n    hash::sha256_to_field,\n};\nuse dep::std::option::Option;\nuse crate::types::stamp_note::StampNote;\n\nmod STAMP_ID {\n    global ETHEREUM: u8 = 0;\n    global ENS: u8 = 1;\n    global GOOGLE: u8 = 2;\n    global DISCORD: u8 = 3;\n    global GITHUB: u8 = 4;\n}\n\npub fn get_ens_stamp_private_content_hash(\n    secret_redemption_hash: Field,\n    name: Field,\n    timestamp: Field,\n    canceller: Field\n) -> Field {\n    // 132 = 32 * 4 + 4\n    let mut hash_bytes: [u8; 132] = [0; 132];\n    let secret_hash_bytes = secret_redemption_hash.to_be_bytes(32);\n    let name_bytes = name.to_be_bytes(32);\n    let timestamp_bytes = timestamp.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    // insert into bytes array\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = name_bytes[i];\n        hash_bytes[i + 68] = timestamp_bytes[i];\n        hash_bytes[i + 100] = canceller_bytes[i];\n    }\n\n    // ethers.id(\"stamp_ens(bytes32,bytes32,uint256,address)\").slice(0, 10)\n    hash_bytes[0] = 0x5e;\n    hash_bytes[1] = 0x8d;\n    hash_bytes[2] = 0x7e;\n    hash_bytes[3] = 0x7e;\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn filter_eth_address_stamp(notes: [Option<StampNote>; MAX_NOTES_PER_PAGE]) -> [Option<StampNote>; 1] {\n    let mut eth_stamp_ret = [Option::none(); 1];\n    for i in 0..notes.len() {\n        if notes[i].is_some() {\n            let stamp = notes[i].unwrap_unchecked();\n            if stamp.stamp_type == STAMP_ID::ETHEREUM {\n                eth_stamp_ret[0] = notes[i];\n            }\n        }\n    }\n    eth_stamp_ret\n}",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/util"
      }
    }
  }
}