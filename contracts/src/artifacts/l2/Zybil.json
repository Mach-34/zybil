{
  "name": "Zybil",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signer",
          "type": {
            "kind": "struct",
            "path": "types::public_key::Pubkey",
            "fields": [
              {
                "name": "x",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "y",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+2dd3gc1RXFjyRLMu5U24ATpwcMeGaLdhdTbAy2KQaDAWO6yso2tuUqeu+9t0AKIb2T3hNCeie9J4T0Tnol5N14JnmzFvCH76z3+Z73fe9byZZ+e8+bOW/vHc28N60NmOa6NHlpd70z+Tr9vqvh++7k647k+/R3pyPbEixmJ6/RlrV4sh4ryivGKTnECN0YySWXXHLJJZdccsk1ytVjF/rbPOZU18cmX2+HTXWCtDbv39ob4ujSjynqgnp+H0lt1O3pSFuqZ4Lro10fl3y/tj5QX7+hPrSgd8Nyf4xGNfxem/f1dO/nOrz36mz4XX8c0/9La7NMm60jPn66gk/5/Whccskll1xyySWXXHKD4Oqxs4XVrmBhtS0WVhELK3LJJZdccskll1xyyW1eYbUbWFixsAINRi655JJLLrnkkkuuDa4eO1tY7Q4WViysQIORSy655JJLLrnkkmuDq8fOFlbTwMKKhRVoMHLJJZdccskll1xybXD12NnC6hlgYcXCCjQYueSSSy655JJLLrk2uHrsbGH1TLCwYmEFGoxccskll1xyySWXXBtcPXa2sJoOFlYsrECDkUsuueSSSy655JJrg6vHzhZWzwILKxZWoMHIJZdccskll1xyybXB1WNnC6tng4UVCyvQYOSSSy655JJLLrnk2uDqsbOF1XPAwoqFFWgwcskll1xyySWXXHJtcPXY2cLquWBhxcIKNBi55JJLLrnkkksuuTa4euxsYfU8sLBiYQUajFxyySWXXHLJJZdcG1w9drawej5YWLGwAg1GLrnkkksuueSSS64Nrh47W1i9ACysWFiBBiOXXHLJJZdccskl1wZXj50trF4IFlYmCqtJDe+jPNjxVNCs5JJLLrlbi6vHziYJe6AVkoQ42CTB/+xtpSQhfrqrr9pJwmTon/zaMU5BeMYnl1xyySWXXHLJJdcGV4+dLfj2BK8Kb4tXheNmXxXeEzQrueSSS+7W4uqxs0nCDPCq8DZ7VbhthIDh/Zvm+1m7KuwfuL1cHzPCgU6bvmGiQl6G6fJ0pK3RMOOT79f29q+cs37Z8Or60MYN/oA0ziL+CdjuvcGohp/3By/9v1xdghFUarFneKxi1FMq1SuFelyMe6NCra9ajkrlvp5qXI3L1fJAoVos1qulaqXWV6tEtbhUrMeD5VpxMIHtpRfXf28q6cDmTdtt7dCfETTPgUKlVuopRKU8x2AG9GcceU0duLfr+7g+U/iuywldkPPNdRFWdr3H9YrrVddrrk9Mftc3oG/KrZMCRLmlAKM9HWjQOyHR0qX7vgN+CoCG8WwcN388Jdapydf1oXXD9eH6ouG+VSv65w0P9W9csWZobu+qVf6JkL5JekJ0jCCy8d/9nCTNjzq9f0t/r9t7bcrFDL9pO3EmWns2SlrBH4t9k9dZ3gHyP0rlQD4xwpi1eV+3Jz/T/hQ/0/YknCdzTG4nQypOhD/uiZ01wptqf1zvC72P6/08VlwtFgqVovxcdSCKSwP9hWqhMNBXivqj3v5CvVaKa4OlQqnYP9Df55i98WA02NtfG6xuiqtjpAGHvkH2g/5HlbT9sfnHjLR0Rsph2s+kdSONX64ncV4HZ/8cuAdA76TPS/cB+sdoxFi3VP+sJFZt7oHQNaaY8EBs/qnboXzsZiqMQX1wU9OcnGcpjmezspcIuud+Y1NiZ7KXlDkHxrIX4fnZyxzkn73Mhp5BDkJ42ctB0J0k0zYXzF5UDs7cHLgHo7WzF9F9sP4xyiV7mZPEqs09BLrGFBMegvyzl0hhDNLsZbbycdIaz2ZlLzF0z/3GpsTOZC/zktf5MJa9iHA/e5mP/LOXedAzyAKEl70sgO4kmbZDwexF5eAcmgP3MLR29iK6D9M/RrlkL/OTWLW5h0PXmGLCw5F/9hIrjEGavWhOzvMVx7NZ2UsPdM/9xqbEzmQvRySvC2EsexHhfvayEPlnL0dAzyBHIrzs5UjoTpJpOwrMXlQOzlE5cBehtbMX0b1I/xjlkr0sTGLV5h4NXWOKCY9G/tlLj8IYpNmL5uS8UHE8m5W9VKB77jc2JXYmezkmeV0MY9mLCPezl8XIP3s5BnoGORbhZS/HQneSTNtxYPaicnCOy4F7PFo7exHdx+sfo1yyl8VJrNrcJdA1pphwCfLPXioKY5BmL5qT82LF8WxW9lKF7rnf2JTYmezlhOR1KYxlLyLcz16WIv/s5QToGeREhJe9nAjdSTJtJ4HZi8rBOSkH7slo7exFdJ+sf4xyyV6WJrFqc0+BrjHFhKcg/+ylqjAGafaiOTkvVT6P0qb9gdSuqHnvnDRrn+v7KMQ50tOY2sdG84ncWpOOTbRlLda8ZplnnJrVSZ5xNmse2tLzs11Rc8Gg5qKi5sYFu0Zh5Lal79c4h2qf+5pPzuQV45wAYtS8CwY5nEdJ6/WLrVPRCgsFRaVQFwryPd/Sqwl2N7yP9smvOElHlmMsBRBjOYcYoRsjV4b7X4tjf5I5DS0x4VdCnfD9ebSlJ/yR1oJSfD8a7P+t5h/U09ESBiuGajD/vKXBAuYqsjMG6wUNRoOBBlNkZwzWBxqMBgMNpsjOGKwfNBgNBhpMkZ0x2ABoMBoMNJgiO2OwOmgwGgw0mCI7Y7BB0GA0GGgwRXbGYMtAg9FgoMEU2RmDLQcNRoOBBlNkZwy2AjQYDQYaTJGdMdgZoMFoMNBgiuyMwVaCBqPBQIMpsjMGWwUajAYDDabIzhhsNWgwGgw0mCI7Y7Ah0GA0GGgwRXbGYGtAg5kwWONBVH6/EI1Q9Qd/LVrCCIVQjeCPDY3QBK4iO2OEdaARaATQCOtBI9AIoBE2gEagEUAjbASNQCOARhgGjUAjgEY4EzQCjQAa4SzQCDQCaISzQSPQCKARzgGNQCOARjgXNAKNABrhPNAINAJohPNBI9AIoBEuAI1AI4BGuBA0Ao0AGuEi0AgmjLCk4X2UBzs+Dfonv3aMMxCe8a1ztc+B0wOIsTeAGPsCiLE/gBgHAoixHkCMgwHEuCyAGJcHEOOKAGI8I4AYVwYQ46oAYlwdQIxDAcS4JoAY1wYQ47oAYlwfQIwbAohxYwAxDgcQ45kBxHhWADGeHUCM5wQQ47kBxHheADGeH0CMFwQQ44UBxHhRDjFCN0ZyySWXXHLJJZdccskll1xyySWX3KZz9diFPv9mxovRCjeWliuh3ljq368Z1Ery2hf12qF/8mvHeGoAMV6MECaRuOCfuJeAq+Vvk6vl+8zGgS1GPaVSvVKox8W4NyrU+qrlqFTu66nG1bhcLQ8UqsVivVqqVmp9tUpUi0vFejxYrhUHE/ilyOdEb1cegzZFzZcForldUfPlgWjuUNR8RSCaRylqvjIQzZ2Kmq8KRHOXouarA9Hcraj5mkA076Go+dpANF+qqPk6g5qvN6j5BoOabzSo+SaDmm82qPkWg5pvNaj5NoOabzeo+Q6Dmu80qPkug5rvNqj5RQY132NQ870GNb/YoOaXGNT8UoOaX2ZQ830GNb/coOb7DWp+hUHNrzSo+VUGNb/aoObXGNT8WoOaX2dQ8+sNan6DQc1vNKj5TQY1v9mg5rcY1PyAQc1vNaj5bQY1v92g5ncY1PxOg5rfZVDzuw1qfo9Bze81qPl9BjW/36DmDxjU/EGDmj9kUPOHDWp+0KDmjxjU/JBBzR81qPljBjV/3KDmTxjU/EmDmj9lUPOnDWr+jEHNnzWo+XMGNX/eoOYvGNT8RYOaHzao+UsGNX/ZoOavGNT8VYOav2ZQ89cNav6GQc3fNKj5WwY1f9ug5u8Y1Pxdg5q/Z1Dz9w1q/oFBzY8Y1PxDg5ofNaj5RwY1/9ig5p8Y1PxTg5p/ZlDzzw1q/oVBzb80qPlXBjX/2qDm3xjU/FuDmn9nUPNjBjX/3qDmPxjU/EeDmv9kUPOfDWr+i0HNfzWo+W8GNf/doOZ/GNT8T4Oa/2VQ8+MGNf/boOYnDGqWjYataW4zqLk9EM2XKGruMHicRxnU3GlQc5dBzd0GNY82qHk7g5rHGNQ81qDmcQY1jzeoeUIgmkcrap4YiObtFDVPCkTzGEXN2weieayi5h0C0TxOUfOOgWger6h5p0A0T1DUvHMgmicqat4lEM2TFDVPDkTz9oqapwSieQdFzVMD0byjouZdA9G8k6Lm3QLRvLOi5t0D0byLouZpipqnJJy2RHOH66Nc73S9y/Vu16UmlBpJagbJoSWnlBxLcg75DJbPJJmjZc4SD8s5LcdYNE92fYo3rvcmr5e5frnrV7h+petXuX6169e4fq3r17l+ves3uH6j6ze5frPrt7h+q+u3uX6763e4fqfrd7l+t+uy1/09yfvI3uCyV7bsHS17Kd/nuuy1e7/rsher7E0qe3XK3pWyl6PsbSh7/cned7IXnOyNJnuFyd5ZspfUA67LXkOy947sRSN7s8heJbJ3h+xlIXs7yF4Hsva/rIUva8PLWumydrispf2g67LW8kOuy1q8sjatrNUqa5fKWp6ytqWs9ShrH8pagLI2nqwVJ2unyVpiD7sua03J2kuyFpGszSNr1cjaLbKWiaztIWtdyNoPshaCrA0gz8rLs+PyLPUjrsuzto+6Ls9iyrOJ8qyePLsmz3LJs03yrI88+yLPgsizEfKsgNw7L/eSP+a63Gss997Kvahyb6bcqyj37sm9bHJvl9zrJPf+yL0wcm+I3Csh9w7I39LlJJO/tcrfHuVvcfK3KflbjfztQq7ly7VtudYr1z7lWqBcG5NrRXLtRK4lSG0ttabUXlKLSG4uuarkbpLLyGe7fNbJ3C9zocwN4pW0/QevodprR28CAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "encode_msg",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "msg",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 33,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+2dj7emVVXH7zPDMHNmwwy/f/8YwMzM9N4DAgniFUl+pEiKJEhmBGRmYApGZmRmZmpkZmZmCqRIiqRIiqRIiqRIimRGgDQiKAjIf9Dy2c97vmu+sz0cvcuz112z7t5rnXXPeZ73nM9nn/2877ve+z4z95C5ublhbharqa8/V81tHTi3WH7O/3SxMPRba97LcVVHR97bg2jPtxvbmrFtP7a1Y1s3tjS29WOTse0wth3HtmFsG8e209h2HtsuY9t1bLuNbfex7TG2Pce219j2Hts+Y9t3bPuNbf+xHTC2A8e2qfAPHtshYztn3cwlVWq+PfUX++xD3r5/nebXkGsiZ+SzoZxf0zmXVOrHMZjxIvXX0L5u39dlXl3WlrW2I866vpzpebvW5IcxWGIcvFykwnbg5GRy1mjVGfw0t+V6XEt+6zvvwzC39XW/SGOwxDh4uUiF7cDJyeSs0aoJ+KnsxRzNV78dOu/DQBysizFYYhy8XKTCduDkZHLWaNVkB6rDjrQn8NvQeR8G4mBdjDcQnx28XKTCduDkZHLWaNWEXTb2dZneo3Yqa+1InJ077+1AHKyLMVi8/xsdXaTCduDkZHLWaNUZfJ23S+nvRH67dt6HgThYF2OweK82OrpIhe3AycnkrNGqCfg6b7fS34X8du+8DwNxsC7GYPFebXR0kQrbgZOTyVmjVRPwdd4epb8b+e3ZeR8G4mBdjMES4+DlIhW2Aycnk7NGqybg67y9Sn8P8tu78z4MxMG6GIMlxsHLRSpsB05OJmeNVk3A13n7lP5e5Ldv530YiIN1MQZLjIOXi1TYDpycTM4arZqAr/P2K/19yG//zvswEAfrYgyWGAcvF6mwHTg5mZw1WjUBX+cdUPr7kd+BnfdhIA7WxRgsMQ5eLlJhO3ByMjlrtGoCvs7bVPoHkN9BnfdhIA7WxRgsMQ5eLlJhO3Ay7y2iVRPwdd7Bpb+J/A7pvA8DcbAuxmCJcfBykQrbgZOTyVmjVRPwdd7jSv9g8vuZzvswEAfrYgyWGAcvF6mwHTg5mZw1WjUBX+c9vvQfR34/23kfBuJgXYzBEuPg5SIVtgMnJ5OzRqsm4Ou8J5T+48nv5zrvw0AcrIsxWGIcvFykwnbg5GRy1mjVBHyd98TSfwL5/XznfRiIg3UxBkuMg5eLVNgOnJxMzhqtmoCv855U+k8kv1/ovA8DcbAuxmCJcfBykQrbgZOTyVmjVRN2eUpfl8PU5clLcHkKucz3dZmWWyAWvMAROs/XwUJfj+manJ/bOn+M2S9cV7ZromNPWmYXfu16sp/LYVJhO3ByMjlrtF6XuCYZDuR3aF+/qSbZuGAMlhgHLxepsB04OZmcNVo1YZendnU5dPre+rAluDyVXA7v6jJ73zqCWPACR+g8XwdH9PWYrsnDTf4Ys1+4hmu4hmu4hmu4hmu4hmu4hmu4hmu4hmu4hmu4hmu4hmu4hmu4hmu4hmu4hmu49ndNdCwvswvfS3KYm8uh81JhO+Sck8lZo3WfCNfkyNI/nPx+sa/fVJMjjQvGYIlx8HKRCtuBk5PJWaNVE3Y5qqtLnu4jetoSXI4il6O7uszuI3o6seAFjtB5vg6e3tdjuiaPNvljzH7hGq7hGq7hGq7hGq7hGq7hGq7hGq7hGq7hGq7hGq7bimuiY0cuswv/Lv5pbi55+h7Gsh1yzsnkrNH6PTvX5JjSP5r8ntHXb6rJMcYFY7DEOHi5SIXtwMnJ5KzRqgm7PLOvy/T/kCwuweWZ5HJsX5fpe5hnVbjgCJ3n6+BZfT2ma/JY44Ex+4XrynZNdOyYZXbh165FP5fp/yGxbAdOTiZnjdbrEtfkuNI/lvx+qa/fVJPjjAvGYIlx8HKRCtuBk5PJWaNVE3Y5vqvLwnT/wLOX4HI8uZzQ1WX2vnUiseAFjtB5vg5O7OsxXZMnmPwxZr9wDddwDddwDddwDddwXdmuiY4dt8wu/Fnm2W4uC9PvXy3bIeecTM4arc8pXJOTSv8E8vvlvn5TTU4yLhiDJcbBy0UqbAdOTiZnjVZN2OW5XV1mn2OfswSX55LLyV1dZp9jn0cseIEjdJ6vg+f19ZiuyZNN/hizX7iGa7iGa7iGa7iGa7iubNdEx05aZhf+LPMcN5fZ51jLdsg5J5OzRutzCtfklNI/mfx+pa/fVJNTjAvGYIlx8HKRCtuBk5PJWaNVE3Z5gYPL85fg8gJyObWvy/Q59oXEghc4Quf5OnhhX4/pmjzV5I8x+20rromOnbLMLvwce76fS5YK24OTTM4arecP1+S00j+V/H61r99Uk9OMC8ZgiXHwcpEK24GTk8lZo1UTdjndweVFS3A5nVzO6Osyvb6+mFjwAkfoPF8HL+7rMV2TZ5j8MWa/bcU10bHTltmFn2Mv8nOZXl8t24OTTM4arecP1+TM0j+D/H6tr99UkzONC8ZgiXHwcpEK24GTk8lZo1UT8HXeS0r/TPL79c77MBAH62IMlhgHLxepsB04OZmcNVo1AV/nvbT0X0J+v9F5HwbiYF2MwRLj4OUiFbYDJ/PeIlo1AV/nnVX6LyW/3+y8DwNxsC7GYIlx8HKRCtuBk5PJWaNVE/B13tmlfxb5ndN5HwbiYF2MwRLj4OUiFbYDJyeTs0arJuDrvHNL/2zy+63O+zAQB+tiDJYYBy8XqbAdODmZnDVaNQFf572s9M8lv9/uvA8DcbAuxmCJcfBykQrbgZOTyVmjVRPwdd7LS/9l5Pc7nfdhIA7WxRgsMQ5eLlJhO3ByMjlrtGoCvs57Rem/nPx+t/M+DMTBuhiDJcbBy0UqbAdOTiZnjVZNwNd555X+K8jv/M77MBAH62IMlhgHLxepsB04OZmcNVo1AV/nvbL0zyO/3+u8DwNxsC7GYIlx8HKRCtuBk5PJWaNVE/B13qtK/5Xk9+rO+zAQB+tiDJYYBy8XqbAdODmZnDVaNQFf511Q+q8ivws778NAHKyLMVhiHLxcpMJ24ORkctZo1QR8nfea0r+A/H6/8z4MxMG6GIMlxsHLRSpsB05OJmeNVk3A13kXlf5ryO8POu/DQBysizFYvFcbHV2kwnbg5GRy1mjVBHyd99rSv4j8/rDzPgzEwboYg8V7tdHRRSpsB05OJmeNVk3A13mvK/3Xkt8fdd6HgThYF2OweK82OrpIhe3AycnkrNGqCfg67+LSfx35/XHnfRiIg3UxBkuMg5eLVNgOnJxMzhqtmoCv815f+heT35903oeBOFgXY7DEOHi5SIXtwMm8t4hWTcDXeW8o/deT35923oeBOFgXY7DEOHi5SIXtwMnJ5KzRqgn4Ou+Npf8G8vuzzvswEAfrYgyWGAcvF6mwHTg5mZw1WjUBX+e9qfTfSH5/3nkfBuJgXYzBEuPg5SIVtgMnJ5OzRqsm4Ou8N5f+m8jvLzrvw0AcrIsxWGIcvFykwnbg5GRy1mjVBHyd95bSfzP5vbXzPgzEwboYgyXGwctFKmwHTk4mZ41WTcDXeW8r/beQ31923oeBOFgXY7DEOHi5SIXtwMnJ5KzRqgn4Ou+S0n8b+f1V530YiIN1MQZLjIOXi1TYDpycTM4arZqAr/PeXvqXkN9fd96HgThYF2OwxDh4uUiF7cDJyeSs0aoJ+DrvHaX/dvL7m877MBAH62IMlhgHLxepsB04OZmcNVo1AV/nvbP030F+f9t5HwbiYF2MwRLj4OUiFbYDJyeTs0arJuDrvHeV/jvJ7+8678NAHKyLMVhiHLxcpMJ24ORkctZo1QR8nffu0n8X+f19530YiIN1MQZLjIOXi1TYDpycTM4arZqAr/PeU/rvJr9/6LwPA3GwLsZgiXHwcpEK24GTk8lZo1UT8HXee0v/PeT3j533YSAO1sUYLDEOXi5SYTtwcjI5a7Rqwi7v7+sy/R2G9y3B5f3kcmlfl+nf911GLHiBI3Ser4PL+npM1+SlJn+M2S9cV7ZromPvXWYXfu16n5/L9HcYLNuBk3lvEa3XJa7J5aV/Kfn9U1+/qSaXGxeMwRLj4OUiFbYDJyeTs0arJuzywa4uefr/Kz+wBJcPkssVXV1m71sfIha8wBE6z9fBh/p6TNfkFSZ/jNkvXMM1XMM1XMM1XMM1XMM1XMM1XMM1XMM1XMM1XMN1W3FNdOzyZXbh38V/wM0lT///umU75JyTyVmj9Xt2rsmVpX8F+f1zX7+pJlcaF4zBEuPg5SIVtgMnJ5OzRqsm7PKRri6z72E+vASXj5DLVV1dZt/DfJRY8AJH6DxfBx/t6zFdk1eZ/DFmv3AN13AN13AN13AN13AN13AN13AN13AN13AN13AN123FNdGxK5fZhX8X/2E3l9n3MJbtkHNOJmeN1u/ZuSZXl/5V5Pcvff2mmlxtXDAGS4yDl4tU2A6cnEzOGq2asMvHu7osTN/DfGwJLh8nl2u6usy+h/kEseAFjtB5vg4+0ddjuiavMfljzH7hGq7hGq7hGq7hGq7hurJdEx27epld+LPMx9xcFqbPsZbtkHNOJmeN1ucUrsm1pX8N+f1rX7+pJtcaF4zBEuPg5SIVtgMnJ5OzRqsm7PKpri6zz7GfXILLp8jluq4us8+xnyYWvMAROs/Xwaf7ekzX5HUmf4zZL1zDNVzDNVzDNVzDNVxXtmuiY9cuswt/lvmkm8vsc6xlO+Sck8lZo/U5hWtyfelfR37/1tdvqsn1xgVjsMQ4eLlIhe3AycnkrNGqCbt8tqvL7HPsZ5bg8llyuaGry+xz7OeIBS9whM7zdfC5vh7TNXmDyR9j9gvXcA3XcA3XcA3XcA3Xle2a6Nj1y+zCn2U+4+Yy+xxr2Q4552Ry1mh9TuGa3Fj6N5Dfv/f1m2pyo3HBGCwxDl4uUmE7cDLvLaJVE3b5Ql+X6e/DfH4JLl8gl5v6ukyfY79ILHiBI3Ser4Mv9vWYrsmbTP4Ys1+4rmzXRMduXGYXfu36vJ/L9PdhLNuBk5PJWaP1usQ1ubn0byK//+jrN9XkZuOCMVhiHLxcpMJ24ORkctZo1YRdvtzXZXrf+tISXL5MLrf0dZnet75CLHiBI3Ser4Ov9PWYrslbTP4Ys1+4rmzXRMduXmYXfu36kp/L9L5l2Q6cnEzOGq3XJa7JraV/C/n9Z1+/qSa3GheMwRLj4OUiFbYDJyeTs0arJuzyNQeXry7B5Wvkcltfl+l96+vEghc4Quf5Ovh6X4/pmrzN5I8x+20rromO3brMLvwc+6qfS5YK24OTTM4arecP1+T20r+N/P6rr99Uk9uNC8ZgiXHwcpEK24GTk8lZo1UT8HXeN0r/dvL77877MBAH62IMlhgHLxepsB04OZmcNVo1AV/nfbP0v0F+/9N5HwbiYF2MwRLj4OUiFbYDJyeTs0arJuDrvDtK/5vk97+d92EgDtbFGCwxDl4uUmE7cHIyOWu0agK+zruz9O8gv7s678NAHKyLMVhiHLxcpMJ24ORkctZo1QR8nXd36d9Jft/qvA8DcbAuxmCJcfBykQrbgZOTyVmjVRPwdd49pX83+f1f530YiIN1MQZLjIOXi1TYDpycTM4arZqAr/M2l/495PftzvswEAfrYgyWGAcvF6mwHTiZ9xbRqgm7fKdzzrrGfcRaVX6Cs35s95b+feRxX0+Phfl5XfP+nmuWv0vy3bIW1tZjD1SOfW9u62jV4wGa92Dp30t781DXPObn1eVhWn+RGA/Q8Uf6cheYO5QGBo6vpv5b1255LB633dj+n/bpPlrvB6W/qjzmkcpjvk99XgdzbR91xP4Inee1HvwxftvTvMXyc/6ni2k/HyLXRRr/gHwuXrvF4cG+Dpn3dLuyLq6hB/1yn+drAtewrYsef9Rhz8HFNQwGjq+m/mVl7+focRq4ruC8nvYLj9PXg9rz0iOnhyinRRo/Sscf6zH8fKnl+BDl+HDlca19ETr/8E/I4Tl8DXrsG+e+SGOw9DlxCV0DnMMqctNYTznw63Pn5+xWr/8a64jL+/X9rty8wO9viNb7Ij+Pe79+6BqPEMu+D8jcj743eb0nPtY19Igfd8r/0R+T/6MVj+V4DoVruIZruIZruIZruIZruIZruIZruIZruIZruIZruG5LromObV5mF75Pwe/7krwgFbbH7/Z1b1eXtfh70CPWbWF2vd9gPk/fqdxPOS2SA1ir6THPWLfF66jS1+9/cL/M5vKT77fhe2nw3RHOrS3z7zfzPe7xGOa2vsdjkXL9Djna+zx03rfn6nv0XTp+j4Mv9m6N8QBrNT3mhFKPHcsY95VpfI8er8E143vh7u6aw+y7M/bAfnIsUp/vObuzq8vs+0O+P3aRGMy9oy93gbn47t3er7ua+qev27IffL8tniNw1hreVXkc979l5vD9r3c55/xY9+KCpa8hJ1Oud1W87yVvnOfXE9RtM+XicV/xY93DyvcVbzbu/V3yVvewOt5XXM15teHy+xUey+9X9nneTQ5vIgpYResfVH6uLiJryubom8y6IqxPGt3EHeZmL5QbxrZxbDuNbeex7TK2Xce229h2H9seY9tzbHuNbe+x7TO2fce239j2H9sBYztwbJsK/+CxHULJ8yYcXzZm1zI+8byzz7lo0/kXXrDp/HM3nXX+heed/eofAlhYjM8EdQEA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "format_eth_msg",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_eth_address",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_score",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "signer_x",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "signer_y",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ens",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "name",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "consumption_secret",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ethkey",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "pubkey_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "pubkey_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_web2",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "msg",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "eJztnN1OGzEQRt9lryPkGf/nVapeoJZKSAiqwh3KuzeoxBstlkeZODNda68AySaHL8OZnWzi9+np5cf92+PL8+u0f5/stP/2Pr3+vn/++On17f7P27Q3u+nh+efx62E3/Xp8epj2cNh9WQXW+vy58vh9grLa+tpyh8adljsM1HIbsKw2bl6cD993k1sntl8ndlgndlwndlondl4nNpiVcsNKuXGl3CvtlLDSVgkr7ZWw0mYJK+2WsNJ2CZL98rimkNicruHGar/EmE7omIIj6KPzhT6G+W+16dapY7Vr3pS+Z/bV3nkhfTaFPiGc0388QrXLXfgIMbYeodqPLnuEZEtINiOSz4Cf68eluASqNpqbAoU0l0Q0fglU7SCaQNXWoAlUdb4mUFXmikC2g6X7AnUQb1+gDi7tC9RBvX2B5E1NAMmbOlo/A3lcAsmbmgCSNzUBJG9qAkje1G0gJ29qAkje1ASQvKkJIHlTE0DypiaAFEydQgFKxi6BFEzdBlIwdRtIwdRtIAVTN4G8gqnbQAqmbgMpmLoNpGDqNpCCqdtA4qb2aMorUB5h+XKMFzc1BSRuagpI3NQUkLipCaAgbmoKSNzUFJC4qSkgcVNTQOKmpoAUTO3DDBTdEkjB1G0gBVO3gRRM3QZSMHUTKCqYug2kYOo2kIKp20AKpm4DKZi6DSRvaotz67A2LYHkTU0AyZuaAJI3NQEkb+o2UJI3NQEkb2oCSN7UBJC8qQkgeVMTQOKmDhjKLc5gTV4CiZs6WIwzUFr2siRu6uAACpD7cmshiZs6pDAnlPFLQuKmDtnhDJSXg2IWN3U0UO4GRROX/2VZ3NTR5HKBFiEv34OWxU0d0ZQ3bEZMy3c2ZHFTR4vzU2ZtaC8P1n4uDn5+dkNtqbdw4vDH6+T59zI+USLeLi5MJZ5+dzj7J6ymAibPb20BA9jOxRk4KceZmK8KUbzF3S5EgPleBqC17VxywlPV5pSvC1G8LY8YovilxIghil/+jBii+CXbgCGCkb/OHDFF+YvjEVOUv6IfMcX/fQxZR4oDjS2KKW5zS48Ut8GlR4rb5NIjxW106ZHiNrt0SLF+6suW4oUpjjS72JLL8XtPBJOtPX2mPDtjrktxpNlFL8WRZhe9FEeaXfRSHGl20UtxpNlFL8WRZhe9FEeaXfRSHGl2UUuxxwlcW4o9TgLbUuxxItmWYo9T17YU5U+WGzLFbXbpkeI2u/RIcaTZJeZyCiWkeGUw//k44uMJJDpLBNP8S+1dtQTAzEd6mrzc5DibPGdT4GyKnE2JsylzNoFh7QLWLmTtYlUFsMoCWHUBrMIAVmUAqzSAVRvIqg1k1QbiXbWJQjnA+PyMBO/+HS58VzVjKB8pingmavzcU31ZgthTv4NIbaoOna1NmVXrmVXrmVXrmVXrmVXrmadBpgd5IjQ8ExqeCg3PhYYnQ8OzoeHp0PB8aHhCNLwq4bZLXpUwGyazYzJbJrNnMpsms2sy2yavbwKvcQKvcwLyqgR5VYK8KkFelSCvSpBXJcioksPhL7v8IoQ=",
      "",
      "eJzN3N2qNNmRHuB76WNhKtZ/6laMD4Q9hoFBYyydCd2709D704ByabGjCvZzpBbUKwVfRYa638pHf/vtP/7zf/7pr//+n3/+y29//Ntvr/82fvvjf//bb3/5P3/68///93/565/+719/++PrD7/925//1/2vf//Db//73//j3377Y/z9D//0qdJi1N8/ef/1nL8+Xdfjx8vr9evjJdp//fj/+MM9y4RmWdAsFzRLvKRhQhqmSMNUaZgmDdOlYaTzG9L9DekAh3SBi3SBi3SBi3SBi3SBi3SBi3SBi3SBi3SBi3SBi3SBq3SBq3SBq3SBq3SBq3SBq3SBq3SBq3SBq3SBq3SBm3SBm3SBm3SBm3SBm3SBm3SBm3SBm3SBm3SBm3SBu3SBu3SBu3SBu3SBu3SBu3SBu3SBu3SBu3SBu3SBh3SBh3SBh3SBh3SBh3SBh3SBh3SBh3SBh3SBh3SBp3SBp3SBp3SBp3SBp3SBp3SBp3SBp3SBp3SBp3SBl3SBl3SBl3SBl3SBl3SBl3SBl3SBl3SBl3SBl3SBL+kCX9IFvqQLfEkX+JIu8CVd4Eu6wJd0gS/pAl/SBY6XdILjJd3geElHOF7SFY6XdIbjJd3heEmHOF7SJY6XdIrjRd1ijMdRt9gCcpaQs4icZeQsJGcpOYvJUU4uKCgXlJQLisoFZeWCwnJBabmguFxQXi4oMBeUmAuKzAVl5oJCc0GpuaDYXFBuLig4F5ScC4rOBWXngsJzQem5oPhcUH4uKEAXlKALitAFZeiCQnRBKbqgGF1Qji4oSBeUpAuK0gVl6YLCdEFpuqA4XVCeLihQF5SoC4rUBWXqgkJ1Qam6oFhdUK4uKFgXlKwLitYFZeuCwnVB6bqgeF1Qvi4oYBeUsAuK2AVl7IJCdkEpu6CYXVDOLihoF5S0C4raBWXtgsJ2QWm7oLhdUN4uKHAXlLgLitwFZe6CQndBqbug2F1Q7q5Q7q5Q7q5Q7q5Q7q68pFtcKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKHdXKXdXKXdXKXdXKXdXX9ItrpS7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7q5S7a5S7a5S7a5S7a5S7ay/pFjfK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3TXK3XXK3XXK3XXK3XXK3fWXdIs75e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e465e4G5e4G5e4G5e4G5e7GS7rFg3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3g3J3k3J3k3J3k3J3k3J38yXd4km5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0m5u0W5u0W5u0W5u0W5u/WSbvGi3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N2i3N1FubuLcncX5e4uyt1dL+kWX5S7uyh3d1Hu7qLc3UW5u4tydxfl7i7K3V2Uu7sod3dR7u6i3N1FubuLcncX5e4uyt1dlLu7KHd3Ue7uotzdRbm7i3J3F+XuLsrdXZS7uyh3d1Hu7nrP3f2L//jcNG/d4o9P89Yt/vg0b93ij0/z1i3++DRv3eKPT/PWLf74NG/d4k9P8567+/g0b93ij09D3eL33N3Hp6Fu8Xvu7uPTULf4PXf38WmoW/yeu/v0NO+5u49PQ93i99zdx6ehbvF77u7j01C3+D139/FpqFv8nrv7+DTULX7P3X18GuoWv+fuPj4NdYvfc3cfn4a6xe+5u49PQ93i99zdx6ehbvF77u7j01C3+D139/FpqFv8nrv7+DTULX7P3X18GuoWv+fuPj4NdYvfc3cfn4a6xe+5u49PQ93i99zdx6ehbvF77u7j01C3+D139/FpqFv8nrv7+DTULX7P3X18GuoWv+fuPj4NdYvfc3cfn4a6xe+5u49PI93ieL0H7z4/jnSN73Gkc3yPI93jexzpIN/jSBf5Hkc6yfc40k2+x5GO8j2OdZXfI3ifH8e6yu8hvM+PY13l9xje58exrvJ7EO/z41hX+T2K9/lxrKv8Hsb7/DjWVX6P431+HOsqvwfyPj+OdZXfI3mfH8e6yu+hvM+PY13l91je58exrjIF8+5xrKtM0bx7HOsqUzjvHse6yhTPu8exrjIF9O5xrKtMEb17HOsqU0jvHse6yhTTu8exrjIF9e5xrKtMUb17HOsqU1jvHse6yhTXu8exrjIF9u5xrKtMkb17HOsqU2jvHse6yhTbu8exrjIF9+5xrKtM0b17HOsqU3jvHse6yhTfu8exrjIF+O5xrKtMEb57HOsqU4jvHse6yhTju8exrjIF+e5xrKtMUb57HOsqU5jvHse6yhTnu8exrjIF+u5xrKtMkb57HOsqU6jvHse6yhTru8exrjIF++5xrKtM0b57HOoqh2X7wrJ9Ydm+sGxfvKirHJbtC8v2hWX7wrJ9Ydm+sGxfWLYvLNsXlu0Ly/aFZfvCsn1h2b6wbF9Yti8s2xeW7QvL9oVl+8KyfWHZvrBsX1i2LyzbF5btC8v2hWX7wrJ9Ydm+sGxfWLYvLNsXlu0Ly/aFZfvCsn1h2b6wbF9Yti8s2xeW7QvL9oVl+8KyfWHZvrBsX1i2LyzbF5btC8v2hWX7wrJ9Ydm+sGxfWLYvLNsXlu0Ly/aFZfvCsn1h2b6wbF9Yti8s2xeW7QvL9oVl+8KyfWHZvrBsX1i2LyzbF5btC8v2hWX7wrJ9Ydm+sGxfWLYvLNsXlu0Ly/aFZfvCsn1h2b6wbF9Yti8s2xeW7QvL9oVl+8KyfWHZvrBsX1i2r1i2r1i2r1i2r1i2r7yoq1ws21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21cs21ct21ct21ct21ct21df1FWulu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu2rlu1rlu1rlu1rlu1rlu1rL+oqN8v2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2Ncv2dcv2dcv2dcv2dcv29Rd1lbtl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+7pl+4Zl+4Zl+4Zl+4Zl+8aLusrDsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Dsn3Tsn3Tsn3Tsn3Tsn3zRV3ladm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+adm+Zdm+Zdm+Zdm+Zdm+9aKu8rJs37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js37Js32XZvsuyfZdl+y7L9l2vx6u8+rp+D64R/3qoMdrvHx3X+PXJ8vTReK2veSJi/tcPf43zeJV/bpzHq/xz4zxe5Z8b5/Eq/9w4j1f5x8Z5tn0/N87jVf65cR6v8s+N83iVf24c6yo/276fG8e6ys+27+fGsa7ys+37sXGebd/PjWNd5Wfb93PjWFf52fb93DjWVX62fT83jnWVn23fz41jXeVn2/dz41hX+dn2/dw41lV+tn0/N451lZ9t38+NY13lZ9v3c+NYV/nZ9v3cONZVfrZ9PzeOdZWfbd/PjWNd5Wfb93PjfPMqf8W+eT2/Yt+8cr/Hnk3bOfbNq/EV++bT/RX75lP4Ffvm0/IV++ZWf8W+uX1fsdyWPJugcyy3Jc/G5hzLbcmzWTnHclvybEDOsdyWPJuKcyy3Jc9G4RzLbcnzO//nWG5Lnt+hP8dyW/L8Tvo5ltuS53e8z7Hcljy/M32O5bbk+R3kcyy3Jc/v9J5juS15fkf2HMttyfM7p+dYbkue3+E8x3Jb8vxO5DmW25LndwzPsdyWPL+zd47ltuT5HbhzLLclz++UnWOZLSmv53e0zrHMltyxzJbcscyW3LHMltyxzJbcscyW3LHMltyxzJbcsdyWfPedka9Ybku++w7GVyy3Jd99p+ErltuS774j8BXLbcl3f3P/iuW25Lu/YX/Fclvy3d+Ev2K5Lfnub6xfsdyWfPc3y69Ybku++xvgVyy3Jd/9Te0rltuS7/5G9RXLbcl3f/P5iuW25Lu/oXzFclvy3d8kvmK5Lflux/8Vy23Jdzvzr1huS77bQX/Fclvy3U73K5bbklT3esdyW5LqXu9YbktS3esdy21Jqnu9Y7ktSXWvdyy3Janu9Y7ltiTVvd6x3Jakutc7ltuSVPd6x3Jbkupe71huS1Ld6x3LbUmqe71juS1Jda93LLclqe71juW2JNW93rHclqS61zuW25JU93rHcluS6l7vWG5LUt3rHcttSap7vWO5LUl1r3cstyWp7vWO5bYk1b3esdyWpLrXO5bbklT3esdyW5LqXu9Yaksi171GrnuNXPcaue41ct1r5LrXyHWvketeI9e9Rq57jVz3GrnuNXLda+S618h1r5HrXiPXvUaue41c9xq57jVy3WvkutfIda+R614j171GrnuNXPcaue41ct1r5LrXyHWvketeI9e9Rq57jVz3GrnuNXLda+S618h1r5HrXiPXvUaue41c9xq57jVy3WvkutfIda+R614j171GrnuNXPcaue41ct1r5LrXyHWvketeI9e9Rq57jVz3GrnuNXLda+S618h1r5HrXiPXvUaue41c9xq57jVy3WvkutfIda+R614j171GrnuNXPcaue41ct1r5LrXyHWvketeI9e9Rq57jVz3GrnuNXLda+S618h1r5HrXiPXvUaue41c9xq57jVy3WvkutfIda+R614j171GrnuNXPcaue615LrXsqk1r1q/YlftD7HnL+AYe/4jufr4FevzIfb8R3Jd81fsuv45tikaj7HnB+cYe35wjrHnB+cY23xvp9jmezvFnh+cY+z5wTnGNltyiuW2ZFM0HmO5LdkUjcdYbks2ReMxltuSTdF4jOW25LlovF4lfo/df1kfYo9bcow9F43n2OOWnGOPW3KOPW7JOfa4JefY45acY49bco49bsk5ltuS56LxGHsuGs+x3JY8F43nWG5LnovGcyy3Jc9F4zmW25LnovEcy23Jc9F4juW25LloPMc2X0D/R6w/xTZfwCH23Kpdr9l+xdbD370+t2pX9P4Vi6e/n3xu1c6x5wfnGHt+cI6x5wfnGHv+3o6x5+/tGHt+cI6x5wfnFHtu1c6x3JY8t2rnWG5Lnlu1cyy3Jc+t2jmW25LnVu0cy23Jc6t2xbx+xVY8xDZbcopttuQU22zJKbbZklNssyWn2GZLTrHNlpximy05xTZbcog9t2rnWG5Lnlu1cyy3Jc+t2jmW25LnVu0cy23Jc6t2jqW2pD63audYakvq8xuN51hqS+pz9XeOPX8B94P4Fbs/8xB7/gJOsedW7Sr/+PvJ8vC/AfW5Vbtq+xWr8yn2/EdyjD0/OMfY84NzjD0/OMfY8/d2ij0XVsfv7bmwOn5vz4XVOfb8BRxjz1/A/Y8Vv2Lzn1vs+lxYnWObB+cU2zw4h9imsDrGni/XMbbZklMstyWbwuoYy23JprA6xjZbcopttuQU22zJIbYprI6xzZacYrljvimsjrHclmwKq2MstyWbwuoYy23JprA6xTaF1TGW25JNYXWM5bbk+c24cyy3JZtW7RjLbcmuVfvXZVzdtGqHMq5uWrVjbFNHn2KbOnr9I3ath9imjj7FNm3oKbZpQ0+xTR19im3q6ENs06odY7kt2bRqx1huSzat2jG22ZJTbLMlp9hmS06xzZacYpstOcQ2rdoxltuSTat2jOW2ZNOqHWO5Ldm0asdYbks2rdoxltuSTat2jOW2ZNOqHWO5Ldm0asdYbks2b48d3rCqm7fHrl//ILau+c//bW3z9tgxtnkJ5hTbvARzim1egjnFHr+3c2zzEswptnkJ5hTbvARzim225BTLbcnuhbpTLLcluxfqTrHcluxeqDvFcluye6HuFMttye6FulMstyW7F+pOsdyW7F6oO8VyW7J7oe4Uy23J7oW6Uyy3JRu5e4zltmQjd4+x3JZs5O4xltuSjdw9xnJbspG7x1huSzZy9xjLbclG7h5juS3ZyN1jLLclG7l7jOW2ZCN3j7Hclmzk7jGW25KN3D3GcluykbvHWG5LNnL3GMttyUbuHmO5LdnI3WMstyUbuXuM5bZkI3ePsdyWbOTuMZbbko3cPcZyW7KRu8dYbks2cvcYy23JRu4eY7kt2cjdYyy3JRu5e4zltmQjd4+x3JZs5O4xltuSjdw9xnJbspG7x1huSzZy9xjLbclG7h5juS3ZyN1jLLclG7l7jOW2ZCN3j7Hclmzk7jGW25Jd93qKpbak57rXnutee6577bnutee6157rXnuue+257rXnutee6157rnvtue6157rXnutee6577bnutee6157rXnuue+257rXnutee6157rnvtue6157rXnutee6577bnute+613/9f4zQd93rIbbrXk+xzZacYpstOcU2W3KKbbbkFNtsySm22ZJTbLMlp1huS3bd6yG2615PsdyW7LrXUyy3Jbvu9RTLbcmuez3Fcluy615PsdyW7LrXUyy3JbvudRv7+9//HxipWL0=",
      "",
      "",
      "",
      "",
      "",
      "eJzVWNFq4zAQ/Bc/hyCttNrd/MrRh3DXQqGkxyVvwf9eN1iSwSu50XG96CkOzCyj8e6O8HV4e/95vLy+n87D4ToEGg4/rsP59/H0+fd8Of65DAezG55Pv6bfcTe8vL49Dwc77lYo6xzKjJye2Sa0Qw3uwfgI9xC24C5AQhufwTI+7YbAneqWPnWT6VS37VQ3dKrbdarbd6obO9UdOtXdaV5Sp3lJneYld5qX3Glecqd5yd+ZlxMmKXHCf6VbzUsKJkqnYGGh/pOiRlWdoqZEnaIu6DpF3Y11irqWqhRRN0Kdog5jnaLOQZ2itmCdUnj7IVNEqr3LiDOUJSQkwd2NKIWu+roUIRvLG+C6FpjmfQYDLiZfrWvcDBXIg0z+prrQ2A+uujBbD666MN4PrrqwYbJqAqzHA0Ba98ttP9Vfg4njERkoQb0WDJ6jBDQuQVE1w5lkhnP5iCyqXpP0Am6AwabCPr+8m3PWFDbt/7cObbIumA3rAs1QZzPU890L0ppCivwjOwTi5UjYL+24aSnE0zdokZUWPfeYovEk1lW1+HQP9JhDDGfb9Yy8ozymxgoOl+UVVyQaCJQP6kJDt+h5eofs4ONoBsKVK3rwkfepPPpqeZDoiuPFYJjb11XaqxE1nSrd2I2svyU3saSFRaaJZZtY0MRyTSzfxMImVmhiNfUGNfUGNfUGN/UGN/UGN/UGN/WGNPXGFONtNLtXL3we49pDm1dkmK8Mbq8uJuC4y5xbb/iCG1skVd4WSb0O1kmNtoe9VS9QaESJoxDGp3H8AHQLNDM="
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\nmod util;\n\ncontract Zybil {\n    use dep::aztec::{\n        constants_gen::{MAX_NOTES_PER_PAGE},\n        context::Context,\n        hash::{compute_secret_hash, sha256_to_field},\n        note::{\n            note_viewer_options::NoteViewerOptions,\n            note_header::NoteHeader,\n            utils as note_utils\n        },\n        selector::compute_selector,\n        types::{\n            address::{AztecAddress, EthereumAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods, FIELD_SERIALIZED_LEN\n            },\n        },\n        oracle::get_public_key::get_public_key,\n        log::emit_encrypted_log,\n        state_vars::{map::Map, public_state::PublicState, set::Set}\n    };\n    use crate::{\n        types::{\n            public_key::{ Pubkey, PubkeyMethods, PUBKEY_SERIALIZED_LEN },\n            stamp_note::{ StampNote, StampNoteMethods, STAMP_SERIALIZED_NOTE_LEN }\n        },\n        util::{\n            get_ens_stamp_private_content_hash,\n            filter_eth_address_stamp,\n            STAMP_ID,\n            STAMP_SCORE\n        },\n    };\n    use dep::std::option::Option;\n\n    global STAMP_SCORES = [\n    STAMP_SCORE::ETHEREUM, \n    STAMP_SCORE::ENS, \n    STAMP_SCORE::GOOGLE, \n    STAMP_SCORE::DISCORD, \n    STAMP_SCORE::GITHUB\n];\n\n    mod StorageSlots {\n        global BACKEND_ID = 1;\n        global STAMP_TYPE_ID = 2;\n        global STAMPS_ID = 3;\n        global SIGNER_ID = 4;\n    }\n\n    struct Storage {\n        registered_signer: PublicState<Pubkey, PUBKEY_SERIALIZED_LEN>,\n        stamp_type: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        stamps: Map<Set<StampNote, STAMP_SERIALIZED_NOTE_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                registered_signer: PublicState::new(\n                    context,\n                    StorageSlots::SIGNER_ID,\n                    PubkeyMethods\n                ),\n                stamp_type: Map::new(\n                    context,\n                    StorageSlots::STAMP_TYPE_ID,\n                    |context, slot| PublicState::new(\n                        context,\n                        slot,\n                        FieldSerializationMethods\n                    )\n                ),\n                stamps: Map::new(\n                    context,\n                    StorageSlots::STAMPS_ID,\n                    |context, slot| Set::new(\n                        context,\n                        slot,\n                        StampNoteMethods\n                    )\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(signer: Pubkey) {\n        // Set registered signer\n        let selector = compute_selector(\"initialize(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [signer.x, signer.y]);\n        // set the backend address based on the sender\n        // setup bridge\n        // let selector = compute_selector(\"_initialize((Field))\");\n        // context.call_public_function(context.this_address(), selector, )\n    }\n\n    #[aztec(private)]\n    fn stamp_ens(\n        redemption_hash: Field,\n        name: Field,\n        timestamp: Field,\n        msg_key: Field,\n        consumption_secret: Field\n    ) {\n        // Retrieve Eth Address from stamps. Use as canceller, will fail if wrong eth address stamped/ provided\n        let eth_address = get_eth_address(context.msg_sender());\n\n        // consume L1 to L2 and emit nullifier\n        let content_hash = get_ens_stamp_private_content_hash(\n            redemption_hash,\n            name,\n            timestamp,\n            eth_address\n        );\n\n        // CONSUME L1 MESSAGE TO L2\n        context.consume_l1_to_l2_message(msg_key, content_hash, consumption_secret);\n\n        // CREATE NEW ENS STAMP AND STORE IN SET\n        let mut stamp = StampNote::new(\n            context.msg_sender(),\n            STAMP_ID::ENS,\n            name\n        );     \n        storage.stamps.at(context.msg_sender()).insert(&mut stamp, false); \n\n        // EMIT ENCRYPTED LOG OF STAMP CREATION\n        emit_encrypted_log(\n            &mut context,\n            context.this_address(),\n            stamp.header.storage_slot,\n            get_public_key(context.msg_sender()),\n            stamp.serialize()\n        );\n    }\n\n    /**\n     * Generate a stamp for an Ethereum address by proving a signature over the sender's Aztec Address\n     *\n     * @param pubkey_x: the X coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param pubkey_y: the Y coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param signature: the signature on the sender's aztec address by given pubkey\n     */\n    #[aztec(private)]\n    fn stamp_ethkey(pubkey_x: [u8; 32], pubkey_y: [u8; 32], signature: [u8; 64]) {\n        // convert msg.sender eth signature message format\n        let message = format_eth_msg(context.msg_sender());\n        // check signature\n        let valid_signature = dep::std::ecdsa_secp256k1::verify_signature(\n            pubkey_x,\n            pubkey_y,\n            signature,\n            message\n        );\n        assert(valid_signature);\n\n        // convert pubkey to EthAddress\n        let mut pubkey: [u8; 64] = [0; 64];\n        for i in 0..32 {\n            pubkey[i] = pubkey_x[i];\n            pubkey[i + 32] = pubkey_y[i];\n        };\n        let pubkeyHash = dep::std::hash::keccak256(pubkey, 64);\n        let mut address: Field = 0;\n        let mut v: Field = 1;\n        for i in 0..20 {\n            let index = 20 - i;\n            address += pubkeyHash[index + 11] as Field * v;\n            v *= 256;\n        }\n\n        // create stamp\n        let mut stamp = StampNote::new(\n            context.msg_sender(),\n            STAMP_ID::ETHEREUM,\n            address\n        );\n        storage.stamps.at(context.msg_sender()).insert(&mut stamp, false);\n\n        // emit encrypted log of stamp creation\n        emit_encrypted_log(\n            &mut context,\n            context.this_address(),\n            stamp.header.storage_slot,\n            get_public_key(context.msg_sender()),\n            stamp.serialize()\n        );\n    }\n\n   unconstrained fn get_eth_address(owner: Field) -> Field {\n        let mut address = 0; \n        let options = NoteViewerOptions::new().set_offset(0);\n        let notes = storage.stamps.at(owner).view_notes(options);\n        let filtered = filter_eth_address_stamp(notes);\n        if filtered[0].is_some() {\n            let stamp = filtered[0].unwrap_unchecked();\n            address = stamp.data;\n        }\n        address\n    }\n\n    unconstrained fn get_score(owner: AztecAddress) -> u8 {\n        let options = NoteViewerOptions::new().set_offset(0);\n        let notes = storage.stamps.at(owner.address).view_notes(options);\n        let mut sum = 0;\n        for i in 0..notes.len() {\n            if notes[i].is_some() {\n                let stamp = notes[i].unwrap_unchecked();\n                sum += STAMP_SCORES[stamp.stamp_type];\n            }\n        }\n        sum\n    }\n\n    // TODO: Need to nullify stamps \n    #[aztec(private)]\n    fn stamp_web2(signature: [u8; 64], msg: [Field; 2]) {\n        // Encode msg to bytes\n        // let encoded_msg = encode_msg(msg);\n        // let Pubkey { x, y } = storage.registered_signer.read();\n        // let valid_signature = dep::std::schnorr::verify_signature(x, y, signature, encoded_msg);\n        // assert(valid_signature, \"Signature could not be verified with provided data\");\n        let mut stamp = StampNote::new(\n            context.msg_sender(),\n            msg[0] as u8,\n            msg[1]\n        );        \n        storage.stamps.at(context.msg_sender()).insert(&mut stamp, false);\n        \n        emit_encrypted_log(\n            &mut context,\n            context.this_address(),\n            stamp.header.storage_slot,\n            get_public_key(context.msg_sender()),\n            stamp.serialize()\n        );\n    }\n\n    unconstrained fn encode_msg(msg: [Field; 2]) -> [u8; 33] {\n            let mut bytes: [u8; 33] = [0; 33]; \n            let data = msg[1].to_be_bytes(32);\n            bytes[0] = msg[0] as u8;\n            for i in 0..32 {\n                bytes[i + 1] = data[i];\n            }\n            bytes\n    }\n\n    #[aztec(public)]\n    internal fn initialize(signer_x: Field, signer_y: Field) {\n        storage.registered_signer.write(Pubkey {x: signer_x, y: signer_y});\n    }\n\n\n    unconstrained fn format_eth_msg(owner: Field) ->  [u8; 32] {\n        // decompose owner into 8 bit limbs in big endian\n        let owner_bytes: [u8] = owner.to_be_bytes(32);\n\n        // construct full message preimage\n        let mut bytes: [u8; 60] = [0; 60];\n        // prefix = \"\\x19Ethereum Signed Message:\\n\"\n        let prefix: [u8; 26] = [25,  69, 116, 104, 101, 114, 101, 117, 109,  32,  83, 105, 103, 110, 101, 100,  32,  77, 101, 115, 115, 97, 103, 101,  58,  10];\n        for i in 0..26 {\n            bytes[i] = prefix[i];\n        }\n\n        bytes[26] = 51;\n        bytes[27] = 50;\n        for i in 0..32 {\n            bytes[i + 28] = owner_bytes[i];\n        }\n\n        // length of message \n        bytes[26] = 51;\n        bytes[27] = 50;\n        // message\n        for i in 0..32 {\n            bytes[i + 28] = owner_bytes[i];\n        }\n\n        // return the keccak hash of message\n        dep::std::hash::keccak256(bytes, 60)\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(StampNoteMethods, note_header, preimage)\n    }\n}",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/main.nr"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash.nr"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "36": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/address.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\n#[oracle(pedersenHash)]\nfn pedersen_hash_oracle<N>(_inputs: [Field; N], _hash_index: u32) -> Field {}\n\nunconstrained fn pedersen_hash_internal<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_oracle(inputs, hash_index)\n}\n\n// TODO(Kev): We can move this into the noir std-lib \n// as an acir opcode, once we have the pedersen PR merged.\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  // Temporary hack. This is not right. Kev forced me to do this. Blame him.\n  pedersen_hash_internal(inputs, hash_index)\n  // let input_size = inputs.len();\n  // let mut modified_inputs = [];\n  // modified_inputs = modified_inputs.push_back(input_size as Field);\n  // for i in 0..N {\n  //   modified_inputs = modified_inputs.push_back(inputs[i]);\n  // }\n  // pedersen_with_separator(modified_inputs, hash_index)[0]\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/log.nr"
      },
      "41": {
        "source": "mod l1_to_l2_message;\nmod l1_to_l2_message_getter_data;\n\nuse l1_to_l2_message_getter_data::make_l1_to_l2_message_getter_data;\n\nuse crate::abi::PublicContextInputs;\nuse crate::oracle::get_l1_to_l2_message::get_l1_to_l2_message_call;\n\n\n// Returns the nullifier for the message\npub fn process_l1_to_l2_message(l1_to_l2_root: Field, storage_contract_address: Field, msg_key: Field, content: Field, secret: Field) -> Field{\n\n    let returned_message = get_l1_to_l2_message_call(msg_key);\n    let l1_to_l2_message_data = make_l1_to_l2_message_getter_data(returned_message, 0, secret);\n\n    // Check tree roots against the inputs \n    assert(l1_to_l2_message_data.root == l1_to_l2_root);\n\n    // Validate this is the target contract\n    assert(l1_to_l2_message_data.message.recipient == storage_contract_address);\n\n    // Validate the message hash is correct\n    assert(l1_to_l2_message_data.message.content == content);\n\n    // Validate the message secret is correct\n    l1_to_l2_message_data.message.validate_message_secret();\n\n    // Compute Nullifier\n    l1_to_l2_message_data.message.compute_nullifier()\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/messaging.nr"
      },
      "42": {
        "source": "use crate::constants_gen::{\n    L1_TO_L2_MESSAGE_LENGTH,\n    GENERATOR_INDEX__NULLIFIER,\n    GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\nuse crate::hash::{sha256_to_field, pedersen_hash};\n\nstruct L1ToL2Message {\n    sender: Field,\n    chainId: Field,\n    recipient: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n    secret_hash: Field,\n    deadline: u32,\n    fee: u64,\n    tree_index: Field\n}\n\nimpl L1ToL2Message {\n    pub fn deserialize(\n        fields: [Field; L1_TO_L2_MESSAGE_LENGTH],\n        secret: Field,\n        tree_index: Field\n    ) -> L1ToL2Message {\n        L1ToL2Message {\n            sender: fields[0],\n            chainId: fields[1],\n            recipient: fields[2],\n            version: fields[3],\n            content: fields[4],\n            secret: secret,\n            secret_hash: fields[5],\n            deadline: fields[6] as u32,\n            fee: fields[7] as u64,\n            tree_index: tree_index\n        }\n    }\n\n    pub fn validate_message_secret(self: Self) {\n        let recomputed_hash = pedersen_hash([self.secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET);\n        assert(self.secret_hash == recomputed_hash);\n    }\n\n    fn message_hash(self: Self) -> Field {\n        let mut hash_bytes: [u8; 256] = [0; 256];\n        let sender_bytes = self.sender.to_be_bytes(32);\n        let chainId_bytes = self.chainId.to_be_bytes(32);\n        let recipient_bytes = self.recipient.to_be_bytes(32);\n        let version_bytes = self.version.to_be_bytes(32);\n        let content_bytes = self.content.to_be_bytes(32);\n        let secret_hash_bytes = self.secret_hash.to_be_bytes(32);\n        let deadline_bytes = (self.deadline as Field).to_be_bytes(32);\n        let fee_bytes = (self.fee as Field).to_be_bytes(32);\n\n        for i in 0..32 {\n            hash_bytes[i] = sender_bytes[i];\n            hash_bytes[i + 32] = chainId_bytes[i];\n            hash_bytes[i + 64] = recipient_bytes[i];\n            hash_bytes[i + 96] = version_bytes[i];\n            hash_bytes[i + 128] = content_bytes[i];\n            hash_bytes[i + 160] = secret_hash_bytes[i];\n            hash_bytes[i + 192] = deadline_bytes[i];\n            hash_bytes[i + 224] = fee_bytes[i];\n        }\n\n        let message_hash = sha256_to_field(hash_bytes);\n        message_hash        \n    }\n\n    // The nullifier of a l1 to l2 message is the hash of the message salted with the secret and tree index\n    // docs:start:l1_to_l2_message_compute_nullifier\n    pub fn compute_nullifier(self: Self) -> Field {\n        let message_hash = self.message_hash();\n        pedersen_hash([message_hash, self.secret, self.tree_index], GENERATOR_INDEX__NULLIFIER)\n    }\n    // docs:end:l1_to_l2_message_compute_nullifier\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/messaging/l1_to_l2_message.nr"
      },
      "43": {
        "source": "use crate::messaging::l1_to_l2_message::L1ToL2Message;\nuse crate::constants_gen::{\n    L1_TO_L2_MSG_TREE_HEIGHT,\n    L1_TO_L2_MESSAGE_LENGTH,\n};\nuse crate::utils::arr_copy_slice;\n\nstruct L1ToL2MessageGetterData {\n    message: L1ToL2Message,\n    sibling_path: [Field; L1_TO_L2_MSG_TREE_HEIGHT],\n    leaf_index: Field,\n    root: Field,\n}\n\npub fn l1_to_l2_message_getter_len() -> Field {\n    L1_TO_L2_MESSAGE_LENGTH + 1 + L1_TO_L2_MSG_TREE_HEIGHT + 1\n}\n\npub fn make_l1_to_l2_message_getter_data<N>(fields: [Field; N], start: Field, secret: Field) -> L1ToL2MessageGetterData {\n    L1ToL2MessageGetterData {\n        message: L1ToL2Message::deserialize(arr_copy_slice(fields, [0; L1_TO_L2_MESSAGE_LENGTH], start), secret, fields[start + L1_TO_L2_MESSAGE_LENGTH]),\n        leaf_index: fields[start + L1_TO_L2_MESSAGE_LENGTH],\n        sibling_path: arr_copy_slice(fields, [0; L1_TO_L2_MSG_TREE_HEIGHT], L1_TO_L2_MESSAGE_LENGTH + 1),\n        root: fields[start + L1_TO_L2_MESSAGE_LENGTH + L1_TO_L2_MSG_TREE_HEIGHT + 1],\n    }\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/messaging/l1_to_l2_message_getter_data.nr"
      },
      "45": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"
      },
      "48": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/note/note_hash.nr"
      },
      "51": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{Select, Sort};\nuse crate::types::vec::BoundedVec;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(Option::none()),\n            sorts: BoundedVec::new(Option::none()),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n        }\n    }\n\n    pub fn select(&mut self, field_index: u8, value: Field) -> Self {\n        self.selects.push(Option::some(Select::new(field_index, value)));\n        *self\n    }\n\n    pub fn sort(&mut self, field_index: u8, order: u2) -> Self {\n        self.sorts.push(Option::some(Sort::new(field_index, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/note/note_viewer_options.nr"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/note/utils.nr"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"
      },
      "58": {
        "source": "\nuse crate::constants_gen::L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH;\n\n// Checks if a msg is within the l1ToL2Msg tree\n#[oracle(getL1ToL2Message)]\nfn get_l1_to_l2_msg_oracle(_msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_message_call(msg_key: Field) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_msg_oracle(msg_key)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/get_l1_to_l2_message.nr"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key.nr"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "74": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/state_vars/set.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/utils.nr"
      },
      "89": {
        "source": "use dep::aztec::{\n    context::PrivateContext,\n    log::emit_encrypted_log,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    }\n};\n\nglobal STAMP_SERIALIZED_NOTE_LEN: Field = 3;\n\nstruct StampNote {\n    owner: Field,\n    // type of stamp\n    stamp_type: u8,\n    // timestamp of when the stamp was issued\n    // timestamp: Field,\n    data: Field,\n    header: NoteHeader\n}\n\nimpl StampNote {\n    pub fn new(owner: Field, stamp_type: u8, data: Field) -> Self {\n        Self { owner, stamp_type, data, header: NoteHeader::empty() }\n    }\n\n    fn serialize(self) -> [Field; STAMP_SERIALIZED_NOTE_LEN] {\n        [\n            self.owner,\n            self.stamp_type as Field,\n            self.data,\n        ]\n    }\n\n    fn deserialize(preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> Self {\n        StampNote {\n            owner: preimage[0],\n            stamp_type: preimage[1] as u8,\n            data: preimage[2],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen(self.serialize())[0]\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let siloed_note_hash = compute_note_hash_for_read_or_nullify(StampNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        dep::std::hash::pedersen([\n            siloed_note_hash,\n            secret.low,\n            secret.high\n        ])[0]\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> StampNote {\n    StampNote::deserialize(preimage)\n}\n\nfn serialize(note: StampNote) -> [Field; STAMP_SERIALIZED_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: StampNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: StampNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: StampNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut StampNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: StampNote) {\n    note.broadcast(context, slot);\n}\n\nglobal StampNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast\n};",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/types/stamp_note.nr"
      },
      "90": {
        "source": "use dep::aztec::{\n    constants_gen::MAX_NOTES_PER_PAGE,\n    hash::sha256_to_field,\n};\nuse dep::std::option::Option;\nuse crate::types::stamp_note::StampNote;\n\nmod STAMP_ID {\n    global ETHEREUM: u8 = 0;\n    global ENS: u8 = 1;\n    global GOOGLE: u8 = 2;\n    global DISCORD: u8 = 3;\n    global GITHUB: u8 = 4;\n}\n\nmod STAMP_SCORE {\n    global ETHEREUM: u8 = 7;\n    global ENS: u8 = 12;\n    global GOOGLE: u8 = 4;\n    global DISCORD: u8 = 2;\n    global GITHUB: u8 = 15;  \n}\n\npub fn get_ens_stamp_private_content_hash(\n    secret_redemption_hash: Field,\n    name: Field,\n    timestamp: Field,\n    canceller: Field\n) -> Field {\n    // 132 = 32 * 4 + 4\n    let mut hash_bytes: [u8; 132] = [0; 132];\n    let secret_hash_bytes = secret_redemption_hash.to_be_bytes(32);\n    let name_bytes = name.to_be_bytes(32);\n    let timestamp_bytes = timestamp.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    // insert into bytes array\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = name_bytes[i];\n        hash_bytes[i + 68] = timestamp_bytes[i];\n        hash_bytes[i + 100] = canceller_bytes[i];\n    }\n\n    // ethers.id(\"stamp_ens(bytes32,bytes32,uint256,address)\").slice(0, 10)\n    hash_bytes[0] = 0x5e;\n    hash_bytes[1] = 0x8d;\n    hash_bytes[2] = 0x7e;\n    hash_bytes[3] = 0x7e;\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn filter_eth_address_stamp(notes: [Option<StampNote>; MAX_NOTES_PER_PAGE]) -> [Option<StampNote>; 1] {\n    let mut eth_stamp_ret = [Option::none(); 1];\n    for i in 0..notes.len() {\n        if notes[i].is_some() {\n            let stamp = notes[i].unwrap_unchecked();\n            if stamp.stamp_type == STAMP_ID::ETHEREUM {\n                eth_stamp_ret[0] = notes[i];\n            }\n        }\n    }\n    eth_stamp_ret\n}",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/util.nr"
      }
    }
  }
}