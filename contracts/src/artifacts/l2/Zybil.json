{
  "name": "Zybil",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdV1MTURjG8RAF7N1gF7H33Ww22bUi9o4VuxBJ7L2DCvbe8ond/7AZM9zy3px5duZMkptMfoTsnrPnLbVMJjOUGTmakpFNRnP6vP66ZdTr1vR541F/3Zk+Bl6xUKiU8hU/8Pu8fFyOQq8QlouRH/lhFPbnoyCoRIWoFJfjkhf7haDiV8M4qHojR1vDe3ljPBo/Z3bU5/TGdvhNhuZ5jpizhub5jpjHGZoXOGIeb2he6Ii52dC8yBFzi6F5sSPmVkPzEkfMbYbmpYLmdkHzMkFzh6B5uaB5haB5paB5laB5taB5jaB5raB5naB5vaB5g6B5o6B5k6B5s6DZEzT7gua8oDkQNBcEzaGguShoLgmaI0FzLGjeImjeKmjeJmjeLmjeIWjeKWjuFDTvEjR3CZp3C5r3CJr3Cpr3CZr3C5oPCJoPCpoPCZoPC5qPCJqPCpqPCZqPC5q7Bc0nBM0nBc2nBM2nBc1nBM1nBc09guZzgubzguYLguaLguZLgubLguYrguarguZeQXOfoLksaL4maO4XNFcEzVVB83VB8w1B801B8y1B821B8x1B811B8z1B831B8wNB80NB8yNB82NB8xNB81NB8zNB83NB8wtB80tB84CgeVDQ/ErQ/FrQ/EbQPCRoHhY0vxU0vxM0v3fEPMHQ/MER80RD80dHzJMMzZ8cMU82NH92xDzF0PzFEfNUQ/NXR8zTDM3fHDFPNzR/d8Q8w9D8wxHzTEPzT0fMswzNvxwxzzY0/3bEPMfQ/McR81xD819HzDlDc83QnEvfp977lT6Y9IWkTyJ9A+mjx5qQNRJrBubQzCmZYzHn4BrMNYlzNOcsfsP8T/Md5xr+noPpIz1Q6QlKj0x6RtJDkZ6C9Nij51x7MuhJ1pEMelbRw4meRvT4oecNPWDoiUKPEHpm0EOCngr0GKDmPl8iNdmpUU7NbmpYU9OZGselZFADl5qw1EilZig1NKkpSY3Fes1BatJ1JYOaZdTwoqYVNZ6oeUQNIGriUCOGminUEKGmBjUmqLnQnQxy8slRJ2ebHGZyeslx7UkGOZDkBJIjR84YOVTkFJFjQ85JbzLISSgng5h1YriJaSbGl5hXYkCJiSRGkJg5YsiIqSLGiJgbYlCIySBGgT179rDZ02WPkz0/9sDYExpIvxPuoXNPmXus3HMcTgb3pLhHwz0L1vCsaVnjseZhDcCcmDkicybmEFxTucZwzuUcxG+ylvl//AOIR7GjhHgAAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ens",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "addr",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "consumption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ethkey",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "pubkey_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "pubkey_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "// mod storage;\nmod types;\nmod util;\n\ncontract Zybil {\n    use dep::aztec::{\n        context::Context,\n        hash::compute_secret_hash,\n        selector::compute_selector,\n        types::{\n            address::{AztecAddress, EthereumAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods, FIELD_SERIALIZED_LEN\n            },\n        },\n        oracle::get_public_key::get_public_key,\n        log::emit_encrypted_log,\n        state_vars::{map::Map, public_state::PublicState, set::Set}\n    };\n    use crate::{\n        types::{\n            public_key::{ Pubkey, PubkeyMethods, PUBKEY_SERIALIZED_LEN },\n            stamp_note::{ StampNote, StampNoteMethods, STAMP_SERIALIZED_NOTE_LEN }\n        },\n        util::{\n            get_ens_stamp_private_content_hash,\n            STAMP_ID\n        },\n    };\n\n    // Largest possible signed message length\n    global MAX_MSG_LEN = 380;\n\n    mod StorageSlots {\n        global BACKEND_ID = 1;\n        global STAMP_TYPE_ID = 2;\n        global STAMPS_ID = 3;\n        global SIGNER_ID = 4;\n    }\n\n    struct Storage {\n        registered_signer: PublicState<Pubkey, PUBKEY_SERIALIZED_LEN>,\n        stamp_type: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        stamps: Map<Set<StampNote, STAMP_SERIALIZED_NOTE_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                registered_signer: PublicState::new(\n                    context,\n                    StorageSlots::SIGNER_ID,\n                    PubkeyMethods\n                ),\n                stamp_type: Map::new(\n                    context,\n                    StorageSlots::STAMP_TYPE_ID,\n                    |context, slot| PublicState::new(\n                        context,\n                        slot,\n                        FieldSerializationMethods\n                    )\n                ),\n                stamps: Map::new(\n                    context,\n                    StorageSlots::STAMPS_ID,\n                    |context, slot| Set::new(\n                        context,\n                        slot,\n                        StampNoteMethods\n                    )\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n    // fn constructor(signer_x: Field, signer_y: Field) {\n        // Set registered signer\n        // let selector = compute_selector(\"initialize(Field,Field)\");\n        // context.call_public_function(context.this_address(), selector, [signer_x, signer_y]);\n        // set the backend address based on the sender\n        // setup bridge\n        // let selector = compute_selector(\"_initialize((Field))\");\n        // context.call_public_function(context.this_address(), selector, )\n    // }\n\n    #[aztec(private)]\n    fn stamp_ens(\n        redemption_hash: Field,\n        addr: EthereumAddress,\n        timestamp: Field,\n        canceller: EthereumAddress,\n        msg_key: Field,\n        consumption_hash: Field,\n    ) {\n        // todo: constrain to make sure user has proven ownership of eth address\n        // consume L1 to L2 and emit nullifier\n        let content_hash = get_ens_stamp_private_content_hash(\n            redemption_hash,\n            addr.address,\n            timestamp,\n            canceller.address\n        );\n    }\n\n    /**\n     * Generate a stamp for an Ethereum address by proving a signature over the sender's Aztec Address\n     *\n     * @param pubkey_x: the X coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param pubkey_y: the Y coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param signature: the signature on the sender's aztec address by given pubkey\n     */\n    #[aztec(private)]\n    fn stamp_ethkey(pubkey_x: [u8; 32], pubkey_y: [u8; 32], signature: [u8; 64]) {\n        // convert msg.sender to [u8] as message to be signed\n        let message = context.msg_sender().to_be_bytes(32);\n\n        // check signature\n        let valid_signature = dep::std::ecdsa_secp256k1::verify_signature(\n            pubkey_x,\n            pubkey_y,\n            signature,\n            message\n        );\n        assert(valid_signature);\n\n        // convert pubkey to EthAddress\n        let mut pubkey: [u8; 64] = [0; 64];\n        for i in 0..32 {\n            pubkey[i] = pubkey_x[i];\n            pubkey[i + 32] = pubkey_y[i];\n        };\n        let pubkeyHash = dep::std::hash::keccak256(pubkey, 64);\n        let mut address: Field = 0;\n        let mut v: Field = 1;\n        for i in 0..20 {\n            let index = 20 - i;\n            address += pubkeyHash[index + 11] as Field * v;\n            v *= 256;\n        }\n\n        // create stamp\n        // let mut stamp = StampNote::new(\n        //     context.msg_sender(),\n        //     STAMP_ID::ETHEREUM,\n        //     0, // does not expire\n        //     [address, 0, 0]\n        // );\n        // storage.stamps.at(context.msg_sender()).insert(&mut stamp);\n\n        // // emit encrypted log of stamp creation\n        // emit_encrypted_log(\n        //     &mut context,\n        //     context.this_address(),\n        //     stamp.header.storage_slot,\n        //     get_public_key(context.msg_sender()),\n        //     stamp.serialize()\n        // );\n    }\n\n    // #[aztec(private)]\n    // fn stamp_web2() {\n        \n    // }\n\n    // #[aztec(public)]\n    // internal fn initialize(signer_x: Field, signer_y: Field) {\n    //     storage.registered_signer.write(Pubkey {x: signer_x, y: signer_y});\n    // }\n\n    // #[aztec(public)]\n    // internal fn valid_signature(signature: [u8; 64], msg: [u8; MAX_MSG_LEN]) -> bool {\n    //     let Pubkey { x, y } = storage.registered_signer.read();\n    //     dep::std::schnorr::verify_signature(x, y, signature, msg)\n    // }\n\n    // unconstrained fn registered_signer() -> Pubkey {\n    //     storage.registered_signer.read()\n    // }\n}\n",
        "path": "/home/jpag/Workground/aztec/zybil/contracts/l2/src/main"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/abi"
      },
      "90": {
        "source": "use dep::aztec::hash::sha256_to_field;\n\nmod STAMP_ID {\n    global ETHEREUM: u8 = 1;\n    global ENS: u8 = 2;\n    global GOOGLE: u8 = 3;\n    global DISCORD: u8 = 4;\n    global GITHUB: u8 = 5;\n}\n\npub fn get_ens_stamp_private_content_hash(\n    secret_redemption_hash: Field,\n    name: Field,\n    timestamp: Field,\n    canceller: Field\n) -> Field {\n    // 132 = 32 * 4 + 4\n    let mut hash_bytes: [u8; 132] = [0; 132];\n    let secret_hash_bytes = secret_redemption_hash.to_be_bytes(32);\n    let name_bytes = name.to_be_bytes(32);\n    let timestamp_bytes = timestamp.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    // insert into bytes array\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = name_bytes[i];\n        hash_bytes[i + 68] = timestamp_bytes[i];\n        hash_bytes[i + 100] = canceller_bytes[i];\n    }\n\n    // ethers.id(\"stamp_ens(bytes32,bytes32,uint256,address)\").slice(0, 10)\n    hash_bytes[0] = 0x5e;\n    hash_bytes[1] = 0x8d;\n    hash_bytes[2] = 0x7e;\n    hash_bytes[3] = 0x7e;\n\n    sha256_to_field(hash_bytes)\n}",
        "path": "/home/jpag/Workground/aztec/zybil/contracts/l2/src/util"
      }
    }
  }
}