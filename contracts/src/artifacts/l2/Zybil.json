{
  "name": "Zybil",
  "functions": [
    {
      "name": "compute_keccak_256",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+2de5RdVX3Hc5iQk53NI7zfkNRaa611Zk9IoIqMIlWkilSRKlKFgNZaSS1SsdaqtdRXrbWWWotWkCpSRSpIFagCVcSQhASSEJLJY3iFUO3//cvV8zt3f8nXvfbsySz3j7uy8ttrnTV7nzN7fz6/3+/cc++d+5jFc+bMaeYM2gj1uWHfRPw5+su1sabeWqMNOS6K/f1iLHO7bf9um9dtbbfN7zbXbQu6zXfbAd12YLcd1G0Hd9vCbjuk2w7ttsO67fBuO6Lbjuy2o7rt6G47ptuO7bbjuu34bjuh207stpMif3G3XecGHi66cJtH/YlKOZhXv0aj+5OrI2fEc1A8Pq8uN7hYM27pOTmRySdqXNFlVFzmx7X2J46ry+lvD/OT+OYnuffk0Cq6+AxbgRNcErO0Up0d/VwQ+/PJz1fOQ0McrIuxp59waBVdfIatwAkuiVlaqSbgy7wDYn8B+R1YOQ8NcbAuxgeSExxaRRefYStwgktillaqCfgy76DYP4D8Dq6ch4Y4WBdjsDhXraKLz7AVOMElMUsr1YRdFtZ16e+jDolrHUScQyvntiEO1sUYLM7/QkUXn2ErcIJLYpZWqjP4Mu+w2D+E/A6vnIeGOFgXY7A4VwsVXXyGrcAJLolZWqkm4Mu8I2L/MPI7snIeGuJgXYzB4lwtVHTxGbYCJ7gkZmmlmoAv846K/SPI7+jKeWiIg3UxBotz1Sq6+AxbgRNcErO0Uk3Al3nHxP5R5Hds5Tw0xMG6GIPFuWoVXXyGrcAJLolZWqkm4Mu842L/GPI7vnIeGuJgXYzB4ly1ii4+w1bgBJfELK1UE/Bl3gmxfxz5nVg5Dw1xsC7GYHGuWkUXn2ErcIJLYpZWqgn4Mu+k2D+B/BZVzkNDHKyLMVicq1bRxWfYCpzAuUUr1WRR/CnzFsf+SeT3K5Xz0BAH62IMFueqVXTxGbYCJ7gkZmmlmoAv854T+4vJ71cr56EhDtbFGCzOVavo4jNsBU5wSczSSjUBX+Y9N/afQ36/VjkPDXGwLsZgca5aRRefYStwgktillaqCfgy73mx/1zy+/XKeWiIg3UxBotz1Sq6+AxbgRNcErO0Uk3Al3nPj/3nkd9vVM5DQxysizFYnKtW0cVn2Aqc4JKYpZVqAr7Me0HsP5/8frNyHhriYF2MweJctYouPsNW4ASXxCytVBPwZd4LY/8F5PdblfPQEAfrYgwW56pVdPEZtgInuCRmaaWasMtoXZcl4vKiWbiMkstYXZd+6UAseIHj6TifB6GuR39OjiXxY8x+5rpvuzra98Ihu/C160V6Lkt8hq3ACS6JWVrpusQ1GY/9MfJbUtevr8l44oIxWJyrVtHFZ9gKnOCSmKWVasIuS6u6jPevW588C5el5LKsqsvgfusUYsELHE/H+Tw4pa5Hf04uS+LHmP3M1VzN1VzN1VzN1VzN1VzN1VzN1VzN1VzN1VzN1VzN1VzN1VzN1VzN1VzN1VzNtb6ro33jQ3bh95KcrOYyPuozbIWYg0tillZ6nwjX5NTYX0Z+v13Xr6/JqYkLxmBxrlpFF59hK3CCS2KWVqoJu7ykqkvo30f04lm4vIRcTqvqMngf0UuJBS9wPB3n8+CldT36c/K0JH6M2c9czdVczdVczdVczdVczdVczdVczdVczdVczdVczXVvcXW079Qhu/Df4l+s5hL612FStkLMwSUxSyv9nZ1rcnrsn0Z+E3X9+pqcnricnjA4V62ii8+wFTiBc4tWqgm7vLyuS/89JC+bhcvLyeWMui796zCvIBa8wPF0nM+DV9T16M/JM5L4MWY/c923XR3tO33ILnztepmeS/89JClbgRNcErO00nWJa3Jm7J9Bfr9T16+vyZmJC8Zgca5aRRefYStwgktillaqCbu8qqrLWP/+gVfOwuVV5HJWVZfB/dariQUvcDwd5/Pg1XU9+nPyrCR+jNnPXM3VXM3VXM3VXM3VXPdtV0f7zhyyCz+XeaWay1j/99eUrRBzcEnM0krPU7gmZ8f+WeT3u3X9+pqcnbhgDBbnqlV08Rm2Aie4JGZppZqwy2urugyex75mFi6vJZdzqroMnse+jljwAsfTcT4PXlfXoz8nz0nix5j9zNVczdVczdVczdVczXXfdnW07+whu/BzmdeouQyex6ZshZiDS2KWVnqewjU5N/bPIb/fq+vX1+TcxAVjsDhXraKLz7AVOMElMUsr1YRd3qDg8vpZuLyBXM6r6zIqa7yRWPACx9NxPg/eWNejPyfPS+LHmP32FldH+84dsgvfxl6v5xJ8hq3BcUnM0kq3H67J+bF/Hvn9fl2/vibnJy4Yg8W5ahVdfIatwAkuiVlaqSbs8mYFlzfNwuXN5HJBXZf++voWYsELHE/H+Tx4S12P/py8IIkfY/bbW1wd7Tt/yC58G3uTnkt/fU3ZGhyXxCytdPvhmlwY+xeQ3x/U9etrcmHigjFYnKtW0cVn2Aqc4JKYpZVqAr7Me2vsX0h+b6uch4Y4WBdjsDhXraKLz7AVOIFzi1aqydviT5l3Uey/lfwurpyHhjhYF2OwOFetoovPsBU4wSUxSyvVBHyZtzz2LyK/SyrnoSEO1sUYLM5Vq+jiM2wFTnBJzNJKNQFf5l0a+8vJ7+2V89AQB+tiDBbnqlV08Rm2Aie4JGZppZqAL/PeEfuXkt8fVs5DQxysizFYnKtW0cVn2Aqc4JKYpZVqAr7Me2fsv4P8/qhyHhriYF2MweJctYouPsNW4ASXxCytVBPwZd67Yv+d5PfHlfPQEAfrYgwW56pVdPEZtgInuCRmaaWagC/z3h377yK/yyrnoSEO1sUYLM5Vq+jiM2wFTnBJzNJKNQFf5q2I/XeT359UzkNDHKyLMVicq1bRxWfYCpzgkpillWoCvsx7T+yvIL8/rZyHhjhYF2OwOFetoovPsBU4wSUxSyvVBHyZd3nsv4f83ls5Dw1xsC7GYHGuWkUXn2ErcIJLYpZWqgn4Mu+K2L+c/P6sch4a4mBdjMHiXLWKLj7DVuAEl8QsrVQT8GXe+2L/CvK7snIeGuJgXYzB4ly1ii4+w1bgBJfELK1UE/Bl3vtj/33k9+eV89AQB+tiDBbnaqGii8+wFTjBJTFLK9UEfJn3gdh/P/n9ReU8NMTBuhiDxblaqOjiM2wFTnBJzNJKNQFf5n0w9j9Afn9ZOQ8NcbAuxmBxrhYquvgMW4ETXBKztFJNwJd5H4r9D5LfhyvnoSEO1sUYLM5Vq+jiM2wFTuDcopVq8uH4U+Z9JPY/RH5/VTkPDXGwLsZgca5aRRefYStwgktillaqCfgy76Ox/xHy++vKeWiIg3UxBotz1Sq6+AxbgRNcErO0Uk3Al3lXxf5Hye9vKuehIQ7WxRgszlWr6OIzbAVOcEnM0ko1AV/mfSz2ryK/j1fOQ0McrIsxWJyrVtHFZ9gKnOCSmKWVagK+zPtE7H+M/D5ZOQ8NcbAuxmBxrlpFF59hK3CCS2KWVqoJ+DLvU7H/CfL728p5aIiDdTEGi3PVKrr4DFuBE1wSs7RSTcCXeZ+O/U+R399VzkNDHKyLMVicq1bRxWfYCpzgkpillWoCvsz7TOx/mvz+vnIeGuJgXYzB4ly1ii4+w1bgBJfELK1UE/Bl3mdj/zPk9w+V89AQB+tiDBbnqlV08Rm2Aie4JGZppZqAL/M+F/ufJb9/rJyHhjhYF2OwOFetoovPsBU4wSUxSyvVBHyZd3Xsf478/qlyHhriYF2MweJctYouPsNW4ASXxCytVBPwZd7nY/9q8vvnynloiIN1MQaLc9UquvgMW4ETXBKztFJNwJd5X4j9z5Pfv1TOQ0McrIsxWJyrVtHFZ9gKnOCSmKWVagK+zLsm9r9Afl+snIeGOFgXY7A4V62ii8+wFTjBJTFLK9UEfJn3pdi/hvz+tXIeGuJgXYzB4ly1ii4+w1bgBJfELK1UE3a5tq5L/38YvjwLl2vJ5bq6Lv3n+75CLHiB4+k4nwdfqevRn5PXJfFjzH7mum+7Otr3pSG78LXry3ou/f9hSNkKnOCSmKWVrktck+tj/zry+7e6fn1Nrk9cMAaLc9UquvgMW4ETXBKztFJN2OVrVV1C//2VX52Fy9fI5YaqLoP7ra8TC17geDrO58HX63r05+QNSfwYs5+5mqu5mqu5mqu5mqu5mqu5mqu5mqu5mqu5mqu5muve4upo3/VDduG/xX9VzSX037+eshViDi6JWVrp7+xckxtj/wby+/e6fn1NbkxcMAaLc9UquvgMW4ETXBKztFJN2OWbVV0Gr8N8YxYu3ySXm6q6DF6H+Rax4AWOp+N8Hnyrrkd/Tt6UxI8x+5mruZqruZqruZqruZqruZqruZqruZqruZqruZqrue4tro723ThkF/5b/DfUXAavw6RshZiDS2KWVvo7O9fk5ti/ifz+o65fX5ObExeMweJctYouPsNW4ASXxCytVBN2uaWqy1j/Osy3Z+FyC7ncWtVl8DrMd4gFL3A8Hefz4Dt1Pfpz8tYkfozZz1zN1VzN1VzN1VzN1Vz3bVdH+24esgs/l/m2mstY/zw2ZSvEHFwSs7TS8xSuyW2xfyv5/Wddv74mtyUuGIPFuWoVXXyGrcAJLolZWqkm7PK9qi6D57HfnYXL98jl9qoug+exdxALXuB4Os7nwR11Pfpz8vYkfozZz1zN1VzN1VzN1VzN1Vz3bVdH+24bsgs/l/mumsvgeWzKVog5uCRmaaXnKVyTO2P/dvL7r7p+fU3uTFwwBotz1Sq6+AxbgRNcErO0Uk3Y5QdVXQbPY78/C5cfkMtdVV0Gz2PvJha8wPF0nM+Du+t69OfkXUn8GN9N+83VXM3VXM3VXM3VXM1133Z1tO/OIbvwc5nvq7kMnsembIWYA+cWrfQ85e74U+bdE/t3kd9/1/Xra3JP4oIxWJyrVtHFZ9gKnOCSmKWVasIuP6rr0v9/mB/OwuVH5HJvXZf+eeyPiQUvcDwd5/Pgx3U9+nPy3iR+jNnPXPdtV0f77hmyC1+7fqjn0v9/mJStwAkuiVla6brENbkv9u8lv5/U9etrcl/igjFYnKtW0cVn2Aqc4JKYpZVqwi7313Xp77dWzsLlfnJZVdelv99aTSx4gePpOJ8Hq+t69OfkqiR+jNnPXPdtV0f77huyC1+7Vuq59PdbKVuBE1wSs7TSdYlrsib2V5HfA3X9+pqsSVwwBotz1Sq6+AxbgRNcErO0Uk3YZZ2Cy9pZuKwjlwfruvT3Ww8RC17geDrO58FDdT36c/LBJH6M2W9vcXW0b82QXfg2tlbPJfgMW4PjkpillW4/XJP1sf8g+W2o69fXZH3igjFYnKtW0cVn2Aqc4JKYpZVqAr7M2xj768nv4cp5aIiDdTEGi3PVKrr4DFuBE1wSs7RSTcCXeZtifyP5PVI5Dw1xsC7GYHGuWkUXn2ErcIJLYpZWqgn4Mm9z7G8ivy2V89AQB+tiDBbnqlV08Rm2Aie4JGZppZqAL/MmY38z+W2tnIeGOFgXY7A4V62ii8+wFTjBJTFLK9UEfJm3LfYnyW975Tw0xMG6GIPFuWoVXXyGrcAJLolZWqkm4Mu8HbG/jfymKuehIQ7WxRgszlWr6OIzbAVO4NyilWoyFX/KvEdjfwf5PVY5Dw1xsC7GYHGuWkUXn2HPo31VOGOjo/XdB/+D4/HEXfY9mdn3xJxfbKXz4UmatzP296Pc7Koax+iouDxN608Q40na/z91uWPMbeIGBvaPUP+qdvfv4vfmdtvPKU+P0no/pdz9nObw7zxFfV4Hc9M+6oj8eDrOa+2cwW8ezZuIP0d/udbncxe5TtD4p+RzZbvbYWddh8A5nRvXxTm0Uy/2UT4ncA6ndZH9P1PIObg4h8HA/hHqX4OLKf2eNJxXcF5A+cLvyfUgd7vUiGkXxTRB45/R/ul+h28vuRh3UYxPZ36vlBdPx5/eQw7P4XNQI28c+wSNwZLbxMfp9vd0XYfA5wha6b6Gr/tPVXUZX873X3viwrfT2tcHhfuv/u/0fN6l9x183vG1aRjnnbmaq7maq7maq7maq7maq7maq7maq7maq7maq7maq7maq7maq7maq7maq7maq7maq7maq7maq7maq7nquDrat2vILp4cdqq5jC/3GbbG+z8ltyNxLawt78X94vzdzJ1VmWMX8Xvh58V1R5KcjtDvzHW7va6NXgvoOJ8TtV1lzcfq1nZc1pyqu+Zy/owU2p58tkpcKn/2bpQ/b4j6bs9wNT57uo1ib4iB/SPUv2X+nGfa1t3dZ84rOMu5tiPze9x/NJnj6fgO5Zi3k8cEjcGS280NFOuOjPdO8sbxx8h7qqr32MXziFNnzfEga26ru2Z/u+L8Sivdrvi8n6zqMrhd8WfLJ4jB3M11uWPMxe0q/az7CPXvpXONP6uOcw3Ocrvamvk97m9P5ng6vlU55uk+xw6W3K7umOYakl7vctcD/owy34dpXhex7rbEmR/XbFdzGTyuSdn1b7eDxzVz41pYW8br1B7XhNHc4xo45B7XbJ+/22vDs/q4Zny5rPlE5fj5M75opWvlExTf45XjO2DO4POtTyX5h9+i+FOcH0uOuTm7P1eMY/LRtOlqU/fx4dhy/pws1p2b+PDjPfyuzJsiL573OO3X+H4JXNP2TzzAGqHfeSqe6wfGMV+bcE7Amx978X1c7evSbL8vgq9dlb/jZZTvX1HHLRmuxnccbabYG2Jg/wj1/4/u+x7Z3X3mNgJnqeFk5ve4vy2Z4+n4pHLMW8hjgsZgybn4vxTrZMb7UfLGcb6fR934ulH58eEYP9/BulsTZ76f13usOrifT9nPVsxzEy4/FuDnROtmuM+t+l0b3d8S+L4GrXSN4e9EmKrqMvjcb93nX2Onyhr8XAmxwt3TcX5OrHF/NDXnF3OKsd53Di05WdbYNkP8ue8+qvzYtxj/NjXusiWyxtYZ4t+a8dB4vjM1Tfx63wO29BRZY3KG+HPfR6ZxTZyaJn69a/HS/vzfMkP8WzIeGt8LODVN/HrfzbcsyBqbZ4g/9x2BGn+7mJom/un+zlJynRyya33usv5cfWSG+B/JeGg8/pyaJn697/ZceomssWmG+HPfMbqpqkc5/k1q3NB/R8nDM8T/cMZD47t+p6aJX+/7dk8elzU2zhB/7nt/N1b1KMe/UY27tH+sumGG+DdkPDS+f3tqmvj1vgN76TJZY/0M8ee+i3t9VY9y/OvVuEsvlTUemiH+hzIeGt+JPzVN/NP9L4GS6+SQXetzl/bPKx6cIf7cd/lX/v8TxfjZb09dNw3ZtT53Sf+4Yt0M8a/LeFT+vyXF+NlvT10nh+xan7usfwywdob412Y81lb1KMfPfnuLa33u0jFZ44EZ4n8g46Hx/5impomf/fbUdcNe5Do5ZNf63PGLZI01M8Sf+59Xa6p6lONfo8ft4189Q/yrMx6rn8X42W8q44r3TvJ3406puQ5eK2UPaaXXMVaTy/1VXQavla6k9SeIwVyN/6e6kmJviIH9I9S/2u3Ox092d5953QnOUsNVmd/j/lQyx9PxVcox308eEzQGS15X+yTFuirjPULeOM7vpV6l4L068R5J/BzFwq8BrlRwmS6HKykvu5Kc1XcZvEabsvn94MgZvx88vZ1XTUwKWBR/7helRGT/mAx5Q878KLwgJk3e9CNvKjmo2w7utoXddki3Hdpth3Xb4d12RLcd2W1HddvR3XZMtx3bbcd12/HddkK3ndhtJ0X+YnJit50xIYfF8VmXXXLplYtWXPHeRSvevujiFVdcdsnl/w901fwlnKwBAA==",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signer",
          "type": {
            "kind": "struct",
            "path": "types::public_key::Pubkey",
            "fields": [
              {
                "name": "x",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "y",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "encode_msg",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "msg",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 33,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        }
      ],
      "bytecode": "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Ij+Pe79+6BqPEMu+D8jcj743eb0nPtY19Igfd8r/0R+T/6MVj+V4DoVruIZruIZruIZruIZruIZruIZruIZruIZruIZruG5LromObV5mF75Pwe/7krwgFbbH7/Z1b1eXtfh70CPWbWF2vd9gPk/fqdxPOS2SA1ir6THPWLfF66jS1+9/cL/M5vKT77fhe2nw3RHOrS3z7zfzPe7xGOa2vsdjkXL9Djna+zx03rfn6nv0XTp+j4Mv9m6N8QBrNT3mhFKPHcsY95VpfI8er8E143vh7u6aw+y7M/bAfnIsUp/vObuzq8vs+0O+P3aRGMy9oy93gbn47t3er7ua+qev27IffL8tniNw1hreVXkc979l5vD9r3c55/xY9+KCpa8hJ1Oud1W87yVvnOfXE9RtM+XicV/xY93DyvcVbzbu/V3yVvewOt5XXM15teHy+xUey+9X9nneTQ5vIgpYResfVH6uLiJryubom8y6IqxPGt3EHeZmL5QbxrZxbDuNbeex7TK2Xce229h2H9seY9tzbHuNbe+x7TO2fce239j2H9sBYztwbJsK/+CxHULJ8yYcXzZm1zI+8byzz7lo0/kXXrDp/HM3nXX+heed/eofAlhYjM8EdQEA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_content_hash",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "name",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_eth_address",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "field"
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "get_score",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "integer",
          "sign": "unsigned",
          "width": 120
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "signer_x",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "signer_y",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "note_hash_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ens",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "name",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "consumption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ethkey",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "pubkey_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "pubkey_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_web2",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "msg",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "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4rw0KtdPnMNG5fqJ892gXGfNjXa51txol2vNjXa51txol2vNjXa51txol2vNjXa51txol2vNjXa51txolusnfl/lsFxrbrTLteZGu1xrbrTLteZGu1xrbrTLteZGu1xrbrTLteZGu1xrbjTL9RO/H3ZYrjU32uVac6NdrjU32uVac6NdrjU32uVac6NdrjU32uVac6NdrjU3muX6id/HPCzXmhvtcq250S7Xmhvtcq250S7Xmhvtcq250S7Xmhvtcq250S7XmhuNch22J37/+bBca260y7XmRrtca260y7XmRrtca260y7XmRrtca260y7XmRrtca240y7XT3GiXa82NdrnW3GiXa82NdrnW3GiXa82NdrnW3GiXa82NdrnW3GiXa82NZrn2mhvtcq250S7Xmhvtcq250S7Xmhvtcq250S7Xmhvtcq250S7Xmhvtcq250SzXQXOjXa41N9rlWnOjXa41N9rlWnOjXa41N9rlWnOjXa41N9rlWnOjXa41N5rlOmputMu15ka7XGtutMu15ka7XGtutMu15ka7XGtutMu15ka7XGtutMu15kazXCfNjXa51txol2vNjXa51txol2vNjXa51txol2vNjXa51txol2vNjXa51txoluusudEu15ob7XKtudEu15ob7XKtudEu15ob7XL9wLkxx9ejufwi16+cPHC+u83JA+ew25wsMy/t7xcNv8jJx4uWZYaVuxddZlK4e9Fltul3L7rMHvnuRZfZoN696DK7w7sXXWZrdveiy+y37l50mU3U3Ys+ZWdUn7Izqk/ZGdWn7IzqU3ZG9Sk7o/qUnVF9ys6oPmVnVJ+yM6pP2RntT9kZ7U/ZGe1P2RntT9kZ7U/ZGe1P2RntT9kZrfOd9ncv+pSd0Trf5v79i7p1vkr97kUfsjNy63yJ+N2LPmRn5LaH7IzcOt9dffeiD9kZuXW+tfnuRR+yM3LrfF/xzYuu82XBdy/6lJ3ROl+Te/eiT9kZrfMFsXcv+pSd0TpfjXr3ok/ZGa3zpaB3L/qUndE6X4d596JP2Rmt80WQdy/6lJ3ROl+BePeiT9kZrfPlf3cv+pSd0Tpfe3f3ok/ZGa3zhW93L/qUndE6X3V296JP2Rmt8yVfdy/6lJ3ROl9vdfeiT9kZrfPFTncv+pSd0TpfaXT3ok/ZGa3zZT53L/qUndE6X2Nz96JP2Rmt8wUudy/6lJ3ROl9dcveiT9kZrfOlHXcv+pSd0TpfV3H3ok/ZGa3zRQ13L/qUndE6X1Fw96JP2Rktczl/LfEVcfBfX/QiiJReAW+f8bryzskqm6iOOVnmsvueOVlla9YzJ6vs4vb8+oP3f/z/p8a5zM3tty+6yi7u9kVX2cXtMX3/oqvs4m5fdJVd3O2LrrKLc5t/vanb4tWGdZkbu+9fdZk7u3/Fq66ylXLbFm5edZUd0q941VX2SL/iVdG7pPTa37uU9+8f9i6//+DPR+P7PdGbpI7vid4jdXxP9Bap43uid0gd3xO9Per3nuxbuzu+J3pj1PE90buiju+J3hJ1fM+H7IfYF3Z3fM+H7IfY13V3fM+H7IfYl3X3e0/2Xd0d3/Mh+yH2Td0d3/Mh+yH2Pd0d3/Mh+yH2Ld1f3rP4rw+/op9ll3MVvW+/YMZX9/oXEr6m7fvondtf8fj6GU56h9Pcqv+5cOL73DqHq3CaO2rfcJob3z8Zzvug/uuh/mc4zf2pbzjNbaRvOM19oW84zUNK33CaZ4mu4bRfm9E3HOOufBeOdVe+Cce6K9+Ew+rK7Zcu9A2H1ZXbLzDoGw6rK7dfBtA1nHay3zccVldu5+99w2F15XZK3jccVlduZ9l9w2F15Xbi3DWca7bqts/Zfts/fy68Z/trSvcrfu5yFbj/ueu/xu/rK2sh5M9EfP7U5S/q7U9dvtvtT13+Y3/3U9d/d/Q+H9d/jy1ur8OeGD+Pb95/+81f/62w25+6fLPbn7r8vbv9qctfjxDL+6du4MvxwOvR9PkBLr8/4PIfwI4fcP03Xnp+wOWv7D/zAel1UBZzvfqAy8W/5wdc/jJ3+YC///3/AGsBTMw=",
      "eJztnd1uGzkMRt9lroOApP7zKou9CHZboECRFpvcBX73uthYE0wEEaYVsiPMVVNAik8+M4dDj628Lt9//PP48u3H0/Py8Lq45eGv1+X55+PT7/89vzz+97I8wN3y5enf87+nu+Xrt+9flgc83X1Yhc6F8rby/HXGutqF1nJP4C/LPUVuuYtUV4NfF5fT33eL3yd22Cd23Cd22id23id22Sc2wk65cafctFPunXZK3GmrxJ32Stxps8SddkvcabtEzX55XlNJXMm3cFOzX1Kkyx5KEBn65EOlT3H9WV3+7NSp2TU/lX5k9s3eeSV9gUqfCd/T/36EZpe78hFS6j1Csx9d9wjZ1ZBcIWKfgbDWj89pC9RsNJ8KFPNaEgnCFqjZQSyBmq3BEqjpfEugpswNgdwAS48FGiDesUADXDoWaIB6xwLpm5oB0jd1cmEFCrQF0jc1A6RvagZI39QMkL6p+0Be39QMkL6pGSB9UzNA+qZmgPRNzQAZmDrHCpTBbYEMTN0HMjB1H8jA1H0gA1N3gYKBqftABqbuAxmYug9kYOo+kIGp+0Dqpg4E9RWoQLh9OSaom5oDUjc1B6Ruag5I3dQMUFQ3NQekbmoOSN3UHJC6qTkgdVNzQAamDnEFSn4LZGDqPpCBqftABqbuAxmYuguUDEzdBzIwdR/IwNR9IANT94EMTN0H0je1o7V1OJe3QPqmZoD0Tc0A6ZuaAdI3dR8o65uaAdI3NQOkb2oGSN/UDJC+qRkgdVNHivUWZ3RQtkDqpo6O0gqUt70sq5s6esQK5D/cWsjqpo45rgkV+pCQuqlj8bQCle2gWNRNnQDr3aAEaftbVtRNnaDUC7SEZfsetKJu6kRQ37CZKG/f2VDUTZ0crU+Zc7G/PDr3tjiG9dmNraXB4YUjnK+T1+8r+ESJeru4MpV0+d7x3S9hMxWEsr61BQGpn4sHvCjHQyo3haje4j4vRMT1XgaSc/1cSqZL1ZZcbgtRvS3PGKL6pcSMIapf/swYovol24QhIuhfZ86Yov7F8Ywp6l/Rz5jinz6G7CPFicYWwxSPuWVEisfgMiLFY3IZkeIxuoxI8ZhdBqTYPvXlSPHKFGeaXVzN5fx1YIIpzl0+U148wG0pzjS72KU40+xil+JMs4tdijPNLnYpzjS72KU40+xil+JMs4tdijPNLmYpjjiB60hxxElgR4ojTiQ7Uhxx6tqRov7JclOmeMwuI1I8ZpcRKc40u6RST6HEnG4M5g8fR0K6fOoieccE0/1J3X2zBBDWIz2hfPjjEJJNQbIpSjYlyaYs2VQkmxBEu1C0i0S7RFWBorJAUV2gqDBQVBkoKg0U1QaJaoNEtUF032yiWA8wfn9GQvD/Hy583zRjrB8pSvRO1PS2p/myBLOnfQeR29QcOnubiqjWi6jWi6jWi6jWi6jWi0yDQg/KRAgyE4JMhSBzIchkCDIbgkyHIPMhyIQIsiqRtktZlQgbprBjClumsGcKm6awawrbpqxvoqxxoqxzIsmqhGRVQrIqIVmVkKxKSFYlJKiS0+kXVZUeQg==",
      "",
      "",
      "",
      "",
      "",
      "",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\nmod util;\n\ncontract Zybil {\n    use dep::aztec::{\n        constants_gen::{MAX_NOTES_PER_PAGE},\n        context::Context,\n        hash::compute_secret_hash,\n        note::{\n            note_viewer_options::NoteViewerOptions,\n            note_header::NoteHeader,\n            utils as note_utils\n        },\n        selector::compute_selector,\n        types::{\n            address::{AztecAddress, EthereumAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods, FIELD_SERIALIZED_LEN\n            },\n        },\n        oracle::get_public_key::get_public_key,\n        log::emit_encrypted_log,\n        state_vars::{map::Map, public_state::PublicState, set::Set}\n    };\n    use crate::{\n        types::{\n            public_key::{ Pubkey, PubkeyMethods, PUBKEY_SERIALIZED_LEN },\n            stamp_note::{ StampNote, StampNoteMethods, STAMP_SERIALIZED_NOTE_LEN }\n        },\n        util::{\n            get_ens_stamp_private_content_hash,\n            filter_eth_address_stamp,\n            STAMP_ID\n        },\n    };\n    use dep::std::option::Option;\n\n    global STAMP_SCORES = [7, 12, 4, 2, 15];\n\n    mod StorageSlots {\n        global BACKEND_ID = 1;\n        global STAMP_TYPE_ID = 2;\n        global STAMPS_ID = 3;\n        global SIGNER_ID = 4;\n    }\n\n    struct Storage {\n        registered_signer: PublicState<Pubkey, PUBKEY_SERIALIZED_LEN>,\n        stamp_type: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        stamps: Map<Set<StampNote, STAMP_SERIALIZED_NOTE_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                registered_signer: PublicState::new(\n                    context,\n                    StorageSlots::SIGNER_ID,\n                    PubkeyMethods\n                ),\n                stamp_type: Map::new(\n                    context,\n                    StorageSlots::STAMP_TYPE_ID,\n                    |context, slot| PublicState::new(\n                        context,\n                        slot,\n                        FieldSerializationMethods\n                    )\n                ),\n                stamps: Map::new(\n                    context,\n                    StorageSlots::STAMPS_ID,\n                    |context, slot| Set::new(\n                        context,\n                        slot,\n                        StampNoteMethods\n                    )\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(signer: Pubkey) {\n        // Set registered signer\n        let selector = compute_selector(\"initialize(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [signer.x, signer.y]);\n        // set the backend address based on the sender\n        // setup bridge\n        // let selector = compute_selector(\"_initialize((Field))\");\n        // context.call_public_function(context.this_address(), selector, )\n    }\n\n    #[aztec(private)]\n    fn stamp_ens(\n        redemption_hash: Field,\n        name: Field,\n        timestamp: Field,\n        msg_key: Field,\n        consumption_hash: Field,\n    ) {\n        // Retrieve Eth Address from stamps. Use as canceller, will fail if wrong eth address stamped/ provided\n        let address = get_eth_address(context.msg_sender());\n\n        // consume L1 to L2 and emit nullifier\n        let content_hash = get_ens_stamp_private_content_hash(\n            redemption_hash,\n            name,\n            timestamp,\n            address\n        );\n\n        // https://docs.aztec.network/dev_docs/tutorials/token_portal/minting_on_aztec#private-flow\n        // CONSUME L1 MESSAGE TO L2\n        // What is msg key?\n        // Is the secret the redemption? Harcoding to zero for now\n        // context.consume_l1_to_l2_message(msg_key, content_hash, 0);\n        // CREATE NEW ENS STAMP AND STORE IN SET\n        \n        let mut stamp = StampNote::new(\n            context.msg_sender(),\n            STAMP_ID::ENS,\n            name\n        );      \n        // EMIT ENCRYPTED LOG OF STAMP CREATION\n        emit_encrypted_log(\n            &mut context,\n            context.this_address(),\n            stamp.header.storage_slot,\n            get_public_key(context.msg_sender()),\n            stamp.serialize()\n        );\n    }\n\n    unconstrained fn get_content_hash(\n        owner: Field,\n        redemption_hash: Field,\n        name: Field,\n        timestamp: Field,\n        address: Field,\n    ) -> Field {\n        // Retrieve Eth Address from stamps. Use as canceller, will fail if wrong eth address stamped/ provided\n        // let address = get_eth_address(owner);\n\n        // consume L1 to L2 and emit nullifier\n        let content_hash = get_ens_stamp_private_content_hash(\n            redemption_hash,\n            name,\n            timestamp,\n            address\n        );\n\n        content_hash\n    }\n\n    /**\n     * Generate a stamp for an Ethereum address by proving a signature over the sender's Aztec Address\n     *\n     * @param pubkey_x: the X coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param pubkey_y: the Y coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param signature: the signature on the sender's aztec address by given pubkey\n     */\n    #[aztec(private)]\n    fn stamp_ethkey(pubkey_x: [u8; 32], pubkey_y: [u8; 32], signature: [u8; 64]) {\n        // convert msg.sender to [u8] as message to be signed\n        // let message = context.msg_sender().to_be_bytes(32);\n        let message = dep::std::hash::keccak256(context.msg_sender().to_be_bytes(32), 32);\n        // check signature\n        let valid_signature = dep::std::ecdsa_secp256k1::verify_signature(\n            pubkey_x,\n            pubkey_y,\n            signature,\n            message\n        );\n        assert(valid_signature);\n\n        // convert pubkey to EthAddress\n        let mut pubkey: [u8; 64] = [0; 64];\n        for i in 0..32 {\n            pubkey[i] = pubkey_x[i];\n            pubkey[i + 32] = pubkey_y[i];\n        };\n        let pubkeyHash = dep::std::hash::keccak256(pubkey, 64);\n        let mut address: Field = 0;\n        let mut v: Field = 1;\n        for i in 0..20 {\n            let index = 20 - i;\n            address += pubkeyHash[index + 11] as Field * v;\n            v *= 256;\n        }\n\n        // create stamp\n        let mut stamp = StampNote::new(\n            context.msg_sender(),\n            STAMP_ID::ETHEREUM,\n            address\n        );\n        storage.stamps.at(context.msg_sender()).insert(&mut stamp, false);\n\n        // emit encrypted log of stamp creation\n        emit_encrypted_log(\n            &mut context,\n            context.this_address(),\n            stamp.header.storage_slot,\n            get_public_key(context.msg_sender()),\n            stamp.serialize()\n        );\n    }\n\n   unconstrained fn get_eth_address(owner: Field) -> Field {\n        let mut address = 0; \n        let options = NoteViewerOptions::new().set_offset(0);\n        let notes = storage.stamps.at(owner).view_notes(options);\n        let filtered = filter_eth_address_stamp(notes);\n        if filtered[0].is_some() {\n            let stamp = filtered[0].unwrap_unchecked();\n            address = stamp.data;\n        }\n        address\n    }\n\n    unconstrained fn get_score(owner: AztecAddress) -> u120 {\n        let options = NoteViewerOptions::new().set_offset(0);\n        let notes = storage.stamps.at(owner.address).view_notes(options);\n        let mut sum = 0;\n        for i in 0..notes.len() {\n            if notes[i].is_some() {\n                let stamp = notes[i].unwrap_unchecked();\n                sum += STAMP_SCORES[stamp.stamp_type];\n            }\n        }\n        sum\n    }\n\n    // TODO: Need to nullify stamps \n    #[aztec(private)]\n    fn stamp_web2(signature: [u8; 64], msg: [Field; 2]) {\n        // Encode msg to bytes\n        // let encoded_msg = encode_msg(msg);\n        // let Pubkey { x, y } = storage.registered_signer.read();\n        // let valid_signature = dep::std::schnorr::verify_signature(x, y, signature, encoded_msg);\n        // assert(valid_signature, \"Signature could not be verified with provided data\");\n        let mut stamp = StampNote::new(\n            context.msg_sender(),\n            msg[0] as u8,\n            msg[1]\n        );        \n        storage.stamps.at(context.msg_sender()).insert(&mut stamp, false);\n        \n        emit_encrypted_log(\n            &mut context,\n            context.this_address(),\n            stamp.header.storage_slot,\n            get_public_key(context.msg_sender()),\n            stamp.serialize()\n        );\n    }\n\n    unconstrained fn encode_msg(msg: [Field; 2]) -> [u8; 33] {\n            let mut bytes: [u8; 33] = [0; 33]; \n            let data = msg[1].to_be_bytes(32);\n            bytes[0] = msg[0] as u8;\n            for i in 0..32 {\n                bytes[i + 1] = data[i];\n            }\n            bytes\n    }\n\n    #[aztec(public)]\n    internal fn initialize(signer_x: Field, signer_y: Field) {\n        storage.registered_signer.write(Pubkey {x: signer_x, y: signer_y});\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(StampNoteMethods, note_header, preimage)\n    }\n\n    unconstrained fn compute_keccak_256(owner: Field) ->  [u8; 32] {\n        let owner_bytes: [u8] = owner.to_be_bytes(32);\n        // let mut bytes: [u8; 32] = [0; 32];\n        // for i in 0..32 {\n        //      bytes[i] = owner_bytes[i];\n        // }\n        // bytes\n        // let mut bytes1: [u8; 31] = [0; 31];\n        // let mut bytes2: [u8; 31] = [0; 31];\n        // let mut bytes3: [u8; 31] = [0; 31];\n        // for i in 0..31 {\n        //     bytes1[i] = owner_bytes[i];\n        //     bytes2[i + 11 * 1] = owner_bytes[i + 11 * 1];\n        //     bytes3[i + 11 * 2] = owner_bytes[i + 11 * 2];\n        // }\n        // [bytes1, bytes2, bytes3]\n        // let bytes = [25, 69, 116, 104, 101, 114, 101, 117, 109,  32,  83, 105, 103, 110, 101, 100,  32,  77, 101, 115, 115,  97, 103, 101,  58,  10,  54,  54,  43, 103, 249,  15,   0, 68,  89,  97, 144, 100,  77, 218, 254, 164,  21,  45, 228, 123, 212, 120,  21,  89,  73,  56,  96, 250, 115, 88, 225, 157, 9,  10];\n        let mut bytes: [u8; 60] = [0; 60];\n        let prefix: [u8; 26] = [25,  69, 116, 104, 101, 114, 101, 117, 109,  32,  83, 105, 103, 110, 101, 100,  32,  77, 101, 115, 115, 97, 103, 101,  58,  10];\n        for i in 0..26 {\n            bytes[i] = prefix[i];\n        }\n        bytes[26] = 51;\n        bytes[27] = 50;\n        for i in 0..32 {\n            bytes[i + 28] = owner_bytes[i];\n        }\n        dep::std::hash::keccak256(bytes, 60)\n        // bytes\n    }\n}\n",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/main.nr"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash.nr"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    pub fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\npub fn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\npub fn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar.nr"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\npub fn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul.nr"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field.nr"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\nuse crate::hash::pedersen_hash;\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    note_hash_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.note_hash_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { note_hash_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        pedersen_hash(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        pedersen_hash(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/abi.nr"
      },
      "36": {
        "source": "use crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\nuse crate::hash::pedersen_hash;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  pedersen_hash([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/address.nr"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n    pending_read_requests: BoundedVec<Field, MAX_PENDING_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n            pending_read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            pending_read_requests: self.pending_read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_pending_read_request(&mut self, pending_read_request: Field) {\n        self.pending_read_requests.push(pending_read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                pending_read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 49),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 81),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 97),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 113),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 129),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 133),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 137),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 139),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 141),\n                encrypted_log_preimages_length: fields[143],\n                unencrypted_log_preimages_length: fields[144],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    note_hash_tree_root : fields[145],\n                    nullifier_tree_root : fields[146],\n                    contract_tree_root : fields[147],\n                    l1_to_l2_messages_tree_root : fields[148],\n                    blocks_tree_root : fields[149],\n                    public_data_tree_root: fields[150],\n                    global_variables_hash: fields[151],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[152], fields[153]),\n                    constructor_vk_hash : fields[154],\n                    function_tree_root : fields[155],\n                    contract_address_salt : fields[156],\n                    portal_contract_address : fields[157],\n                },\n                chain_id: fields[158],\n                version: fields[159],\n            },\n            is_execution_request: fields[160] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/context.nr"
      },
      "39": {
        "source": "use dep::std::hash::{pedersen_with_separator, sha256};\nuse crate::constants_gen::{\n  GENERATOR_INDEX__SIGNATURE_PAYLOAD,\n  GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET,\n};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n  let sha256_hashed = sha256(bytes_to_hash);\n\n  // Convert it to a field element\n  let mut v = 1;\n  let mut high = 0 as Field;\n  let mut low = 0 as Field;\n\n  for i in 0..16 {\n      high = high + (sha256_hashed[15 - i] as Field) * v;\n      low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n      v = v * 256;\n  }\n\n  // Abuse that a % p + b % p = (a + b) % p and that low < p\n  let hash_in_a_field = low + high * v;\n\n  hash_in_a_field\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n  // TODO(#1205) This is probably not the right index to use\n  pedersen_hash([secret], GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET)\n}\n\n#[oracle(pedersenHash)]\nfn pedersen_hash_oracle<N>(_inputs: [Field; N], _hash_index: u32) -> Field {}\n\nunconstrained fn pedersen_hash_internal<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    pedersen_hash_oracle(inputs, hash_index)\n}\n\n// TODO(Kev): We can move this into the noir std-lib \n// as an acir opcode, once we have the pedersen PR merged.\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n  // Temporary hack. This is not right. Kev forced me to do this. Blame him.\n  pedersen_hash_internal(inputs, hash_index)\n  // let input_size = inputs.len();\n  // let mut modified_inputs = [];\n  // modified_inputs = modified_inputs.push_back(input_size as Field);\n  // for i in 0..N {\n  //   modified_inputs = modified_inputs.push_back(inputs[i]);\n  // }\n  // pedersen_with_separator(modified_inputs, hash_index)[0]\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/hash.nr"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/log.nr"
      },
      "45": {
        "source": "use crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n    broadcast: bool,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        let broadcast = note_interface.broadcast;\n        broadcast(context, storage_slot, *note);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/note/lifecycle.nr"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/note/note_getter.nr"
      },
      "48": {
        "source": "use crate::hash::pedersen_hash;\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([storage_slot, note_hash], 0)\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/note/note_hash.nr"
      },
      "51": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::MAX_NOTES_PER_PAGE;\nuse crate::note::note_getter_options::{Select, Sort};\nuse crate::types::vec::BoundedVec;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N> NoteViewerOptions<Note, N> {\n    pub fn new() -> NoteViewerOptions<Note, N> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(Option::none()),\n            sorts: BoundedVec::new(Option::none()),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n        }\n    }\n\n    pub fn select(&mut self, field_index: u8, value: Field) -> Self {\n        self.selects.push(Option::some(Select::new(field_index, value)));\n        *self\n    }\n\n    pub fn sort(&mut self, field_index: u8, order: u2) -> Self {\n        self.sorts.push(Option::some(Sort::new(field_index, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/note/note_viewer_options.nr"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/note/utils.nr"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/arguments.nr"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: Field) -> [Field; 3] {\n  get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_and_partial_address_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/get_public_key.nr"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key.nr"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/notes.nr"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/storage.nr"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/oracle/logs.nr"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    hash::pedersen_hash,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        pedersen_hash([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/public_call_stack_item.nr"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse crate::hash::pedersen_hash;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key],0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/state_vars/map.nr"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/state_vars/public_state.nr"
      },
      "74": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self,\n        note: &mut Note,\n        broadcast: bool,\n    ) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n            broadcast,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/state_vars/set.nr"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/types/vec.nr"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.11.0/yarn-project/aztec-nr/aztec/src/utils.nr"
      },
      "89": {
        "source": "use dep::aztec::{\n    context::PrivateContext,\n    log::emit_encrypted_log,\n    note::{\n        note_header::NoteHeader,\n        note_interface::NoteInterface,\n        utils::compute_note_hash_for_read_or_nullify,\n    },\n    oracle::{\n        get_secret_key::get_secret_key,\n        get_public_key::get_public_key,\n    }\n};\n\nglobal STAMP_SERIALIZED_NOTE_LEN: Field = 3;\n\nstruct StampNote {\n    owner: Field,\n    // type of stamp\n    stamp_type: u8,\n    // timestamp of when the stamp was issued\n    // timestamp: Field,\n    data: Field,\n    header: NoteHeader\n}\n\nimpl StampNote {\n    pub fn new(owner: Field, stamp_type: u8, data: Field) -> Self {\n        Self { owner, stamp_type, data, header: NoteHeader::empty() }\n    }\n\n    fn serialize(self) -> [Field; STAMP_SERIALIZED_NOTE_LEN] {\n        [\n            self.owner,\n            self.stamp_type as Field,\n            self.data,\n        ]\n    }\n\n    fn deserialize(preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> Self {\n        StampNote {\n            owner: preimage[0],\n            stamp_type: preimage[1] as u8,\n            data: preimage[2],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen(self.serialize())[0]\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let siloed_note_hash = compute_note_hash_for_read_or_nullify(StampNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        dep::std::hash::pedersen([\n            siloed_note_hash,\n            secret.low,\n            secret.high\n        ])[0]\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    pub fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            encryption_pub_key,\n            self.serialize(),\n        );\n    }\n}\n\nfn deserialize(preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> StampNote {\n    StampNote::deserialize(preimage)\n}\n\nfn serialize(note: StampNote) -> [Field; STAMP_SERIALIZED_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: StampNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: StampNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: StampNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut StampNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nfn broadcast(context: &mut PrivateContext, slot: Field, note: StampNote) {\n    note.broadcast(context, slot);\n}\n\nglobal StampNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header,\n    broadcast\n};",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/types/stamp_note.nr"
      },
      "90": {
        "source": "use dep::aztec::{\n    constants_gen::MAX_NOTES_PER_PAGE,\n    hash::sha256_to_field,\n};\nuse dep::std::option::Option;\nuse crate::types::stamp_note::StampNote;\n\nmod STAMP_ID {\n    global ETHEREUM: u8 = 0;\n    global ENS: u8 = 1;\n    global GOOGLE: u8 = 2;\n    global DISCORD: u8 = 3;\n    global GITHUB: u8 = 4;\n}\n\npub fn get_ens_stamp_private_content_hash(\n    secret_redemption_hash: Field,\n    name: Field,\n    timestamp: Field,\n    canceller: Field\n) -> Field {\n    // 132 = 32 * 4 + 4\n    let mut hash_bytes: [u8; 132] = [0; 132];\n    let secret_hash_bytes = secret_redemption_hash.to_be_bytes(32);\n    let name_bytes = name.to_be_bytes(32);\n    let timestamp_bytes = timestamp.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    // insert into bytes array\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = name_bytes[i];\n        hash_bytes[i + 68] = timestamp_bytes[i];\n        hash_bytes[i + 100] = canceller_bytes[i];\n    }\n\n    // ethers.id(\"stamp_ens(bytes32,bytes32,uint256,address)\").slice(0, 10)\n    hash_bytes[0] = 0x5e;\n    hash_bytes[1] = 0x8d;\n    hash_bytes[2] = 0x7e;\n    hash_bytes[3] = 0x7e;\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn filter_eth_address_stamp(notes: [Option<StampNote>; MAX_NOTES_PER_PAGE]) -> [Option<StampNote>; 1] {\n    let mut eth_stamp_ret = [Option::none(); 1];\n    for i in 0..notes.len() {\n        if notes[i].is_some() {\n            let stamp = notes[i].unwrap_unchecked();\n            if stamp.stamp_type == STAMP_ID::ETHEREUM {\n                eth_stamp_ret[0] = notes[i];\n            }\n        }\n    }\n    eth_stamp_ret\n}",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/util.nr"
      }
    }
  }
}