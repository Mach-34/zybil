{
  "name": "Zybil",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdVXNbVxSGYduJ7TLXYWZqJUuypGKaMqeYchM1crlNMeWmaRtmZmZOfmHWO5FnPLnNvtnznplvbN149FjS0YG117rS1tZ2sO3a1h7piHS2fh943HXd4+7W74O3gcdzWz9Lhb5yuVntbRZLxUWF3nqjVimUK42+WrFWrNQqi3trpVKzVq5V6416tVAvlkvNYn+lXuovXNuGDfpbhRvcBj/PjuueZ+HGtmJ7QvPwTMwdCc0jMjEPSWgemYl5aELzqEzMnQnNozMxdyU0j8nE3J3QPDYT87CE5nFC83iheYLQPFFoniQ0TxaapwjNU4XmaULzdKF5htA8U2ieJTTPFprnCM0PCM0PCs0FobkoNPcKzSWhuSw0V4TmPqG5KjTXhOa60PyQ0Pyw0PyI0Pyo0PyY0Py40DxXaH5CaJ4nND8pND8lND8tND8jND8rND8nND8vNL8gNL8oNL8kNL8sNL8iNL8qNM8Xml8Tml8Xmt8Qmt8Umt8Smt8WmhcIze8Ize8Kze8Jze8LzR8IzR8KzR8JzR8LzQuF5kVCc0No/kRoXiw0N4XmfqH5U6H5M6H5c6H5C6H5S6H5K6H5a6H5G6H5W6F5idD8ndD8vdD8g9D8o9D8k9D8s9C8VGj+RWj+VWj+TWj+XWj+Q2j+U2j+S2j+W2heJjT/IzQvF5r/FZr/E5r/F5pXCM0rheZVQvNqoXmN0LxWaF4nNK8XmjcIzRuF5k1C82aheYvQvFVo3iY0bxeadwjNO4XmXULzbqF5j9C8V2jeJzTvF5oPCM0HheZDQvNhofmI0Hw0E/NNCc3HMjHfnNB8PBPzLQnNJzIx35rQfDIT820JzacyMd+e0Hw6E/MdCc1nMjHfmdB8NhPzXQnN5zIx353QfD4T8z0JzRcyMd+b0HwxE/N9Cc2XMjHfn9B8ORNzT0LzlYTmntbfaW+Zh0SGRjojXZHuCOeEnCNxzsAxNMeUHGNxzMF3MN9J7KPZZ/EZ5j3Na9wz6P+5t/VzeGREZGRkVGR0ZExkbGRcZHxkQmRiZFJkcmRKZGpkWmR6ZEZkZmRWZHZkToQZ98x850VkJjgzspkZzQxlZgozY7caYQYrM0mZ0cnMSmY4MtOQGX8DM++YiTYvwswsZkgxU4kZQ8zcYQYNM1mYUcLMDmZYMNOBGQf0/J8foSc8PdLpGU4PbXpK02N5QYQevPSkpUcrPUvp4UlPS3o80vNwYYSeeI0IPdPoIUZPLXpM0XOJHkT05KFHDT1b6GFCTw96XNDzYUmEngCskWfNOGuoWVPMGtulEdZgsiaRNXqsWWMNF2uaWOPDmpdlEdZELI9QM08NOTXV1BhTc0sNKjWZ1ChSs0cNGzVd1DhR80MNDDUh1EhQM8A9dO4pc4+Ve47cg+OeFPdoeE9wDZ9r2lzj5ZrnoQjXxLhGxDUTriFwTs05JudcnINwTM4xKsdsHMPwnc53HPt89oHsE/iMDGxXAR3DARWElwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ens",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "addr",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "consumption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ethkey",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "pubkey_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "pubkey_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "mod storage;\nmod types;\nmod util;\n\ncontract Zybil {\n    use dep::aztec::{\n        context::Context,\n        hash::compute_secret_hash,\n        selector::compute_selector,\n        state_vars::{map::Map, public_state::PublicState, set::Set},\n        types::{\n            address::{AztecAddress, EthereumAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods, FIELD_SERIALIZED_LEN\n            }\n        },\n    };\n    use crate::{\n        types::{\n            public_key::{ Pubkey, PubkeyMethods, PUBKEY_SERIALIZED_LEN },\n            stamp_note::{ StampNote, StampNoteMethods, STAMP_SERIALIZED_NOTE_LEN }\n        },\n        util::get_ens_stamp_private_content_hash\n    };\n    use dep::std::{\n        option::Option,\n        schnorr\n    };\n\n    // Largest possible signed message length\n    global MAX_MSG_LEN = 380;\n\n    #[aztec(private)]\n    fn constructor() {}\n    // fn constructor(signer_x: Field, signer_y: Field) {\n        // Set registered signer\n        // let selector = compute_selector(\"initialize(Field,Field)\");\n        // context.call_public_function(context.this_address(), selector, [signer_x, signer_y]);\n        // set the backend address based on the sender\n        // setup bridge\n        // let selector = compute_selector(\"_initialize((Field))\");\n        // context.call_public_function(context.this_address(), selector, )\n    // }\n\n    #[aztec(private)]\n    fn stamp_ens(\n        redemption_hash: Field,\n        addr: EthereumAddress,\n        timestamp: Field,\n        canceller: EthereumAddress,\n        msg_key: Field,\n        consumption_hash: Field,\n    ) {\n        // todo: constrain to make sure user has proven ownership of eth address\n        // consume L1 to L2 and emit nullifier\n        let content_hash = get_ens_stamp_private_content_hash(\n            redemption_hash,\n            addr.address,\n            timestamp,\n            canceller.address\n        );\n    }\n\n    #[aztec(private)]\n    fn stamp_ethkey(pubkey_x: [u8; 32], pubkey_y: [u8; 32], signature: [u8; 64]) {\n        // convert msg.sender to [u8] as message to be signed\n        let message = context.msg_sender().to_le_bytes(20);\n        // check signature\n        let valid_signature = dep::std::ecdsa_secp256k1::verify_signature(\n            pubkey_x,\n            pubkey_y,\n            signature,\n            message\n        );\n        assert(valid_signature);\n        // convert pubkey to EthAddress\n        let mut pubkey: [u8; 64] = [0; 64];\n        for i in 0..32 {\n            pubkey[i] = pubkey_x[i];\n            pubkey[i + 32] = pubkey_y[i];\n        };\n        let pubkeyHash = dep::std::hash::keccak256(pubkey, 64);\n        let mut address: Field = 0;\n        let mut v: Field = 1;\n        for i in 0..20 {\n            let index = 20 - i;\n            address += pubkeyHash[index + 11] as Field * v;\n            v *= 256;\n        }\n        // create stamp\n    }\n\n    // #[aztec(private)]\n    // fn stamp_web2() {\n        \n    // }\n\n    // #[aztec(public)]\n    // internal fn initialize(signer_x: Field, signer_y: Field) {\n    //     storage.registered_signer.write(Pubkey {x: signer_x, y: signer_y});\n    // }\n\n    // #[aztec(public)]\n    // internal fn valid_signature(signature: [u8; 64], msg: [u8; MAX_MSG_LEN]) -> bool {\n    //     let Pubkey { x, y } = storage.registered_signer.read();\n    //     schnorr::verify_signature(x, y, signature, msg)\n    // }\n\n    // unconstrained fn registered_signer() -> Pubkey {\n    //     storage.registered_signer.read()\n    // }\n}\n",
        "path": "/home/jpag/Workground/aztec/zybil/zybil/contracts/l2/src/main"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/abi"
      },
      "91": {
        "source": "use dep::aztec::hash::sha256_to_field;\n\npub fn get_ens_stamp_private_content_hash(\n    secret_redemption_hash: Field,\n    name: Field,\n    timestamp: Field,\n    canceller: Field\n) -> Field {\n    // 132 = 32 * 4 + 4\n    let mut hash_bytes: [u8; 132] = [0; 132];\n    let secret_hash_bytes = secret_redemption_hash.to_be_bytes(32);\n    let name_bytes = name.to_be_bytes(32);\n    let timestamp_bytes = timestamp.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    // insert into bytes array\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = name_bytes[i];\n        hash_bytes[i + 68] = timestamp_bytes[i];\n        hash_bytes[i + 100] = canceller_bytes[i];\n    }\n\n    // ethers.id(\"stamp_ens(bytes32,bytes32,uint256,address)\").slice(0, 10)\n    hash_bytes[0] = 0x5e;\n    hash_bytes[1] = 0x8d;\n    hash_bytes[2] = 0x7e;\n    hash_bytes[3] = 0x7e;\n\n    sha256_to_field(hash_bytes)\n}",
        "path": "/home/jpag/Workground/aztec/zybil/zybil/contracts/l2/src/util"
      }
    }
  }
}