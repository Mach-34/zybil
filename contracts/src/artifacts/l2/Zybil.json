{
  "name": "Zybil",
  "functions": [
    {
      "name": "compute_note_hash_and_nullifier",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "contract_address",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "nonce",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "storage_slot",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "preimage",
          "type": {
            "kind": "array",
            "length": 5,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signer",
          "type": {
            "kind": "struct",
            "path": "types::public_key::Pubkey",
            "fields": [
              {
                "name": "x",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "y",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "encode_msg",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "msg",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "array",
          "length": 33,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "getScore",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "owner",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::AztecAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::stamp_note::StampNote",
          "fields": [
            {
              "name": "owner",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "stamp_type",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            },
            {
              "name": "data",
              "type": {
                "kind": "array",
                "length": 3,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "header",
              "type": {
                "kind": "struct",
                "path": "aztec::note::note_header::NoteHeader",
                "fields": [
                  {
                    "name": "contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nonce",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_slot",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_transient",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "signer_x",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "signer_y",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ens",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "addr",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "consumption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ethkey",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "pubkey_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "pubkey_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_web2",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "msg",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "",
      "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TcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdTcrdNeXumnJ3Tbm7ptxdf0lZ3JS7a8rdNeXumnJ3Tbm7ptxdU+6uKXfXlLtryt015e6acndNubum3F1T7q4pd9eUu2vK3TXl7ppyd025u6bcXVPuril315S7a8rdNeXumnJ3Tbm7ptxdU+6uKXfXlLtryt015e6acndNubum3F1T7q4pd9eUu2vK3TXl7ppyd025u6bcXVPuril315S7a8rdNeXumnJ3Tbm7ptxdU+6uKXfXlLtryt015e6acndNubum3F1T7q4pd9eUu2vK3TXl7ppyd025u6bcXVPuril315S7a8rdNeXumnJ3Tbm7ptxdU+6uKXfXlLtryt015e6acndNubum3F1T7q4pd9eUu2vK3TXl7ppyd025u6bcXVPublHublHublHublHu7vXfqW6kLF6Uu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu1uUu9uUu9uUu9uUu9uUu9tfUhZvyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt1tyt0dlLs7KHd3UO7uoNzd8SVl8UG5u4Nydwfl7g7K3R2Uuzsod3dQ7u6g3N1BubuDcncH5e4Oyt0dlLs7KHd3UO7uoNzdQbm7g3J3B+XuDsrdHZS7Oyh3d1Du7qDc3UG5u4Nydwfl7o7P3N0/+N/f6+ajLH68m4+y+PFuPsrix7v5KIsf7+ajLH68m4+y+PFuPsrip7v5zN093s1HWfx4N1QWf+buHu+GyuLP3N3j3VBZ/Jm7e7wbKos/c3dPd/OZu3u8GyqLP3N3j3dDZfFn7u7xbqgs/szdPd4NlcWfubvHu6Gy+DN393g3VBZ/5u4e74bK4s/c3ePdUFn8mbt7vBsqiz9zd493Q2XxZ+7u8W6oLP7M3T3eDZXFn7m7x7uhsvgzd/d4N1QWf+buHu+GyuLP3N3j3VBZ/Jm7e7wbKos/c3ePd0Nl8Wfu7vFuqCz+zN093g2VxZ+5u8e7obL4M3f3eDdUFn/m7h7vhsriz9zd491QWfyZu3u8GymLx9dn8O75dqQ0frUjxfGrHSmPX+1IgfxqR0rkVztSJL/akTL51Y4Uyq92rFT+jOA9346Vyp8hvOfbsVL5M4b3fDtWKn8G8Z5vx0rlzyje8+1YqfwZxnu+HSuVP+N4z7djpfJnIO/5dqxU/ozkPd+Olcqfobzn27FS+TOW93w7VipTMO/VjpXKFM17tWOlMoXzXu1YqUzxvFc7VipTQO/VjpXKFNF7tWOlMoX0Xu1YqUwxvVc7VipTUO/VjpXKFNV7tWOlMoX1Xu1YqUxxvVc7VipTYO/VjpXKFNl7tWOlMoX2Xu1YqUyxvVc7VipTcO/VjpXKFN17tWOlMoX3Xu1YqUzxvVc7VipTgO/VjpXKFOF7tWOlMoX4Xu1YqUwxvlc7VipTkO/VjpXKFOV7tWOlMoX5Xu1YqUxxvlc7VipToO/VjpXKFOl7tWOlMoX6Xu1YqUyxvlc7VipTsO/VjpXKFO17tUOl8rBs37Bs37Bs37Bs3/iiUnlYtm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Ytm9Yti8s2xeW7QvL9oVl++KLSuWwbF9Yti8s2xeW7QvL9oVl+8KyfWHZvrBsX1i2LyzbF5btC8v2hWX7wrJ9Ydm+sGxfWLYvLNsXlu0Ly/aFZfvCsn1h2b6wbF9Yti8s2xeW7QvL9oVl+8KyfWHZvrBsX1i2LyzbF5btC8v2hWX7wrJ9Ydm+sGxfWLYvLNsXlu0Ly/aFZfvCsn1h2b6wbF9Yti8s2xeW7QvL9oVl+8KyfWHZvrBsX1i2LyzbF5btC8v2hWX7wrJ9Ydm+sGxfWLYvLNsXlu0Ly/aFZfvCsn1h2b6wbF9Yti8s2xeW7QvL9oVl+8KyfWHZvrBsX1i2LyzbF5btC8v2hWX7wrJ9Ydm+sGxfWLYvLNsXlu0Ly/aFZfvCsn1p2b60bF9ati8t25dfVCqnZfvSsn1p2b60bF9ati8t25eW7UvL9qVl+9KyfWnZvrRsX1q2Ly3bl5btS8v2pWX70rJ9adm+tGxfWrYvLduXlu1Ly/alZfvSsn1p2b60bF9ati8t25eW7UvL9qVl+9KyfWnZvrRsX1q2Ly3bl5btS8v2pWX70rJ9adm+tGxfWrYvLduXlu1Ly/alZfvSsn1p2b60bF9ati8t25eW7UvL9qVl+9KyfWnZvrRsX1q2Ly3bl5btS8v2pWX70rJ9adm+tGxfWrYvLduXlu1Ly/alZfvSsn1p2b60bF9ati8t25eW7UvL9qVl+9KyfWnZvrRsX1q2Ly3bl5btS8v2pWX70rJ9adm+tGxfWrYvLduXlu0ry/aVZfvKsn1l2b76olK5LNtXlu0ry/aVZfvKsn1l2b6ybF9Ztq8s21eW7SvL9pVl+8qyfWXZvrJsX1m2ryzbV5btK8v2lWX7yrJ9Zdm+smxfWbavLNtXlu0ry/aVZfvKsn1l2b6ybF9Ztq8s21eW7SvL9pVl+8qyfWXZvrJsX1m2ryzbV5btK8v2lWX7yrJ9Zdm+smxfWbavLNtXlu0ry/aVZfvKsn1l2b6ybF9Ztq8s21eW7SvL9pVl+8qyfWXZvrJsX1m2ryzbV5btK8v2lWX7yrJ9Zdm+smxfWbavLNtXlu0ry/aVZfvKsn1l2b6ybF9Ztq8s21eW7SvL9pVl+8qyfWXZvrJsX1m2ryzbV5btK8v2lWX7yrJ9Zdm+smzftGzftGzftGzftGzf/KJSeVq2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2b1q2ry3b15bta8v2tWX7+otK5bZsX1u2ry3b15bta8v2tWX72rJ9bdm+tmxfW7avLdvXlu1ry/a1Zfvasn1t2b62bF9btq8t29eW7WvL9rVl+9qyfW3ZvrZsX1u2ry3b15bta8v2tWX72rJ9bdm+tmxfW7avLdvXlu1ry/a1Zfvasn1t2b62bF9btq8t29eW7WvL9rVl+9qyfW3ZvrZsX1u2ry3b15bta8v2tWX72rJ9bdm+tmxfW7avLdvXlu1ry/a1Zfvasn1t2b62bF9btq8t29eW7WvL9rVl+9qyfW3ZvrZsX1u2ry3b15bta8v2tWX72rJ9bdm+tmxfW7avLdvXlu1ry/a1Zfvasn1t2b62bF9btq8t29eW7WvL9rVl+9qyfcuyfcuyfcuyfcuyfa8HrHaoVF6W7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7VuW7Vv/vO37teCfzs1fC/7pZPu14DR7eh/xt5rXj/uk7DQjrstO7/Jl2bnc+m3ZMeof/jGz82+P5hHfn4z/P+H0Gj16wunNePSE02F/9ITT+X30hNOBf/SE0xvy6AmXV+rjEy5v38cnXF7UT084dz+PnvDD7/S5znn0hB9+p88NzaMn/PA7fS5dHj3hh9/pc4/y6Ak//E6fq5FHT/jhd/rcdjx6wg+/0+cC49ETfvidPncSj57ww+/0uWZ49IQffqfPzcGjJ/zwO30uAx494Yff6fPv9x894Yff6fOv7B894Yff6fNv4R894Uff6X3+xfqjJ/zoO73Pvyt/9ITzO33k8f2Emr854dey84t6WXZ++35bNsdJ2fmVuiw7vydH1veyPGvyfPgvy84n+qrs/BPe67Lz2bssOx+oy7J3U3JR9m5KLsreTclF2bspuSi7NyXnn0Bel92bkvNPCq/L7k3J+Sd612X3puT8k7frsntTcv4J2XXZvSk5/yTruuzelJx/4nRddm9Kzj8Zui67NyXnn+Bcl92bkvNPWq7L7k3J+Sci12X3puT8k4vrsntTcv4Jw3XZvSk5/yTguuzelJy/Yr8uuzcl56+sr8vuTcn5K+DrsntTcv5K9brs3pScv6K8Lrs3JeevK6/L7k3Jm5eWl2X3puTNS8vLsntT8ub14mXZvSl58yLwsuzelLx5ZXdZdm9K3rxcuyy7NyVvXoNdlt2bkjcvrC7L7k3Jm1dLl2X3puTNS6DLsntT8uZ1zWXZvSl582LlsuzelLx5BXJZdm9K3rysuCy7NyVvXitclt2bkjcvAC7L7k3Jm1X9Zdm9KXmzVL8suzclb9bfl2X3puTNovqy7N6UvFkpX5bdmpLjzfL3suzWlBxv1rSXZbem5Hi7e70ouzUlx9vd60XZrSk57u1ej3u71+Pe7vW4t3s97u1ej3u71+Pe7vW4t3s97u1ej3u71+Pe7vW4t3s97u1ej3u71+Pe7vW4t3s97u1ej3u71+Pe7vW4t3s97u1ej3u71+Pe7vW4t3s97u1ej3u71+Pe7vW4t3s97u1ej3u71+Pe7vW4t3s97u1ej3u71+Pe7vW4t3s97u1ej3u71+Pe7vW4t3s97u1ej3u71+PdWnOt72XrOCl78we4Kjv9layv79Lj9eNJ2bsd3sVp5zu869NOfyXXZae/kuuy05lcXyO/l8XfO5PjfId3XfbmD3BVdjqT12WnM3lZdr7Duy47nZLrsntTcr7Duy67NyXnO7zrsjdTclV275qe7/Cuy95MyUXZ+Q7vuuzNlFyV3ZuS8x3eddm9KTnf4V2X3ZuS8x3eddm9KTnf4V2Wne/wrsvuTcn5Du+67N6UnO/wrsvuTcn5Du8flP3yy/8CB3Avjw==",
      "",
      "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bl91uX3V5fZVl9tXXW5fdbl91eX2VZfbV11uX3W5fdXl9lWX21ddbl91uX3V5fZVl9tXXW5fdbl91eX2VZfbV11uX3W5fdXl9lWX21ddbl91uX3V5fZVl9tXXW5fdbl91eX2VZfbV11uX3W5fdXl9lWX21ddbl91uX3V5fZVl9tXXW5fdbl91eX2VZfbV11uX3W5fdXl9lWX21ddbl91uX3V5fZVl9tXXW5fdbl91eX2VZfbV11uX3W5fdXl9lWX21ddbl91uX3V5fZVl9tXXW5fdbl91eX2VZfbV11uX3W5fdXl9lWX21ddbl91uX3V5fZVl9tXXW5fdbl91eX2VZfbV11uX3W5fdXl9lWX29dcbl9zuX3N5fY1l9vXHqpWbi63r7ncvuZy+5rL7Wsut6+53L7mcvuay+1rLrevudy+5nL7msvtay63r7ncvuZy+5rL7Wsut6+53L7mcvuay+1rLrevudy+5nL7msvtay63r7ncvuZy+5rL7Wsut6+53L7mcvuay+1rLrevudy+5nL7msvtay63r7ncvuZy+5rL7Wsut6+53L7mcvuay+1rLrevudy+5nL7msvtay63r7ncvuZy+5rL7Wsut6+53L7mcvuay+1rLrevudy+5nL7msvtay63r7ncvuZy+5rL7Wsut6+53L7mcvuay+1rLrevudy+5nL7msvtay63r7ncvuZy+5rL7Wsut6+53L7mcvuay+1rLrevudy+5nL7msvtay63r7ncvuZy+5rL7Wsut6+53L7mcvuay+1rLrevudy+5nL7usvt6y63r7vcvu5y+/pD1crd5fZ1l9vXXW5fd7l93eX2dZfb111uX3e5fd3l9nWX29ddbl93uX3d5fZ1l9vXXW5fd7l93eX2dZfb111uX3e5fd3l9nWX29ddbl93uX3d5fZ1l9vXXW5fd7l93eX2dZfb111uX3e5fd3l9nWX29ddbl93uX3d5fZ1l9vXXW5fd7l93eX2dZfb111uX3e5fd3l9nWX29ddbl93uX3d5fZ1l9vXXW5fd7l93eX2dZfb111uX3e5fd3l9nWX29ddbl93uX3d5fZ1l9vXXW5fd7l93eX2dZfb111uX3e5fd3l9nWX29ddbl93uX3d5fZ1l9vXXW5fd7l93eX2dZfb111uX3e5fd3l9nWX29ddbl93uX3d5fZ1l9vXXW5fd7l93eX2dZfb111uX3e5fd3l9nWX29ddbl+63L50uX3pcvvS5fblQ9XK6XL70uX2pcvtS5fbly63L11uX7rcvnS5fely+9Ll9qXL7UuX25cuty9dbl+63L50uX3pcvvS5faly+1Ll9uXLrcvXW5futy+dLl96XL70uX2pcvtS5fbly63L11uX7rcvnS5fely+9Ll9qXL7UuX25cuty9dbl+63L50uX3pcvvS5faly+1Ll9uXLrcvXW5futy+dLl96XL70uX2pcvtS5fbly63L11uX7rcvnS5fely+9Ll9qXL7UuX25cuty9dbl+63L50uX3pcvvS5faly+1Ll9uXLrcvXW5futy+dLl96XL70uX2pcvtS5fbly63L11uX7rcvnS5fely+9Ll9qXL7UuX25cuty9dbl+63L50uX3pcvvS5faly+1Ll9uXLrcvXW5futy+4XL7hsvtGy63b7jcvvFQtfJwuX3D5fYNl9s3XG7fcLl9w+X2DZfbN1xu33C5fcPl9g2X2zdcbt9wuX3D5fYNl9s3XG7fcLl9w+X2DZfbN1xu33C5fcPl9g2X2zdcbt9wuX3D5fYNl9s3XG7fcLl9w+X2DZfbN1xu33C5fcPl9g2X2zdcbt9wuX3D5fYNl9s3XG7fcLl9w+X2DZfbN1xu33C5fcPl9g2X2zdcbt9wuX3D5fYNl9s3XG7fcLl9w+X2DZfbN1xu33C5fcPl9g2X2zdcbt9wuX3D5fYNl9s3XG7fcLl9w+X2DZfbN1xu33C5fcPl9g2X2zdcbt9wuX3D5fYNl9s3XG7fcLl9w+X2DZfbN1xu33C5fcPl9g2X2zdcbt9wuX3D5fYNl9s3XG7fcLl9w+X2DZfbN1xu33C5fcPl9g2X2zddbt90uX3T5fZNl9s3H6pWni63b7rcvuly+6bL7Zsut2+63L7pcvumy+2bLrdvuty+6XL7psvtmy63b7rcvuly+6bL7Zsut2+63L7pcvvmuduXzxaviVme8/8N9ez58yJ/e/3ox9iMjzVOq/biNU778+I1Tkvx4jVOm+7iNU7r69o1zs22i9c4LZqL1zhtj4vXOK2Ei9fYcM7PFbCL19hwzs9lrYvX2HDOz7Wqa9c4d6UuXmPDOT+3mi5eY8M5P/ePLl5jwzk/N4UuXmPDOT93ei5eY8M5P7dvLl5jwzk/92QuXmPDOT83Wi5eY8M5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Nj5+zbiPt3tt/O5w+wM8fky4j7d7bfzsbx9v99r4gd4+3u618VO6bXz8Pm4fb/fa+CXb9gd4/DxtH2/32vgh2T7e7rXxk699vN1r48dZu/gSv7jax9O9tsRvo3Y/wEv8NmofT/faEr+N2sfTvbbEb6P28XSvLfHbqG18/DZqH0/32hK/jdr9AC/x26h9PN1rS/w2ah9P99oSv43ax9O9tsRvo7bx8duofTzda0v8Nmr3A7zEb6P28XSvLfHbqH083WtL/DZqH0/32hK/jdrGx2+j9vF0ry3x26jtD/D4bdQ+nu61JX4btY+ne22J30bt4+leW+K3Udv4+G3UPt7utfHbqO0P8Pht1D7e7rXx26h9vN1r47dR+3i718Zvo7bx8duofbzda+O3Udsf4PHbqH283Wvjt1H7eLvXxm+j9vF2r43fRm3j47dR+3i718Zvo7Y/wOO3Uft4u9fGb6P28Xavjd9G7ePtXhu/jdrGx2+j9vF2r43fRm1/gMdvo/bxdq+N30bt4+1eG7+N2sfbvTZ+G7WNj99G7ePtXhu/jdr+AI/fRu3j7V4bv43ax9u9Nn4btY+3e238NmobH7+N2sfbvTZ+G7X9AR6/jdrH2702fhu1j7d7bfw2ah9v99r4bdQuvsZvo/bxdK+t1o2q1o2qL7rXVutGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGVetGNetGNetGNetGNetGtRfda5t1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o5p1o7p1o7p1o7p1o7p1o/qL7rXdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHdulHDulHDulHDulHDulHjRffaYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oYd2oad2oad2oad2oad2o+aJ77bRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1LRu1POycNTKp5vtyqer7cqnu+3Kp8vtyqfb7cqn6+3Kp/vtyqcL7sqnG+7zsoTUyqc77sqnS+7Kp1vuyqdr7sqne+7Kp4vuyqeb7sqnq+7Kp7vu87KY1Mqn2+7Kp+vuyqf77sqnC+/Kpxvvyqcr78qnO+/Kp0vvyqdb7/OyrNTKp3vvyqeL78qnm+/Kp6vvyqe778qny+/Kp9vvyqfr78rH+68FplY+3n8tMbXy8f5rkamVj/dfy0ytfLz/Wmhq5eP911JTKx/vvxabWvl4/7Xc1MrH+68Fp1Y+3n8tObXy8f5r0amVj/dfy06tfLz/Wnhq5eP919JTKx/vvxafWvl4/7X81MrH+68FqFY+3n8tQbXy8f5rEaqVj/dfy1CtfLz/Wohq5eP911JUKx/vvxajWvl4/7Uc1crH+68FqVY+3n8tSbXy8f5rUaqVj/dfy1KtfLz/Wphq5eP919JUK9/uv4/FqVa+3X8fy1OtfLv/Pi+7/z5WqFr5dv99rFG18u3++1il6nksU7Xy7f77WKhq5dv997FU1cq3++9jsaqVb/ffx3JVK9/uv48Fq1a+3X8fS1atfLv/PhatWvl2/30sW7Xy7f77WLhq5dv997F01cq3++9j8aqVb/ffx/JVK9/uv48FrFa+3X8fS1itfLz/WsRq5eP91zJWKx/vvxayWvl4/7WU1crH+6/FrFY+3n8tZ7Xy8f5rQauVj/dfS1qtfLz/WtRq5eP917JWKx/vvxa2Wvl4/7W01crH+6/FrVY+3n8tb7Xy8f5rgauVj/dfS1ytfLz/WuRq5eP91zJXKx/vvxa6Wvl4/7XU1crH+6/FrlY+3n8td7Xy8f5rwauVj/dfS16tfLz/WvRq5eP917JXKx/vvxa+Wvl4/7X01crH+6/Fr1Y+3n8tf7Xy7f6bsH+VsH+VsH+VsH+VXnb/Tdi/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/Sti/yti/yti/yti/yti/yi+7/2bsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsX2XsXxXsXxXsXxXsXxXsX5WX3X8L9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8K9q8q9q8q9q8q9q8q9q/qy+6/FftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXFftXVfpXv/76P0MFR8Q=",
      "eJzN18FqwzAQBNB/0dmH3dV6JflXSg+mTSEQktLkFvzvddvEBLLUF43RKQmshrm8gVzD4fQ2Xvan4zkM18CRw/ByDefP8fjz+3wZvy5hoC7sju/z59SFj/1hFwaeuqcrjpHsdjl/l7xcx947V+75fq4S9fH8tZu7SENdYkNdtKEu/YZdIuvSRYmeulhDXVJDXXJDXUo7XZQa6rLl7q512XJ317psubtrXbbc3bUuDe2uNrS72tDuqru7Sqm/vVJm/rdRtHg7jUWWS+G/eHdKq8X37jrWi3cHr168u2H14t1ZqhfvLk29eHc86sW7e1Av3iVeLx6rtseqNaxaw6o1rFrDqjWsWsOqNaxaw6o1rFrDqk1YtQmrNmHVJqzahFWbsGoTVm3Cqk1YtQmrNmPVZqzajFWbsWozVm3Gqs1YtRmrNmPVZqzaglVbsGoLVm3Bqi1YtQWrtmDVFqzaglVboGqFoGqFoGqFoGqFoGqFoGqFoGqFoGqFoGqFoGqFsGoZq5axatlXO/+dvsdHlof43zc+xShleaP6+GaavgECd7SK",
      "eJztmM2KGzEMgN/F5xBs+U/Kq5QeQruFhSVbmtxC3n0nYfwDI0aboXV12FMSkJwvsvTZk6t5e/9xvLy+n87mcDUpm8O3qzn/Pp7uH8+X45+LOdideTn9nF5vO/Pr9e3FHNxtt4hy3ts0R07vAWu0j1x4cNGV8AA+9OHfdyahHhRSg5KtHhSnBwX0oHg9KEEPStSDkvSg6LFt1mPbrMe2qMe2qMe2qMe2qMe2qMe2qMe2qMe2qMe2qMe2qMe2pMe2pMe2pMe2pMe2pMe2pMe2pMe2pMe2pMe2pMe2zo7UrXehsgRrFywjfSuxjBSuxDLSuBLLSOVKLCOdK7GMlK7EMtK6EstI7UosI70rsDhF3nWKvOsUedcp8q5jvZs8lawUbOqIHjmsH4Uc1mNCDusbIYf1gpDDzu96DrBzJuSw8yDksH0r5LD9JeRs6APY0AewoQ9gQx/Ahj4Avg9CgpITrVudTgQ/h2L2NTIDEwqujDEEqqHhAeL55voPIHzHPgFC7THBWhRIIDUUaV1bfiBBk1qesfmhUY/Nz616bF4d6rF5e/XYIJzFDqkdxan/gmVwpnLAYxcauEM7YAmNtg1v5KoxEWBBIIAajMTz1qsDdDcHNnhVC7zEv0r3idLxZ9lX6T5ROv5IV1C66Grpkl0vHVCh9ZDbqvhsLeSryt+sBfkqUvJ9Le4sQb6t/CsWXLDwF5aUK0vuDhiOZdqWskGxVX16+1iev1g8sXzAcgGNHvvlmarkMmSArehTeR4k/F3hCZIYSs1jxsUP5c/06Kku3/UktzxQOdM9tt0Pdm7fPTvMIRb86NryKcx7u2fPHYACBcyOuT1rXCmJxZOS2KFcTwp7/h+baGul7w/2pRLT5t9uHxkNAcE="
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\nmod util;\n\ncontract Zybil {\n    use dep::aztec::{\n        constants_gen::{MAX_NOTES_PER_PAGE},\n        context::Context,\n        hash::compute_secret_hash,\n        note::{\n            note_viewer_options::NoteViewerOptions,\n            note_header::NoteHeader,\n            utils as note_utils\n        },\n        selector::compute_selector,\n        types::{\n            address::{AztecAddress, EthereumAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods, FIELD_SERIALIZED_LEN\n            },\n        },\n        oracle::get_public_key::get_public_key,\n        log::emit_encrypted_log,\n        state_vars::{map::Map, public_state::PublicState, set::Set}\n    };\n    use crate::{\n        types::{\n            public_key::{ Pubkey, PubkeyMethods, PUBKEY_SERIALIZED_LEN },\n            stamp_note::{ StampNote, StampNoteMethods, STAMP_SERIALIZED_NOTE_LEN }\n        },\n        util::{\n            get_ens_stamp_private_content_hash,\n            STAMP_ID\n        },\n    };\n    use dep::std::option::Option;\n\n\n    // Largest possible signed message length\n    // global MAX_MSG_LEN = 380;\n\n\n    mod StorageSlots {\n        global BACKEND_ID = 1;\n        global STAMP_TYPE_ID = 2;\n        global STAMPS_ID = 3;\n        global SIGNER_ID = 4;\n    }\n\n    struct Storage {\n        registered_signer: PublicState<Pubkey, PUBKEY_SERIALIZED_LEN>,\n        stamp_type: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        stamps: Map<Set<StampNote, STAMP_SERIALIZED_NOTE_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                registered_signer: PublicState::new(\n                    context,\n                    StorageSlots::SIGNER_ID,\n                    PubkeyMethods\n                ),\n                stamp_type: Map::new(\n                    context,\n                    StorageSlots::STAMP_TYPE_ID,\n                    |context, slot| PublicState::new(\n                        context,\n                        slot,\n                        FieldSerializationMethods\n                    )\n                ),\n                stamps: Map::new(\n                    context,\n                    StorageSlots::STAMPS_ID,\n                    |context, slot| Set::new(\n                        context,\n                        slot,\n                        StampNoteMethods\n                    )\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(signer: Pubkey) {\n        // Set registered signer\n        let selector = compute_selector(\"initialize(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [signer.x, signer.y]);\n        // set the backend address based on the sender\n        // setup bridge\n        // let selector = compute_selector(\"_initialize((Field))\");\n        // context.call_public_function(context.this_address(), selector, )\n    }\n\n    #[aztec(private)]\n    fn stamp_ens(\n        redemption_hash: Field,\n        addr: EthereumAddress,\n        timestamp: Field,\n        canceller: EthereumAddress,\n        msg_key: Field,\n        consumption_hash: Field,\n    ) {\n        // todo: constrain to make sure user has proven ownership of eth address\n        // consume L1 to L2 and emit nullifier\n        let content_hash = get_ens_stamp_private_content_hash(\n            redemption_hash,\n            addr.address,\n            timestamp,\n            canceller.address\n        );\n    }\n\n    /**\n     * Generate a stamp for an Ethereum address by proving a signature over the sender's Aztec Address\n     *\n     * @param pubkey_x: the X coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param pubkey_y: the Y coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param signature: the signature on the sender's aztec address by given pubkey\n     */\n    #[aztec(private)]\n    fn stamp_ethkey(pubkey_x: [u8; 32], pubkey_y: [u8; 32], signature: [u8; 64]) {\n        // convert msg.sender to [u8] as message to be signed\n        let message = context.msg_sender().to_be_bytes(32);\n\n        // check signature\n        let valid_signature = dep::std::ecdsa_secp256k1::verify_signature(\n            pubkey_x,\n            pubkey_y,\n            signature,\n            message\n        );\n        assert(valid_signature);\n\n        // convert pubkey to EthAddress\n        let mut pubkey: [u8; 64] = [0; 64];\n        for i in 0..32 {\n            pubkey[i] = pubkey_x[i];\n            pubkey[i + 32] = pubkey_y[i];\n        };\n        let pubkeyHash = dep::std::hash::keccak256(pubkey, 64);\n        let mut address: Field = 0;\n        let mut v: Field = 1;\n        for i in 0..20 {\n            let index = 20 - i;\n            address += pubkeyHash[index + 11] as Field * v;\n            v *= 256;\n        }\n\n        // create stamp\n        // let mut stamp = StampNote::new(\n        //     context.msg_sender(),\n        //     STAMP_ID::ETHEREUM,\n        //     0, // does not expire\n        //     [address, 0, 0]\n        // );\n        // storage.stamps.at(context.msg_sender()).insert(&mut stamp);\n\n        // // emit encrypted log of stamp creation\n        // emit_encrypted_log(\n        //     &mut context,\n        //     context.this_address(),\n        //     stamp.header.storage_slot,\n        //     get_public_key(context.msg_sender()),\n        //     stamp.serialize()\n        // );\n    }\n\n    unconstrained fn getScore(owner: AztecAddress) -> StampNote {\n        let options = NoteViewerOptions::new().set_limit(1);\n        let notes = storage.stamps.at(owner.address).view_notes(options);\n        notes[0].unwrap()\n        // let mut sum = 0;\n        // for i in 0..notes.len() {\n        //     if notes[i].is_some() {\n        //         // let stamp = notes[i].unwrap_unchecked();\n        //         sum += 1;\n        //     }\n        // }\n        // sum\n    }\n\n    #[aztec(private)]\n    fn stamp_web2(signature: [u8; 64], msg: [Field; 2]) {\n        // Encode msg to bytes\n        // let encoded_msg = encode_msg(msg);\n        // let Pubkey { x, y } = storage.registered_signer.read();\n        // let valid_signature = dep::std::schnorr::verify_signature(x, y, signature, encoded_msg);\n        // assert(valid_signature, \"Signature could not be verified with provided data\");\n        let mut stamp = StampNote::new(\n            context.msg_sender(),\n            msg[0] as u8,\n            [msg[1], 0, 0]\n        );        \n        storage.stamps.at(context.msg_sender()).insert(&mut stamp);\n        \n        emit_encrypted_log(\n            &mut context,\n            context.this_address(),\n            stamp.header.storage_slot,\n            get_public_key(context.msg_sender()),\n            stamp.serialize()\n        );\n    }\n\n    unconstrained fn encode_msg(msg: [Field; 2]) -> [u8; 33] {\n            let mut bytes: [u8; 33] = [0; 33]; \n            let data = msg[1].to_be_bytes(32);\n            bytes[0] = msg[0] as u8;\n            for i in 0..32 {\n                bytes[i + 1] = data[i];\n            }\n            bytes\n    }\n\n    #[aztec(public)]\n    internal fn initialize(signer_x: Field, signer_y: Field) {\n        storage.registered_signer.write(Pubkey {x: signer_x, y: signer_y});\n    }\n\n    unconstrained fn compute_note_hash_and_nullifier(contract_address: Field, nonce: Field, storage_slot: Field, preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> [Field; 4] {\n        let note_header = NoteHeader::new(contract_address, nonce, storage_slot);\n        note_utils::compute_note_hash_and_nullifier(StampNoteMethods, note_header, preimage)\n    }\n}\n",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/main"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "16": {
        "source": "struct GrumpkinScalar {\n    low: Field,\n    high: Field,\n}\n\nimpl GrumpkinScalar {\n    fn new(low: Field, high: Field) -> Self {\n        // TODO: check that the low and high value fit within the grumpkin modulus\n        GrumpkinScalar { low, high }\n    }\n}\n\nglobal GRUMPKIN_SCALAR_SERIALIZED_LEN: Field = 2;\n\nfn deserialize_grumpkin_scalar(fields: [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN]) -> GrumpkinScalar {\n    GrumpkinScalar { low: fields[0], high: fields[1] }\n}\n\nfn serialize_grumpkin_scalar(scalar: GrumpkinScalar) -> [Field; GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n    [scalar.low, scalar.high]\n}\n",
        "path": "std/grumpkin_scalar"
      },
      "17": {
        "source": "use crate::grumpkin_scalar::GrumpkinScalar;\nuse crate::scalar_mul::fixed_base_embedded_curve;\n\nfn grumpkin_fixed_base(scalar: GrumpkinScalar) -> [Field; 2] {\n    // TODO: this should use both the low and high limbs to do the scalar multiplication\n    fixed_base_embedded_curve(scalar.low, scalar.high)\n}\n",
        "path": "std/grumpkin_scalar_mul"
      },
      "21": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    pub fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    pub fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    pub fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    pub fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    pub fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "32": {
        "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n",
        "path": "std/option"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/abi"
      },
      "36": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/address"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/context"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/log"
      },
      "45": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/lifecycle"
      },
      "46": {
        "source": "use dep::std::option::Option;\nuse crate::constants_gen::{\n    MAX_READ_REQUESTS_PER_CALL,\n    GET_NOTE_ORACLE_RETURN_LENGTH,\n    GET_NOTES_ORACLE_RETURN_LENGTH,\n    MAX_NOTES_PER_PAGE,\n    VIEW_NOTE_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\nuse crate::oracle;\nuse crate::types::vec::BoundedVec;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    let contract_address = context.this_address();\n    assert(header.contract_address == contract_address);\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(\n    fields: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        assert(fields[select.field_index] == select.value, \"Mismatch return note field.\");\n    }\n}\n\nfn check_notes_order<N>(fields_0: [Field; N], fields_1: [Field; N], sorts: BoundedVec<Option<Sort>, N>) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let note = get_note_internal(storage_slot, note_interface);\n\n    check_note_header(*context, storage_slot, note_interface, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let opt_notes = get_notes_internal(storage_slot, note_interface, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let serialize = note_interface.serialize;\n            let fields = serialize(note);\n            check_note_header(*context, storage_slot, note_interface, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_or_nullify(note_interface, note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    };\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n) -> Note {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        0,\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        placeholder_note,\n        placeholder_fields,\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    options: NoteViewerOptions<Note, N>,\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n    let (num_selects, select_by, select_values, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    oracle::notes::get_notes(\n        storage_slot,\n        note_interface,\n        num_selects,\n        select_by,\n        select_values,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        placeholder_opt_notes,\n        placeholder_fields,\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [Field; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            num_selects += 1;\n        };\n    };\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    };\n\n    (num_selects, select_by, select_values, sort_by, sort_order)\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/note_getter"
      },
      "48": {
        "source": "use dep::std::hash::{pedersen, pedersen_with_separator};\nuse crate::constants_gen::{GENERATOR_INDEX__UNIQUE_COMMITMENT, GENERATOR_INDEX__SILOED_COMMITMENT};\n\npub fn compute_inner_hash(storage_slot: Field, note_hash: Field) -> Field {\n    // TODO(#1205) Do we need a generator index here?\n    pedersen([storage_slot, note_hash])[0]\n}\n\npub fn compute_siloed_hash(contract_address: Field, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address, inner_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__SILOED_COMMITMENT)[0]\n}\n\npub fn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_with_separator(inputs, GENERATOR_INDEX__UNIQUE_COMMITMENT)[0]\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/note_hash"
      },
      "52": {
        "source": "use crate::note::{\n    note_hash::{compute_inner_hash, compute_siloed_hash, compute_unique_hash},\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\npub fn compute_inner_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n\n    compute_inner_hash(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let inner_note_hash = compute_inner_note_hash(note_interface, note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\npub fn compute_unique_siloed_note_hash<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    let siloed_note_hash = compute_siloed_note_hash(note_interface, note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_note_hash_for_read_or_nullify<Note, N>(\n    note_interface: NoteInterface<Note, N>,\n    note_with_header: Note,\n) -> Field {\n    let get_header = note_interface.get_header;\n    let header = get_header(note_with_header);\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note_interface, note_with_header)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note_interface, note_with_header)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note_interface, note_with_header)\n    }\n\n}\n\npub fn compute_note_hash_and_nullifier<Note, N, S>(\n    note_interface: NoteInterface<Note, N>,\n    note_header: NoteHeader,\n    preimage: [Field; S],\n) -> [Field; 4] {\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    let mut note = deserialize(arr_copy_slice(preimage, [0; N], 0));\n    set_header(&mut note, note_header);\n\n    let compute_note_hash = note_interface.compute_note_hash;\n    let note_hash = compute_note_hash(note);\n    let inner_note_hash = compute_inner_hash(note_header.storage_slot, note_hash);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let compute_nullifier = note_interface.compute_nullifier;\n    let inner_nullifier = compute_nullifier(note);\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/note/utils"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/arguments"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "60": {
        "source": "use crate::oracle::get_public_key::get_public_key;\nuse crate::types::point::Point;\n\n#[oracle(getSecretKey)]\nfn get_secret_key_oracle(\n    _owner: Point,\n) -> [Field; dep::std::grumpkin_scalar::GRUMPKIN_SCALAR_SERIALIZED_LEN] {\n}\n\nunconstrained fn get_secret_key_internal(owner_public_key: Point) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    dep::std::grumpkin_scalar::deserialize_grumpkin_scalar(get_secret_key_oracle(owner_public_key))\n}\n\npub fn get_secret_key(owner: Field) -> dep::std::grumpkin_scalar::GrumpkinScalar {\n    let owner_public_key = get_public_key(owner);\n    let secret = get_secret_key_internal(owner_public_key);\n\n    // Constrain the owner - Nullifier secret key is currently just the encryption private key so we can constrain\n    // the owner by deriving the public key from the secret key and checking the result.\n    let computed_public_key = dep::std::grumpkin_scalar_mul::grumpkin_fixed_base(secret);\n    assert(owner_public_key.x == computed_public_key[0]);\n    assert(owner_public_key.y == computed_public_key[1]);\n\n    secret\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/get_secret_key"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/logs"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "72": {
        "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\n\n// docs:start:map\nstruct Map<V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<V> Map<V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Map<V> {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map {\n            context,\n            storage_slot,\n            state_var_constructor,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: Field) -> V {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = dep::std::hash::pedersen([self.storage_slot, key])[0];\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/map"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "74": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/set"
      },
      "79": {
        "source": "\nstruct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    len: Field,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0 }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64);\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn push_array<Len>(&mut self, array: [T; Len]) {\n        let newLen = self.len + array.len();\n        assert(newLen as u64 <= MaxLen as u64);\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = newLen;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n\n        let elem = self.storage[self.len - 1];\n        self.len -= 1;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}\n\n#[test]\nfn test_vec_push_pop() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    assert(vec.len == 0);\n    vec.push(2);\n    assert(vec.len == 1);\n    vec.push(4);\n    assert(vec.len == 2);\n    vec.push(6);\n    assert(vec.len == 3);\n    let x = vec.pop();\n    assert(x == 6);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test]\nfn test_vec_push_array() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    assert(vec.len == 2);\n    assert(vec.get(0) == 2);\n    assert(vec.get(1) == 4);\n}\n\n#[test(should_fail)]\nfn test_vec_get_out_of_bound() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2, 4]);\n    let _x = vec.get(2);\n}\n\n#[test(should_fail)]\nfn test_vec_get_not_declared() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    vec.push_array([2]);\n    let _x = vec.get(1);\n}\n\n#[test(should_fail)]\nfn test_vec_get_uninitialized() {\n    let mut vec: BoundedVec<Field, 2> = BoundedVec::new(0);\n    let _x = vec.get(0);\n}\n\n#[test(should_fail)]\nfn test_vec_push_overflow() {\n    let mut vec: BoundedVec<Field, 1> = BoundedVec::new(0);\n    vec.push(1);\n    vec.push(2);\n}\n\n#[test]\nfn test_vec_any() {\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(0);\n    vec.push_array([2, 4, 6]);\n    assert(vec.any(|v| v == 2) == true);\n    assert(vec.any(|v| v == 4) == true);\n    assert(vec.any(|v| v == 6) == true);\n    assert(vec.any(|v| v == 3) == false);\n}\n\n#[test]\nfn test_vec_any_not_default() {\n    let default_value = 1;\n    let mut vec: BoundedVec<Field, 3> = BoundedVec::new(default_value);\n    vec.push_array([2, 4]);\n    assert(vec.any(|v| v == default_value) == false);\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/types/vec"
      },
      "85": {
        "source": "pub fn arr_copy_slice<T, N, M>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: Field,\n) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n\npub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/utils"
      },
      "89": {
        "source": "use dep::aztec::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_siloed_note_hash,\n};\nuse dep::aztec::oracle::get_secret_key::get_secret_key;\n\nglobal STAMP_SERIALIZED_NOTE_LEN: Field = 5;\n\nstruct StampNote {\n    owner: Field,\n    // type of stamp\n    stamp_type: u8,\n    // timestamp of when the stamp was issued\n    // timestamp: Field,\n    // up to 93 bytes of data\n    data: [Field; 3],\n    header: NoteHeader\n}\n\nimpl StampNote {\n    fn new(owner: Field, stamp_type: u8, data: [Field; 3]) -> Self {\n        Self { owner, stamp_type, data, header: NoteHeader::empty() }\n    }\n\n    fn serialize(self) -> [Field; STAMP_SERIALIZED_NOTE_LEN] {\n        [\n            self.owner,\n            self.stamp_type as Field,\n            self.data[0],\n            self.data[1],\n            self.data[2]\n        ]\n    }\n\n    fn deserialize(preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> Self {\n        StampNote {\n            owner: preimage[0],\n            stamp_type: preimage[1] as u8,\n            data: [preimage[2], preimage[3], preimage[4]],\n            header: NoteHeader::empty()\n        }\n    }\n\n    fn compute_note_hash(self) -> Field {\n        dep::std::hash::pedersen(self.serialize())[0]\n    }\n\n    fn compute_nullifier(self) -> Field {\n        let siloed_note_hash = compute_siloed_note_hash(StampNoteMethods, self);\n        let secret = get_secret_key(self.owner);\n        dep::std::hash::pedersen([\n            siloed_note_hash,\n            secret.low,\n            secret.high\n        ])[0]\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n}\n\nfn deserialize(preimage: [Field; STAMP_SERIALIZED_NOTE_LEN]) -> StampNote {\n    StampNote::deserialize(preimage)\n}\n\nfn serialize(note: StampNote) -> [Field; STAMP_SERIALIZED_NOTE_LEN] {\n    note.serialize()\n}\n\nfn compute_note_hash(note: StampNote) -> Field {\n    note.compute_note_hash()\n}\n\nfn compute_nullifier(note: StampNote) -> Field {\n    note.compute_nullifier()\n}\n\nfn get_header(note: StampNote) -> NoteHeader {\n    note.header\n}\n\nfn set_header(note: &mut StampNote, header: NoteHeader) {\n    note.set_header(header)\n}\n\nglobal StampNoteMethods = NoteInterface {\n    deserialize,\n    serialize,\n    compute_note_hash,\n    compute_nullifier,\n    get_header,\n    set_header\n};",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/types/stamp_note"
      },
      "90": {
        "source": "use dep::aztec::hash::sha256_to_field;\n\nmod STAMP_ID {\n    global ETHEREUM: u8 = 1;\n    global ENS: u8 = 2;\n    global GOOGLE: u8 = 3;\n    global DISCORD: u8 = 4;\n    global GITHUB: u8 = 5;\n}\n\npub fn get_ens_stamp_private_content_hash(\n    secret_redemption_hash: Field,\n    name: Field,\n    timestamp: Field,\n    canceller: Field\n) -> Field {\n    // 132 = 32 * 4 + 4\n    let mut hash_bytes: [u8; 132] = [0; 132];\n    let secret_hash_bytes = secret_redemption_hash.to_be_bytes(32);\n    let name_bytes = name.to_be_bytes(32);\n    let timestamp_bytes = timestamp.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    // insert into bytes array\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = name_bytes[i];\n        hash_bytes[i + 68] = timestamp_bytes[i];\n        hash_bytes[i + 100] = canceller_bytes[i];\n    }\n\n    // ethers.id(\"stamp_ens(bytes32,bytes32,uint256,address)\").slice(0, 10)\n    hash_bytes[0] = 0x5e;\n    hash_bytes[1] = 0x8d;\n    hash_bytes[2] = 0x7e;\n    hash_bytes[3] = 0x7e;\n\n    sha256_to_field(hash_bytes)\n}",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/util"
      }
    }
  }
}