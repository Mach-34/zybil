{
  "name": "Zybil",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "H4sIAAAAAAAA/+XdVXNbVxSGYduJ7TLXYWZqJUuypGKaMqeYchM1crlNMeWmaRtmZmZOfmHWO5FnPLnNvtnznplvbN149FjS0YG117rS1tZ2sO3a1h7piHS2fh943HXd4+7W74O3gcdzWz9Lhb5yuVntbRZLxUWF3nqjVimUK42+WrFWrNQqi3trpVKzVq5V6416tVAvlkvNYn+lXuovXNuGDfpbhRvcBj/PjuueZ+HGtmJ7QvPwTMwdCc0jMjEPSWgemYl5aELzqEzMnQnNozMxdyU0j8nE3J3QPDYT87CE5nFC83iheYLQPFFoniQ0TxaapwjNU4XmaULzdKF5htA8U2ieJTTPFprnCM0PCM0PCs0FobkoNPcKzSWhuSw0V4TmPqG5KjTXhOa60PyQ0Pyw0PyI0Pyo0PyY0Py40DxXaH5CaJ4nND8pND8lND8tND8jND8rND8nND8vNL8gNL8oNL8kNL8sNL8iNL8qNM8Xml8Tml8Xmt8Qmt8Umt8Smt8WmhcIze8Ize8Kze8Jze8LzR8IzR8KzR8JzR8LzQuF5kVCc0No/kRoXiw0N4XmfqH5U6H5M6H5c6H5C6H5S6H5K6H5a6H5G6H5W6F5idD8ndD8vdD8g9D8o9D8k9D8s9C8VGj+RWj+VWj+TWj+XWj+Q2j+U2j+S2j+W2heJjT/IzQvF5r/FZr/E5r/F5pXCM0rheZVQvNqoXmN0LxWaF4nNK8XmjcIzRuF5k1C82aheYvQvFVo3iY0bxeadwjNO4XmXULzbqF5j9C8V2jeJzTvF5oPCM0HheZDQvNhofmI0Hw0E/NNCc3HMjHfnNB8PBPzLQnNJzIx35rQfDIT820JzacyMd+e0Hw6E/MdCc1nMjHfmdB8NhPzXQnN5zIx353QfD4T8z0JzRcyMd+b0HwxE/N9Cc2XMjHfn9B8ORNzT0LzlYTmntbfaW+Zh0SGRjojXZHuCOeEnCNxzsAxNMeUHGNxzMF3MN9J7KPZZ/EZ5j3Na9wz6P+5t/VzeGREZGRkVGR0ZExkbGRcZHxkQmRiZFJkcmRKZGpkWmR6ZEZkZmRWZHZkToQZ98x850VkJjgzspkZzQxlZgozY7caYQYrM0mZ0cnMSmY4MtOQGX8DM++YiTYvwswsZkgxU4kZQ8zcYQYNM1mYUcLMDmZYMNOBGQf0/J8foSc8PdLpGU4PbXpK02N5QYQevPSkpUcrPUvp4UlPS3o80vNwYYSeeI0IPdPoIUZPLXpM0XOJHkT05KFHDT1b6GFCTw96XNDzYUmEngCskWfNOGuoWVPMGtulEdZgsiaRNXqsWWMNF2uaWOPDmpdlEdZELI9QM08NOTXV1BhTc0sNKjWZ1ChSs0cNGzVd1DhR80MNDDUh1EhQM8A9dO4pc4+Ve47cg+OeFPdoeE9wDZ9r2lzj5ZrnoQjXxLhGxDUTriFwTs05JudcnINwTM4xKsdsHMPwnc53HPt89oHsE/iMDGxXAR3DARWElwAA",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ens",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "addr",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "consumption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ethkey",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "pubkey_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "pubkey_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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"
    ],
    "fileMap": {
      "1": {
        "source": "// mod storage;\nmod types;\nmod util;\n\ncontract Zybil {\n    use dep::aztec::{\n        context::Context,\n        hash::compute_secret_hash,\n        selector::compute_selector,\n        types::{\n            address::{AztecAddress, EthereumAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods, FIELD_SERIALIZED_LEN\n            },\n        },\n        oracle::get_public_key::get_public_key,\n        log::emit_encrypted_log,\n        state_vars::{map::Map, public_state::PublicState, set::Set}\n    };\n    use crate::{\n        types::{\n            public_key::{ Pubkey, PubkeyMethods, PUBKEY_SERIALIZED_LEN },\n            stamp_note::{ StampNote, StampNoteMethods, STAMP_SERIALIZED_NOTE_LEN }\n        },\n        util::{\n            get_ens_stamp_private_content_hash,\n            STAMP_ID\n        },\n    };\n\n    // Largest possible signed message length\n    global MAX_MSG_LEN = 380;\n\n    mod StorageSlots {\n        global BACKEND_ID = 1;\n        global STAMP_TYPE_ID = 2;\n        global STAMPS_ID = 3;\n        global SIGNER_ID = 4;\n    }\n\n    struct Storage {\n        registered_signer: PublicState<Pubkey, PUBKEY_SERIALIZED_LEN>,\n        stamp_type: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        stamps: Map<Set<StampNote, STAMP_SERIALIZED_NOTE_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                registered_signer: PublicState::new(\n                    context,\n                    StorageSlots::SIGNER_ID,\n                    PubkeyMethods\n                ),\n                stamp_type: Map::new(\n                    context,\n                    StorageSlots::STAMP_TYPE_ID,\n                    |context, slot| PublicState::new(\n                        context,\n                        slot,\n                        FieldSerializationMethods\n                    )\n                ),\n                stamps: Map::new(\n                    context,\n                    StorageSlots::STAMPS_ID,\n                    |context, slot| Set::new(\n                        context,\n                        slot,\n                        StampNoteMethods\n                    )\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n    // fn constructor(signer_x: Field, signer_y: Field) {\n        // Set registered signer\n        // let selector = compute_selector(\"initialize(Field,Field)\");\n        // context.call_public_function(context.this_address(), selector, [signer_x, signer_y]);\n        // set the backend address based on the sender\n        // setup bridge\n        // let selector = compute_selector(\"_initialize((Field))\");\n        // context.call_public_function(context.this_address(), selector, )\n    // }\n\n    #[aztec(private)]\n    fn stamp_ens(\n        redemption_hash: Field,\n        addr: EthereumAddress,\n        timestamp: Field,\n        canceller: EthereumAddress,\n        msg_key: Field,\n        consumption_hash: Field,\n    ) {\n        // todo: constrain to make sure user has proven ownership of eth address\n        // consume L1 to L2 and emit nullifier\n        let content_hash = get_ens_stamp_private_content_hash(\n            redemption_hash,\n            addr.address,\n            timestamp,\n            canceller.address\n        );\n    }\n\n    #[aztec(private)]\n    fn stamp_ethkey(pubkey_x: [u8; 32], pubkey_y: [u8; 32], signature: [u8; 64]) -> Field {\n        // convert msg.sender to [u8] as message to be signed\n        let message = context.msg_sender().to_be_bytes(32);\n\n        // check signature\n        let valid_signature = dep::std::ecdsa_secp256k1::verify_signature(\n            pubkey_x,\n            pubkey_y,\n            signature,\n            message\n        );\n        assert(valid_signature);\n\n        // convert pubkey to EthAddress\n        let mut pubkey: [u8; 64] = [0; 64];\n        for i in 0..32 {\n            pubkey[i] = pubkey_x[i];\n            pubkey[i + 32] = pubkey_y[i];\n        };\n        let pubkeyHash = dep::std::hash::keccak256(pubkey, 64);\n        let mut address: Field = 0;\n        let mut v: Field = 1;\n        for i in 0..20 {\n            let index = 20 - i;\n            address += pubkeyHash[index + 11] as Field * v;\n            v *= 256;\n        }\n\n        // create stamp\n        let mut stamp = StampNote::new(\n            context.msg_sender(),\n            STAMP_ID::ETHEREUM,\n            0, // does not expire\n            [address, 0, 0]\n        );\n        storage.stamps.at(context.msg_sender()).insert(&mut stamp);\n\n        // emit encrypted log of stamp creation\n        emit_encrypted_log(\n            &mut context,\n            context.this_address(),\n            stamp.header.storage_slot,\n            get_public_key(context.msg_sender()),\n            stamp.serialize()\n        );\n    }\n\n    // #[aztec(private)]\n    // fn stamp_web2() {\n        \n    // }\n\n    // #[aztec(public)]\n    // internal fn initialize(signer_x: Field, signer_y: Field) {\n    //     storage.registered_signer.write(Pubkey {x: signer_x, y: signer_y});\n    // }\n\n    // #[aztec(public)]\n    // internal fn valid_signature(signature: [u8; 64], msg: [u8; MAX_MSG_LEN]) -> bool {\n    //     let Pubkey { x, y } = storage.registered_signer.read();\n    //     dep::std::schnorr::verify_signature(x, y, signature, msg)\n    // }\n\n    // unconstrained fn registered_signer() -> Pubkey {\n    //     storage.registered_signer.read()\n    // }\n}\n",
        "path": "/home/jpag/Workground/aztec/zybil/zybil/contracts/l2/src/main"
      },
      "4": {
        "source": "mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n",
        "path": "std/hash"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_PENDING_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    pending_read_requests: [Field; crate::abi::MAX_PENDING_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.pending_read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/abi"
      },
      "36": {
        "source": "use dep::std::hash;\nuse crate::constants_gen::GENERATOR_INDEX__CONTRACT_ADDRESS;\n\npub fn compute_address(pub_key_x: Field, pub_key_y: Field, partial_address: Field) -> Field {\n  hash::pedersen_with_separator([pub_key_x, pub_key_y, partial_address], GENERATOR_INDEX__CONTRACT_ADDRESS)[0]\n}",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/address"
      },
      "40": {
        "source": "use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse crate::types::point::Point;\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    log: [Field; N],\n) {\n    let _ = oracle::logs::emit_encrypted_log(contract_address, storage_slot, encryption_pub_key, log);\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(\n    context: &mut PublicContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(\n    context: &mut PrivateContext,\n    log: T,\n) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/log"
      },
      "45": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::context::{\n    PrivateContext,\n    PublicContext,\n};\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    utils::compute_inner_note_hash,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\nuse crate::constants_gen::EMPTY_NULLIFIED_COMMITMENT;\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    let serialize = note_interface.serialize;\n    let preimage = serialize(*note);\n    assert(notify_created_note(storage_slot, preimage, inner_note_hash) == 0);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    let set_header = note_interface.set_header;\n    set_header(note, header);\n    let inner_note_hash = compute_inner_note_hash(note_interface, *note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_interface: NoteInterface<Note, N>,\n) {\n    let mut nullifier = 0;\n    let mut nullified_commitment: Field = EMPTY_NULLIFIED_COMMITMENT;\n    let compute_nullifier = note_interface.compute_nullifier;\n    nullifier = compute_nullifier(note);\n\n    // We also need the note commitment corresponding to the \"nullifier\"\n    let get_header = note_interface.get_header;\n    let header = get_header(note);\n    // `nullified_commitment` is used to inform the kernel which pending commitment\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // commitment) in which case `nullified_commitment` is not used since the kernel\n    // just siloes and forwards the nullier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note commitment computed in `compute_nullifier`?\n        nullified_commitment = compute_inner_note_hash(note_interface, note);\n    }\n    assert(notify_nullified_note(nullifier, nullified_commitment) == 0);\n\n    context.push_new_nullifier(nullifier, nullified_commitment)\n}",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/note/lifecycle"
      },
      "59": {
        "source": "use crate::types::point::Point;\nuse crate::address::compute_address;\n\n#[oracle(getPublicKey)]\nfn get_public_key_oracle(_address: Field) -> [Field; 3] {}\n\nunconstrained fn get_public_key_internal(address: Field) -> [Field; 3] {\n  get_public_key_oracle(address)\n}\n\npub fn get_public_key(address: Field) -> Point {\n  let result = get_public_key_internal(address);\n  let pub_key_x = result[0];\n  let pub_key_y = result[1];\n  let partial_address = result[2];\n  \n  let calculated_address = compute_address(pub_key_x, pub_key_y, partial_address);\n  assert(calculated_address == address);\n  \n  Point::new(pub_key_x, pub_key_y)\n}\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/get_public_key"
      },
      "64": {
        "source": "use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\nuse crate::utils::arr_copy_slice;\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _preimage: [Field; N],\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    preimage: [Field; N],\n    inner_note_hash: Field,\n) -> Field {\n    notify_created_note_oracle(storage_slot, preimage, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(\n    _nullifier: Field,\n    _inner_note_hash: Field,\n) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    mut placeholder_fields: [Field; S],\n)-> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, return_size, placeholder_fields)\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n) -> [Option<Note>; S] {\n    let fields = get_notes_oracle_wrapper(storage_slot, num_selects, select_by, select_values, sort_by, sort_order, limit, offset, placeholder_fields);\n    let num_notes = fields[0] as u32;\n    let contract_address = fields[1];\n    let deserialize = note_interface.deserialize;\n    let set_header = note_interface.set_header;\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let preimage = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = deserialize(preimage);\n            set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    };\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(\n    _inner_nullifier: Field,\n) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/notes"
      },
      "66": {
        "source": "use crate::types::point::Point;\nuse crate::constants_gen::NUM_FIELDS_PER_SHA256;\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: Field,\n    _storage_slot: Field,\n    _encryption_pub_key: Point,\n    _preimage: [Field; N],\n)  -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: Field,\n    storage_slot: Field,\n    encryption_pub_key: Point,\n    preimage: [Field; N],\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [emit_encrypted_log_oracle(\n        contract_address,\n        storage_slot,\n        encryption_pub_key,\n        preimage,\n    ), 0]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(_contract_address: Field, _event_selector: Field, _message: T)  -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(contract_address: Field, event_selector: Field, message: T) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/oracle/logs"
      },
      "74": {
        "source": "use dep::std::option::Option;\nuse crate::abi::PublicContextInputs;\nuse crate::constants_gen::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_or_nullify,\n};\n\n// docs:start:struct\nstruct Set<Note, N> {\n    context: Context,\n    storage_slot: Field,\n    note_interface: NoteInterface<Note, N>,\n}\n// docs:end:struct\n\nimpl<Note, N> Set<Note, N> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        note_interface: NoteInterface<Note, N>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set {\n            context,\n            storage_slot,\n            note_interface,\n        }\n    }\n    // docs:end:new\n\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(\n            self.context.public.unwrap(),\n            self.storage_slot,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:insert_from_public\n    \n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\");\n    }\n\n    // docs:start:remove\n    pub fn remove(self, note: Note) {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_read_or_nullify(self.note_interface, note);\n        let has_been_read = context.read_requests.any(|r| r == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(\n            context,\n            note,\n            self.note_interface,\n        );\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>,\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(\n            self.context.private.unwrap(),\n            storage_slot,\n            self.note_interface,\n            options,\n        );\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] {\n        view_notes(self.storage_slot, self.note_interface, options)\n    }\n    // docs:end:view_notes\n}\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.9.0/yarn-project/aztec-nr/aztec/src/state_vars/set"
      },
      "90": {
        "source": "use dep::aztec::hash::sha256_to_field;\n\nmod STAMP_ID {\n    global ETHEREUM: u8 = 1;\n    global ENS: u8 = 2;\n    global GOOGLE: u8 = 3;\n    global DISCORD: u8 = 4;\n    global GITHUB: u8 = 5;\n}\n\npub fn get_ens_stamp_private_content_hash(\n    secret_redemption_hash: Field,\n    name: Field,\n    timestamp: Field,\n    canceller: Field\n) -> Field {\n    // 132 = 32 * 4 + 4\n    let mut hash_bytes: [u8; 132] = [0; 132];\n    let secret_hash_bytes = secret_redemption_hash.to_be_bytes(32);\n    let name_bytes = name.to_be_bytes(32);\n    let timestamp_bytes = timestamp.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    // insert into bytes array\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = name_bytes[i];\n        hash_bytes[i + 68] = timestamp_bytes[i];\n        hash_bytes[i + 100] = canceller_bytes[i];\n    }\n\n    // ethers.id(\"stamp_ens(bytes32,bytes32,uint256,address)\").slice(0, 10)\n    hash_bytes[0] = 0x5e;\n    hash_bytes[1] = 0x8d;\n    hash_bytes[2] = 0x7e;\n    hash_bytes[3] = 0x7e;\n\n    sha256_to_field(hash_bytes)\n}",
        "path": "/home/jpag/Workground/aztec/zybil/zybil/contracts/l2/src/util"
      }
    }
  }
}