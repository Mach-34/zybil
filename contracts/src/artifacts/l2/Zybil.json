{
  "name": "Zybil",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signer",
          "type": {
            "kind": "struct",
            "path": "types::public_key::Pubkey",
            "fields": [
              {
                "name": "x",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "y",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "signer_x",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "signer_y",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/+2dCZRkRZWG81X1FhW9Qu8b1fTCJlL1uhEQkQISZJNNNtmEpptN6EZoEAERERERRERERARGHcdxHHXcxm3cxm3cxm3cRsVxHMdxHHdERJwbL+O3/4p+vkMd4p7KPHXjnHsy4ka++L97b+TLly+zu+5vtVpFq9P6xea2tm2YH4mPQ4+vDRf51hrS5OzrEc7+HuGc1COck3uEc0qPcE7tEc5pPcLpeoRzoEc4fY9wTu8Rzhk9wjmzRzhn9Qjn7B7hnNMjnNv1COf2PcI5NyPnIuKcFx/nx8cF8XFhfMRzF8fHJfFxaYxxUhwvE1sutoPYYJxDQlaI7Si2UmyV2GqxNWI7ie0stovYrmK7iT1BbHexJ4rtEdcYFivF1oqtE9tT7Elie4ntLbaP2JPF9hV7ith+Yk8V2z/m7ACxA8UOEmuLHSx2iNjTxA4VO0zscLEjxI4Ue7rYUWJHix0TYxmMsRwrdpzYM8SOFztB7ESxk8ROFnum2Clip4qdJna62BlizxI7U+wssfViZ4ttENsodo7YuWLniZ0vdoHYs8UuFLtIbJPYZrGLk5w/R+wSsUvFtsS52XHuMrHLxZ4rdoXY88SuFLtK7Gqx54tdI/YCsWvFXih2ndiLxK5P1nqx2A1iLxG7UeylYjeJvUzsZrFbxF4udqvYK8RuE3ul2O1ir4pr9cW17hB7deK7U+w1sX9XfHxtfLw7Pr4uPt4TH18fH++Nj/fFx/tDLn2nH641sb+3b2314T7BduTD/BzyYX42+TA/i3yYn0k+zM8gH+ankw/znnyYHyAfz+MR89PIh/mp5MP8FPJhfjL5MD+JfJjvJx/m+8iH+YJ8mG8l+qGNxMehx9mmtLKfa4dCzMMUR6smXr7vlMY7qSYvk2vyx/XAPNcN81xfnscj5nm/YJ73DeZ5/2Ge9ynmeT9jnvc95vn1gXl+HWGeX2+Y59cl5ueSD/PzyIf5+eTD/ALyYX4h+TC/iHyYx3tciGsKjUfi49Dja6UjXbQiGY9QH/qBZakCy5IxsCwllmUKLMvjWotIZ4e8OtW92+VJfBhDyxPDMkUWX6OtoDMqt2hNdWaWwbws1eXgCtIC1yDlHvNziWNF5tzz9RzWxZj5HivrvHFmdeRbMs4snhiWkw/P20GPr3QJX2hNe30FsazMyjI8FFh2HAPLSmJZlZWlc420OvOaYY01xI9Ywe5pfjXFtiYvR7UnV7VG5xRj5jNWYzVWYzVWYzVWYzXWic3qyDc4ziz8+WhHNZbhIV+jrfF5g++9Ye1Jra336IPm8syxhTyn9y7AAK1+es7xA1u53hh9AzQ/qMZanq11Pw/3q9Ae6/28JZlrEe4fT6VcpvcDwNlHDIuyMmx7rwma0Am1xv1Vvo+C+8OYC/vjHcTZLfeE+f4t3zPNvK+q89eShIW/Aw6N75n2KbL4Gu1uujfOr0G+D5f3/NGpybKEBWO+5waGfkUWX6OtoDPm8xv0w3E4D/H9/MHMeeD3H6ybvpdwriYpsvhW/ftYZp2Sc4vWVJPB+BiOwzmX37N3zJyHojX6PWCExtDiXE1WZPE12go6pUtiDq2pJtAPx+EeNN8Xz3xtWNVkZcKCMX9OYAYtFl+jraBTuiTm0JpqAv1wHD4n8fcDGp9RVicsGPNnFDBMVWTxNdoKOqVLYg6tqSb8uXGn2OfPsDtnzkNBOlgXY2hxrqYpsvgabQWd0iUxh9ZUE+iH43aJ/Z2Ib9fMeShIB+tiDC3OlVNk8TXaCjqlS2IOrakmu1Lsu8X+LsT3hMx5KEgH62IMLc7VgCKLr9FW0CldEnNoTTWBfjhu99jfjfiemDkPBelgXYyhxbnyiiy+RltBp3RJzKE11QT64bg9Yn934hvKnIeCdLAuxkNUBzBMV2TxNdoKOqVLYg6tqSbQD8fh9597EF+ZOQ8F6WBdjKHFuZqhyOJrtBV0SpfEHFpTTaAfjlsb+8PEty5zHgrSwboYQ4tzNVORxddoK+iULok5tKaaQD8ct2fsryW+J2XOQ0E6WBdjaHGuZimy+BptBZ3SJTGH1lQT6Ifj9or9PYlv78x5KEgH62IMLc7VbEUWX6OtoFO6JObQmmoC/XDcPrG/F/E9OXMeCtLBuhhDi3M1R5HF12gr6JQuiTm0pppAPxy3b+zvQ3xPyZyHgnSwLsbQ4lxtp8jia7QVdEqXxBxaU02gH47bL/b3Jb6nZs5DQTpYF2Noca62V2TxNdoKOqVLYg6tqSbQD8ftH/v7Ed9I5jwUpIN19080OFcLFFl8jbaCTsm5RWuqCbMcmJdlXWA5YAwsBxLLQXlZqt+rtzOvGdY4mPgRK9g9zbcptoPzclT7/KDW6JxizHzGOrFZHfn2H2cWPh8eoMeyztdoK+iULok5tKZzHdfkkNg/iPielpevqskhCQvG0OJctRVZfI22gk7pkphDa6oJsxyWlWVt9fvFQ8fAchixHJ6VpfO+dQRpgQs6nuZ5HxyRl6Pak4cn8WPMfMZqrMZqrMZqrMZqrMZqrMZqrMZqrMZqrMZqrMZqrMZqrMZqrMZqrMZqrMZqrMaan9WR75BxZvHEcKgay9rq/7lKtRViLl0Sc2hNvxPhmhwZ+4cT39Pz8lU1OTJhwRhanKu2Iouv0VbQKV0Sc2hNNWGWo7OylNXviI4aA8vRxHJMVpbO74iOJS1wQcfTPO+DY/NyVHvymCR+jJnPWI3VWI3VWI3VWI3VWI3VWI3VWI3VWI3VWI3VWI21V1gd+Y4cZxa+F3+UGktZfQ+TaivEXLok5tCa7rNzTY6L/WOI7xl5+aqaHJewYAwtzlVbkcXXaCvolC6JObSmmjDLCXlZqv/b5PgxsJxALCfmZRkKa5xEWuCCjqd53gcn5eWo9uSJSfwYM5+xTmxWR77jxpmFz13H67FU/w9Jqq2gU7ok5tCazktck5Nj/0Tie2ZevqomJycsGEOLc9VWZPE12go6pUtiDq2pJsxyalaWzt+QPmUMLKcSy2lZWTrvW6eTFrig42me98HpeTmqPXlaEj/GzGesxmqsxmqsxmqsxmqsE5vVke/kcWbhzzKnqLF0/t5zqq0Qc+mSmENr+pzCNTkj9k8jvmfl5atqckbCgjG0OFdtRRZfo62gU7ok5tCaasIsZ2Vl6XyOPXMMLGcRy/qsLJ3PsWeT1pnxETqe5nkfnJ2Xo9qT65P4MWY+YzVWYzVWYzVWYzVWY53YrI58Z4wzC3+WOVONpfM5NtVWiLl0ScyhNX1O4ZpsiP31xLcxL19Vkw0JC8bQ4ly1FVl8jbaCTumSmENrqgmznKvAcs4YWM4llvPyslSfY88nLXBBx9M874Pz83JUe/K8JH6Mma9XWB35NowzC7/GztFjKX2NtoaOS2IOren1wzW5IPbPI75n5+WranJBwoIxtDhXbUUWX6OtoFO6JObQmmrCLBcpsFw4BpaLiGVTXpbq/LqZtMAFHU/zvA825+Wo9uSmJH6Mma9XWB35LhhnFn6NXajHUp1fU20NHZfEHFrT64drcnHsbyK+5+Tlq2pyccKCMbQ4V21FFl+jraBTuiTm0JpqAv1w3CWxfzHxXZo5DwXpYF2MocW5aiuy+BptBZ3SJTGH1lQT6IfjtsT+JcR3WeY8FKSDdTGGFufKKbL4Gm0FndIlMYfWVJPLKPbLY38L8T03cx4K0sG6GEOLczWgyOJrtBV0SpfEHFpTTaAfjrsi9i8nvudlzkNBOlgXY2hxrrwii6/RVtApXRJzaE01gX447srYv4L4rsqch4J0sC7GV1EdwDBdkcXXaCvolC6JObSmmkA/HHd17F9JfM/PnIeCdLAuxtDiXM1QZPE12go6pUtiDq2pJtAPx10T+1cT3wsy56EgHayLMbQ4VzMVWXyNtoJO6ZKYQ2uqCfTDcdfG/jXE98LMeShIB+tiDC3O1SxFFl+jraBTcm7RmmoC/XDcdbF/LfG9KHMeCtLBuhhDi3PVVmTxNdoKOqVLYg6tqSbQD8ddH/vXEd+LM+ehIB2sizG0OFdtRRZfo62gU7ok5tCaagL9cNwNsX898b0kcx4K0sG6GEOLc9VWZPE12go6pUtiDq2pJtAPx90Y+zcQ30sz56EgHayLMbQ4V21FFl+jraBTuiTm0JpqAv1w3E2xfyPxvSxzHgrSwboYQ4tz1VZk8TXaCjqlS2IOrakmzHJzXpbqt+C3xLVuIp2XZ85tQTpYF2Nocf5vVmTxNdoKOqVLYg6tqc7QD8fdGvu3EN8rMuehIB2sizG0OFc3K7L4Gm0FndIlMYfWVBPoh+Nui/1bie+VmfNQkA7WxRhanKubFVl8jbaCTumSmENrqgn0w3G3x/5txPeqzHkoSAfrYgwtzlVbkcXXaCvolC6JObSmmkA/HHdH7N9OfK/OnIeCdLAuxtDiXLUVWXyNtoJO6ZKYQ2uqCfTDcXfG/h3E95rMeShIB+tiDC3OVVuRxddoK+iULok5tKaaQD8cd1fs30l8r82ch4J0sC7G0OJctRVZfI22gk7pkphDa6oJ9MNxd8f+XcT3usx5KEgH62IMLc5VW5HF12gr6JQuiTm0pppAPxx3T+zfTXyvz5yHgnSwLsbQ4ly1FVl8jbaCTumSmENrqgn0w3H3xv49xHdf5jwUpIN1MYYW56qtyOJrtBV0Ss4tWlNN7ouP4bj7Y/9e4vurzHkoSAfrYgwtzlVbkcXXaCvolC6JObSmmkA/HPeG2L+f+N6YOQ8F6WBdjKHFuWorsvgabQWd0iUxh9ZUE+iH494U+28gvr/OnIeCdLAuxtDiXLUVWXyNtoJO6ZKYQ2uqCfTDcW+O/TcR399kzkNBOlgXY2hxrtqKLL5GW0GndEnMoTXVBPrhuLfE/puJ728z56EgHayLMbQ4V21FFl+jraBTuiTm0JpqAv1w3Ftj/y3E93eZ81CQDtbFGFqcq7Yii6/RVtApXRJzaE01gX447m2x/1bi+/vMeShIB+tiDC3OVVuRxddoK+iULok5tKaaQD8c9/bYfxvxvSNzHgrSwboYQ4tz1VZk8TXaCjqlS2IOrakm0A/HvTP23058/5A5DwXpYF2MocW5aiuy+BptBZ3SJTGH1lQTZnl3Xpbqbzu8awws7yaW9+Rlqf7N4HtJC1zQ8TTP++C9eTmqPfmeJH6Mmc9YJzarI987x5mFz13v0mOp/rZDqq2gU7ok5tCazktck/fF/nuI7x/z8lU1eV/CgjG0OFdtRRZfo62gU7ok5tCaasIsH8jKUla/g3r/GFg+QCwfzMrSed/6EGmBCzqe5nkffCgvR7UnP5jEjzHzGauxGquxGquxGquxGquxGquxGquxGquxGquxGqux9gqrI9/7xpmF78W/X42lrP5P91RbIebSJTGH1nSfnWvy4dj/IPH9U16+qiYfTlgwhhbnqq3I4mu0FXRKl8QcWlNNmOWjWVk6f5vsI2Ng+SixfCwrS+d7mI+TFrig42me98HH83JUe/JjSfwYM5+xGquxGquxGquxGquxTmxWR74PjzMLf5b5iBpL52+TpdoKMZcuiTm0IhmPUJ9r8onY/xjx/XNevqomn0hYMIYW56qtyOJrtBV0SpfEHFpTTZjlU1lZOp9jPzkGlk8Ry6ezsnQ+x36GtMAFHU/zvA8+k5ej2pOfTuLHmPmM1ViN1ViN1ViN1ViNdWKzOvJ9YpxZ+LPMJ9VYOp9jU22FmEuXxBxa0+cUrslnY//TxPcvefmqmnw2YcEYWpyrtiKLr9FW0CldEnNoTTVhls9nZel8jv3cGFg+TyxfyMrS+Rz7RdICF3Q8zfM++GJejmpPfiGJH2PmM1ZjNVZjNVZjNVZjNdaJzerI99lxZuHPMp9TY+l8jk21FWIuXRJzaE2fU7gmX4r9LxDfv+blq2rypYQFY2hxrtqKLL5GW0GndEnMoTXVhFm+kpel+n/JvjwGlq8Qy1fzslSfY79GWuCCjqd53gdfy8tR7cmvJvFjzHzGOrFZHfm+NM4sfO76sh5L9f+SpdoKOqVLYg6t6bzENfl67H+V+P4tL19Vk68nLBhDi3PVVmTxNdoKOqVLYg6tqSbM8s28LNX71jfGwPJNYvlWXpbqfevbpAUu6Hia533w7bwc1Z78VhI/xsxnrBOb1ZHv6+PMwueub+ixVO9bqbaCTumSmENrOi9xTb4T+98ivn/Py1fV5DsJC8bQ4ly1FVl8jbaCTumSmENrqgmzfE+B5btjYPkesXw/L0v1vvUAaYELOp7meR88kJej2pPfT+LH+AHy9wqrI993xpmFX2Pf1WMpfY22hg7nFq3p9fNAfAzH/SD2v098/5GXr6rJDxIWjKHFuWorsvgabQWd0iUxh9ZUE+iH434Y+z8gvv/MnIeCdLAuxtDiXLUVWXyNtoJO6ZKYQ2uqCfTDcT+K/R8S339lzkNBOlgXY2hxrtqKLL5GW0GndEnMoTXVBPrhuB/H/o+I778z56EgHayLMbQ4V21FFl+jraBTuiTm0JpqAv1w3E9i/8fE9z+Z81CQDtbFGFqcq7Yii6/RVtApXRJzaE01gX447qex/xPi+9/MeShIB+tiDC3OVVuRxddoK+iULok5tKaaQD8c97PY/ynx/V/mPBSkg3Uxhhbnqq3I4mu0FXRKl8QcWlNNoB+O+3ns/4z4fpE5DwXpYF2MocW5aiuy+BrtKeTLpLMurPnLvGtWdQYzWlOdf0nx/SovS3XP4NekBS7oeJqfSxy/zstR7a1fJfFjzHyPlXXeOLN6mu8jlsz1G27aN7+qYZnXRSyzuohlehexuC5imdJFLP1dxLKwi1gWdBHL/C5imdFFLANdxDK1i1gmdRHL3C5imdlFLL6LWKZ1EcvkLmIpxpnFtbb9DONo/ufkwzXyL8jXV7Me3u/x/JDv9X7bdbRjZ50RGkNrgBh+3QUsk7uIZVoXsfguYpnZRSxzu4hlUhexTO0iloEuYpnRRSzzu4hlQRexLOwilv4uYpnSRSyui1imdxHLrC5imddFLH01LL/Jy7KOr9lbxMRthPq/IZbf5mUZCms+mHnNsMbviB+xgt3T/IMU2+/yclQ1/21rdE4xZj5jndis+XXXVv/XEeuG1vQaZ5aHsrJ0Xo+/Jy1wQcfTPNfi93k5qlo8lMSPMfMZq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaa37W/Lpl9fsI1g2t6fcRzPJwVpbO7yP+QFrggo6nea7FH/JyVLV4OIkfY+YzVmM1VmM1VmM1VmM1VmM1VmM1VmM1VmM1VmM1VmPtFVYF3erf2LJuaE33l5nlkbws1f3lP5IWuKDjaZ5r8ce8HFUtHknix5j5jHVis+bXHa6+72Hd0Jpej8zyaFaWzuvxT6QFLuh4muda/CkvR1WLR5P4MWY+YzVWYzVWYzVWYzVWY53YrPl1O9fnrBta0/U5s+CJeVg61+cFiT+aAHma51oUeTk6/ydvkcQfx8xnrMZqrMZqrMZqrMZqrBObVUG3+nt26QV5Mhx1fc4sfXlZquvz/mJbkD6qRX9NLfoVatGX1AJj5usVVgXdat/0jWHfMMskhX0zmcTBNYlqMbmmFpMVajEpqQXGzNcrrI58fa2tPsz3k28K4iDfVKxHvmm0D+Bz0TeVfAPRN418PvoWkG969PHfnpkRfb8l38zoe4h8s6LvYfLNjr5HyDcn+h4l33bIHeVq++QcEHxzk1oG3zyax+P86Bsg3wLaE/AtjL7p5FsUfTPItzj6ZpJvSfTNIt/SGj7UehJxotaj9kb0TSEfaj2VfKj1NPL9udbkQ60HyIccefIhR9PJhxzNIB9yNJN8yNEs8iFHs8mHHM0h3+zo2458c6Jve/JtF31zeW9EH9cef7tlPvnmRd8C8s2PvoXkw2tgEfkWRt9i8i2KviXkWxx9S+l1F2q0PPpH4uPQ42vVe8QOrdGt6T0C+oFlWV6W6j7k0rjWDqSzJK9OdV5dmsSHMbQ8MSxTZPE12vl1yiGOOZw7Bltb9yy0Ru07YlmRN+YysCyi9QdJF1r99JyN8WQSzmXebz0u8/6rXgvY32hNrwW9fVGOei08FhbeO4uzsnT+TsSizGuGNVYQP2IFu6d53iuZ92J1LljcGp3TdC8aq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7Eaq7H2Eivf618+ziyeGPS+dyiHfI22xv3yUd/zxcfw3cWDA1s1l2aOLeSZv48YJAZo9dNzdvZbuR6OXAM0z3siM+vZCjmvvrvBdyBoRTIeof5iii/vdxvlUPhOeyrlclFSB3D2EcOOWRk636+spHihCZ1Qa7wG8DxHff7+dVVetuqcwGwjNIYWf/+6QpHF12jz94whT3gtDFLultXkKe93gMOP6zvA3N/XFUkdRkiDdTPv42HWLaJBA/5+6i/Fj0zoeaGhhmAONVxc8zzuL02O8TS/WDnmRcQxQmNohT06h2JdXMM9n7gxz+8Rmc/BFTefgweJAVr8e5dBYtG47vhLOeTrjsEkZ/lZhqvrjlSbfzOEnIWa3kccmtcI6W9AlhIXePDc9BpukJ6zkI5DjIqvjTI9Dw22tn1t8PlgmK5zzqBzet11Tubf9lSsS/8CK58zNa+5w2/9mIPPmXjO3jEvMyLPysx5cK3R59VWq/l9bCXlJvP7fXVdtJq0wMXXHZifSxyr83JUNVqVxI8x8z1W1nldwLqqhrXu/XaVGmvnd1PMEVrTXltNLDtlZelcM+1M64+QBuvukld3mHVxzQQN+PupfwJdR+yytfvncySYQw3X1DyP+6uSYzzNr1GOeSfiGKExtMJ7wOEU65oa7oXEjXm+dkHd+H1jjUIsq5NYVifMfM9klRpL555Jqs3vpfmvUzrxL2ttbYOtbe9l8D2WZcTF91gm5+Uq+ff0aE3nFuiH38zjd+6Xbtl8yVnnbjzpkvO3bCxoDazblzxyPzyvP/FNbW3LkK0Qc0m4L4pPioFNieIhOPzg38dAw4VE+MF++IF++EF++AF++MF9+IH9XOK8JT6GN69wIRp+MB+KGt40wosuXCSFgocCh80ePmwPtjoXMeENJlwohM0fNmjYnOEFH05q4QW/q9huYk8Q213siWJ7hJyIDYuVYmvF1ontKfYksb3E9hbbR+zJYvuKPUVsP7Gniu0fc3uA2IFiB4m1xQ4WO0TsaWKHih0mdrjYEWJHij1d7Cixo8WOETtW7DixZ4gdL3aC2IliJ4mdLPZMsVPEThU7Tex0sTPEniV2pthZYuvFzhbbILZR7Byxc8XOEztf7AKxZ4tdKHaR2CaxzWIXiz1H7BKxS8W2iF0mdrnYc8WuEHue2JViV4ldLfZ8sWvEXiB2rdgLxa4Te5HY9WIvFrtB7CViN4q9VOwmsZeJ3dzq1PnlYreKvULsNrFXit0u9iqxO8ReLXan2GvE7hJ7rdjdYq8Tu0fs9WL3tjofkO5vbd30vPn3iicl/EOOwzZt2HjF4ObLtgxuPmdw/ebLNm249P8B0PXQWFwCAgA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ens",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "addr",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "consumption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ethkey",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "pubkey_x",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "pubkey_y",
          "type": {
            "kind": "array",
            "length": 32,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "valid_signature",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "msg",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "boolean"
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJztnM1OGzEUhd9l1hHy9b/zKlUXqKUSEoKqsEN5d1LB2Knj+IrWPTczmhUgeTSfD8Png+PkdXp4+nb7cv/0+DztXycz7b+8Ts8/bx9///T8cvvrZdqr3XT3+P349bCbftw/3E17OuzORpExyn+MPH6vYx5tXGu4JUfzcKuNPR3+dTfZqyFxQBJDNpNYpSoS3yLRNt9C28TxHIdkHu1Pphr/IpkA5+nnEwfwJHvy+3KnPMcbpAE3iNS5Aal/v4Mx5ZGz2jORmuhiHp4S1UCEBrKUdHnmVKqB9LUBNZ0pCdRUpyRQ06CSQANEOhZogEnHAg1Q6VigAeodCqThpuaA8KbWJhUg52sgvKkZILypGSC8qRkgvKkZILypGSC8qRkgvKkZILyp+0AGb2oGSMDUSWUgo0INJGDqPpCAqftAAqbuAwmYug8kYOo+kICp+0ACpu4DCZi6C2QFTN0Hwps6qLLDFXS9HWPxpmaA8KZmgPCmZoDwpmaA8KZmgPCmZoDwpmaA8KbuAzm8qRkgAVP7snSEEGsgAVP3gQRM3QcSMHUfSMDUfSABU/eBBEzdBxIwdR9IwNRdIC9g6j4Q3tRRl6UjWl0D4U3NAOFNzQDhTc0A4U3NAOFNzQDhTc0A4U3NAOFN3QcKeFMzQHBTuxDyS5wukqmB4KZ20VABivVaFuCmdolcBkpnLy0EuKm9CTkhb/VZQnBTe2vzcO9U/Y9igJvaO0oFKJ79lcFN7b3KBc37VJ9BC3BT+0AmA4VYn2wIcFP7qMuvLFrVH+7NbFHvCrtvDXVGzaftnLMn283v5xfhK4DUROEryycnGubn0afYnyipVI74qmT+OJN6PtykMPv7OFtT5wJf4P5fLkRlw47IUT+XFGhe+VOk+qBxhK+zC8kFv9wvIxd861hGLvjys4xc8B1sGbngq+Aycrn2RiqUS7r2AiuVy4r67tBctr7bzmXru+1ctr7bzmXru+1ctr7bzmXru+1c1tR3tc0b86RDYHKh/MbnpKOvc1lT3x2YC6k1Fd6hwayp8Q4NZk2Vd2gwa+q8Q4NZU+kdGsyaWu/QYNZUe4cGs6beOzSYrfheCGZrvu1g8J9UtJRgtuZ7IZit+V4IZmu+F4JZU/MtG09E5ztPhP+QrM/N1dn53FKw9nSuR/h40yyclN9brak8CM6+L6w3zcrhaX58gi7XeP1xTXM1Zq5pr1TcRU2LX77ocHgDJ+4P0A==",
      "",
      "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",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "// mod storage;\nmod types;\nmod util;\n\ncontract Zybil {\n    use dep::aztec::{\n        context::Context,\n        hash::compute_secret_hash,\n        selector::compute_selector,\n        types::{\n            address::{AztecAddress, EthereumAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods, FIELD_SERIALIZED_LEN\n            },\n        },\n        oracle::get_public_key::get_public_key,\n        log::emit_encrypted_log,\n        state_vars::{map::Map, public_state::PublicState, set::Set}\n    };\n    use crate::{\n        types::{\n            public_key::{ Pubkey, PubkeyMethods, PUBKEY_SERIALIZED_LEN },\n            stamp_note::{ StampNote, StampNoteMethods, STAMP_SERIALIZED_NOTE_LEN }\n        },\n        util::{\n            get_ens_stamp_private_content_hash,\n            STAMP_ID\n        },\n    };\n\n\n    // Largest possible signed message length\n    global MAX_MSG_LEN = 380;\n\n\n    mod StorageSlots {\n        global BACKEND_ID = 1;\n        global STAMP_TYPE_ID = 2;\n        global STAMPS_ID = 3;\n        global SIGNER_ID = 4;\n    }\n\n    struct Storage {\n        registered_signer: PublicState<Pubkey, PUBKEY_SERIALIZED_LEN>,\n        stamp_type: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        stamps: Map<Set<StampNote, STAMP_SERIALIZED_NOTE_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                registered_signer: PublicState::new(\n                    context,\n                    StorageSlots::SIGNER_ID,\n                    PubkeyMethods\n                ),\n                stamp_type: Map::new(\n                    context,\n                    StorageSlots::STAMP_TYPE_ID,\n                    |context, slot| PublicState::new(\n                        context,\n                        slot,\n                        FieldSerializationMethods\n                    )\n                ),\n                stamps: Map::new(\n                    context,\n                    StorageSlots::STAMPS_ID,\n                    |context, slot| Set::new(\n                        context,\n                        slot,\n                        StampNoteMethods\n                    )\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(signer: Pubkey) {\n        // Set registered signer\n        let selector = compute_selector(\"initialize(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [signer.x, signer.y]);\n        // set the backend address based on the sender\n        // setup bridge\n        // let selector = compute_selector(\"_initialize((Field))\");\n        // context.call_public_function(context.this_address(), selector, )\n    }\n\n    #[aztec(private)]\n    fn stamp_ens(\n        redemption_hash: Field,\n        addr: EthereumAddress,\n        timestamp: Field,\n        canceller: EthereumAddress,\n        msg_key: Field,\n        consumption_hash: Field,\n    ) {\n        // todo: constrain to make sure user has proven ownership of eth address\n        // consume L1 to L2 and emit nullifier\n        let content_hash = get_ens_stamp_private_content_hash(\n            redemption_hash,\n            addr.address,\n            timestamp,\n            canceller.address\n        );\n    }\n\n    /**\n     * Generate a stamp for an Ethereum address by proving a signature over the sender's Aztec Address\n     *\n     * @param pubkey_x: the X coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param pubkey_y: the Y coordinate of the full public key for an secp256k1 key (Ethereum)\n     * @param signature: the signature on the sender's aztec address by given pubkey\n     */\n    #[aztec(private)]\n    fn stamp_ethkey(pubkey_x: [u8; 32], pubkey_y: [u8; 32], signature: [u8; 64]) {\n        // convert msg.sender to [u8] as message to be signed\n        let message = context.msg_sender().to_be_bytes(32);\n\n        // check signature\n        let valid_signature = dep::std::ecdsa_secp256k1::verify_signature(\n            pubkey_x,\n            pubkey_y,\n            signature,\n            message\n        );\n        assert(valid_signature);\n\n        // convert pubkey to EthAddress\n        let mut pubkey: [u8; 64] = [0; 64];\n        for i in 0..32 {\n            pubkey[i] = pubkey_x[i];\n            pubkey[i + 32] = pubkey_y[i];\n        };\n        let pubkeyHash = dep::std::hash::keccak256(pubkey, 64);\n        let mut address: Field = 0;\n        let mut v: Field = 1;\n        for i in 0..20 {\n            let index = 20 - i;\n            address += pubkeyHash[index + 11] as Field * v;\n            v *= 256;\n        }\n\n        // create stamp\n        // let mut stamp = StampNote::new(\n        //     context.msg_sender(),\n        //     STAMP_ID::ETHEREUM,\n        //     0, // does not expire\n        //     [address, 0, 0]\n        // );\n        // storage.stamps.at(context.msg_sender()).insert(&mut stamp);\n\n        // // emit encrypted log of stamp creation\n        // emit_encrypted_log(\n        //     &mut context,\n        //     context.this_address(),\n        //     stamp.header.storage_slot,\n        //     get_public_key(context.msg_sender()),\n        //     stamp.serialize()\n        // );\n    }\n\n    // #[aztec(private)]\n    // fn stamp_web2(signature: [u8; 64], msg: [u8; MAX_MSG_LEN]) {\n    //     // Ensure signature is valid before storing stamp\n    //     let Pubkey { x, y } = storage.registered_signer.read();\n    //     let valid_signature = schnorr::verify_signature(x, y, signature, msg);\n    //     assert(valid_signature, \"Invalid signature\");\n\n\n\n    //     let note = StampNote::new(\n    //         context.msg_sender(),\n    //         0, // TODO\n    //         [0, 0, 0]\n    //     );        \n    //     note.insert()\n    // }\n\n\n    unconstrained fn valid_signature(signature: [u8; 64], msg: [Field; 2]) -> bool {\n        let Pubkey { x, y } = storage.registered_signer.read();\n        let mut bytes: [u8; 33] = [0; 33]; \n        let data = msg[1].to_be_bytes(32);\n        bytes[0] = msg[0] as u8;\n        for i in 0..32 {\n            bytes[i + 1] = data[i];\n        }\n        dep::std::schnorr::verify_signature(x, y, signature, bytes)\n    }\n\n    #[aztec(public)]\n    internal fn initialize(signer_x: Field, signer_y: Field) {\n        storage.registered_signer.write(Pubkey {x: signer_x, y: signer_y});\n    }\n\n    // unconstrained fn registered_signer() -> Pubkey {\n    //     storage.registered_signer.read()\n    // }\n}\n",
        "path": "/home/jpag/Workground/aztec/zybil/contracts/l2/src/main"
      },
      "21": {
        "source": "\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/abi"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/context"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/arguments"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "88": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nglobal PUBKEY_SERIALIZED_LEN: Field = 2;\n\nstruct Pubkey {\n    x: Field,\n    y: Field\n}\n\nimpl Pubkey {\n    fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    fn deserialize(preimage: [Field; PUBKEY_SERIALIZED_LEN]) -> Self {\n        Self { x: preimage[0], y: preimage[1] }\n    }\n\n    fn serialize(self) -> [Field; PUBKEY_SERIALIZED_LEN] {\n        [\n         self.x,\n         self.y   \n        ]\n    }\n}\n\nfn deserialize(preimage: [Field; PUBKEY_SERIALIZED_LEN]) -> Pubkey {\n    Pubkey::deserialize(preimage)\n}\n\nfn serialize(pubkey: Pubkey) -> [Field; PUBKEY_SERIALIZED_LEN] {\n    pubkey.serialize()\n}\n\n\n\nglobal PubkeyMethods = TypeSerializationInterface {\n    deserialize,\n    serialize\n};",
        "path": "/home/jpag/Workground/aztec/zybil/contracts/l2/src/types/public_key"
      },
      "90": {
        "source": "use dep::aztec::hash::sha256_to_field;\n\nmod STAMP_ID {\n    global ETHEREUM: u8 = 1;\n    global ENS: u8 = 2;\n    global GOOGLE: u8 = 3;\n    global DISCORD: u8 = 4;\n    global GITHUB: u8 = 5;\n}\n\npub fn get_ens_stamp_private_content_hash(\n    secret_redemption_hash: Field,\n    name: Field,\n    timestamp: Field,\n    canceller: Field\n) -> Field {\n    // 132 = 32 * 4 + 4\n    let mut hash_bytes: [u8; 132] = [0; 132];\n    let secret_hash_bytes = secret_redemption_hash.to_be_bytes(32);\n    let name_bytes = name.to_be_bytes(32);\n    let timestamp_bytes = timestamp.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    // insert into bytes array\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = name_bytes[i];\n        hash_bytes[i + 68] = timestamp_bytes[i];\n        hash_bytes[i + 100] = canceller_bytes[i];\n    }\n\n    // ethers.id(\"stamp_ens(bytes32,bytes32,uint256,address)\").slice(0, 10)\n    hash_bytes[0] = 0x5e;\n    hash_bytes[1] = 0x8d;\n    hash_bytes[2] = 0x7e;\n    hash_bytes[3] = 0x7e;\n\n    sha256_to_field(hash_bytes)\n}",
        "path": "/home/jpag/Workground/aztec/zybil/contracts/l2/src/util"
      }
    }
  }
}