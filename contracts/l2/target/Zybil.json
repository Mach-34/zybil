{
  "name": "Zybil",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ens",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "secret_redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "addr",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_consumption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "eJyrVsrJT04syczPK1ayqq6tBQAz9wY7",
      "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N6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pbN6pbN6pbN6pbN2r9k9l4utd260Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160YN60YN60YN60YN60aNF91rh3WjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjpnWjpnWjpnWjpnWj5ovutdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6Uc/LwlErn262K5+utiuf7rYrny63K59utyufrrcrn+63K58uuCufbrjPyxJSK5/uuCufLrkrn265K5+uuSuf7rkrny66K59uuiufrrorn+66z8tiUiufbrsrn667K5/uuyufLrwrn268K5+uvCuf7rwrny69K59uvc/LslIrn+69K58uviufbr4rn66+K5/uviufLr8rn26/K5+uvysf778WmFr5eP+1xNTKx/uvRaZWPt5/LTO18vH+a6GplY/3X0tNrXy8/1psauXj/ddyUysf778WnFr5eP+15NTKx/uvRadWPt5/LTu18vH+a+GplY/3X0tPrXy8/1p8auXj/dfyUysf778WoFr5eP+1BNXKx/uvRahWPt5/LUO18vH+ayGqlY/3X0tRrXy8/1qMauXj/ddyVCsf778WpFr5eP+1JNXKx/uvRalWPt5/LUu18vH+a2GqlY/3X0tTrXy7/z4Wp1r5dv99LE+18u3++7zs/vtYoWrl2/33sUbVyrf772OVquexTNXKt/vvY6GqlW/338dSVSvf7r+PxapWvt1/H8tVrXy7/z4WrFr5dv99LFm18u3++1i0auXb/fexbNXKt/vvY+GqlW/338fSVSvf7r+PxatWvt1/H8tXrXy7/z4WsFr5dv99LGG18vH+axGrlY/3X8tYrXy8/1rIauXj/ddSVisf778Ws1r5eP+1nNXKx/uvBa1WPt5/LWm18vH+a1GrlY/3X8tarXy8/1rYauXj/dfSVisf778Wt1r5eP+1vNXKx/uvBa5WPt5/LXG18vH+a5GrlY/3X8tcrXy8/1roauXj/ddSVysf778Wu1r5eP+13NXKx/uvBa9WPt5/LXm18vH+a9GrlY/3X8terXy8/1r4auXj/dfSVysf778Wv1r5eP+1/NXKt/tvwv5Vwv5Vwv5Vwv5Vetn9N2H/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmP/KmP/KmP/KmP/Kr/s/puxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf1Wwf1Wwf1Wwf1Wwf1Vedv8t2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L+q2L+q2L+q2L+q2L+qL7v/VuxfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVelf/frrfwMjCj+E"
    ],
    "fileMap": {
      "21": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    pub fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    pub fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    pub fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    pub fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    pub fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/home/jpag/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/abi"
      },
      "90": {
        "source": "use dep::aztec::hash::sha256_to_field;\n\npub fn get_ens_stamp_private_content_hash(\n    secret_redemption_hash: Field,\n    name: Field,\n    timestamp: Field,\n    canceller: Field\n) -> Field {\n    // 132 = 32 * 4 + 4\n    let mut hash_bytes: [u8; 132] = [0; 132];\n    let secret_hash_bytes = secret_redemption_hash.to_be_bytes(32);\n    let name_bytes = name.to_be_bytes(32);\n    let timestamp_bytes = timestamp.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    // insert into bytes array\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = name_bytes[i];\n        hash_bytes[i + 68] = timestamp_bytes[i];\n        hash_bytes[i + 100] = canceller_bytes[i];\n    }\n\n    // ethers.id(\"stamp_ens(bytes32,bytes32,uint256,address)\").slice(0, 10)\n    hash_bytes[0] = 0x5e;\n    hash_bytes[1] = 0x8d;\n    hash_bytes[2] = 0x7e;\n    hash_bytes[3] = 0x7e;\n\n    sha256_to_field(hash_bytes)\n}",
        "path": "/home/jpag/Workground/aztec/zybil/zybil/contracts/l2/src/util"
      }
    }
  }
}