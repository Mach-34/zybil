{
  "name": "Zybil",
  "functions": [
    {
      "name": "constructor",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "signer",
          "type": {
            "kind": "struct",
            "path": "types::public_key::Pubkey",
            "fields": [
              {
                "name": "x",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "y",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "initialize",
      "functionType": "open",
      "isInternal": true,
      "parameters": [
        {
          "name": "signer_x",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "signer_y",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "aztec::abi::PublicCircuitPublicInputs",
          "fields": [
            {
              "name": "call_context",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::CallContext",
                "fields": [
                  {
                    "name": "msg_sender",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "storage_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "portal_contract_address",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "function_selector",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "is_delegate_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_static_call",
                    "type": {
                      "kind": "boolean"
                    }
                  },
                  {
                    "name": "is_contract_deployment",
                    "type": {
                      "kind": "boolean"
                    }
                  }
                ]
              }
            },
            {
              "name": "args_hash",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "return_values",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "contract_storage_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageUpdateRequest",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "contract_storage_read",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "aztec::abi::ContractStorageRead",
                  "fields": [
                    {
                      "name": "storage_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "public_call_stack",
              "type": {
                "kind": "array",
                "length": 4,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_commitments",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_log_preimages_length",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "block_data",
              "type": {
                "kind": "struct",
                "path": "aztec::abi::HistoricBlockData",
                "fields": [
                  {
                    "name": "private_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "nullifier_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "contract_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "l1_to_l2_messages_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "blocks_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "public_data_tree_root",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "global_variables_hash",
                    "type": {
                      "kind": "field"
                    }
                  }
                ]
              }
            },
            {
              "name": "prover_address",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "registered_signer",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [],
      "returnTypes": [
        {
          "kind": "struct",
          "path": "types::public_key::Pubkey",
          "fields": [
            {
              "name": "x",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "y",
              "type": {
                "kind": "field"
              }
            }
          ]
        }
      ],
      "bytecode": "H4sIAAAAAAAA/7VUSw6CMBB9baFQTbyCS7dIPABn8AYkEpcm6v1jiJ3wKBM3trNp6Xzem5cZHACDrzksZululLdTPD29DfHs/jRPmLlq1sQ1KH0GRYdDzLF5uVz22GrrCTcTztlgbQPdndI36M0p+tgkd9b0SP5KyZHYSonj3usCvTPOQN+CtSMOFXHxebl0c40GiznCEh7CqSFfm1kT0T/l0RIPwQ90hkS3EGORxFsl11FtiS8w632BGep5VsV+7VRNesqOv96P53ifrtN4M1QiXRX+tfKd11TGhVdJYsXXYEsx6/xAIWqwJv0BWDvWSlQGAAA=",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "stamp_ens",
      "functionType": "secret",
      "isInternal": false,
      "parameters": [
        {
          "name": "secret_redemption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "addr",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "timestamp",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "canceller",
          "type": {
            "kind": "struct",
            "path": "aztec::types::address::EthereumAddress",
            "fields": [
              {
                "name": "address",
                "type": {
                  "kind": "field"
                }
              }
            ]
          },
          "visibility": "private"
        },
        {
          "name": "msg_key",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        },
        {
          "name": "secret_consumption_hash",
          "type": {
            "kind": "field"
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [],
      "bytecode": "",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    },
    {
      "name": "valid_signature",
      "functionType": "unconstrained",
      "isInternal": false,
      "parameters": [
        {
          "name": "signature",
          "type": {
            "kind": "array",
            "length": 64,
            "type": {
              "kind": "integer",
              "sign": "unsigned",
              "width": 8
            }
          },
          "visibility": "private"
        },
        {
          "name": "msg",
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "field"
            }
          },
          "visibility": "private"
        }
      ],
      "returnTypes": [
        {
          "kind": "boolean"
        }
      ],
      "bytecode": "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",
      "verificationKey": "0000000200000800000000740000000f00000003515f3109623eb3c25aa5b16a1a79fd558bac7a7ce62c4560a8c537c77ce80dd339128d1d37b6582ee9e6df9567efb64313471dfa18f520f9ce53161b50dbf7731bc5f900000003515f322bc4cce83a486a92c92fd59bd84e0f92595baa639fc2ed86b00ffa0dfded2a092a669a3bdb7a273a015eda494457cc7ed5236f26cee330c290d45a33b9daa94800000003515f332729426c008c085a81bd34d8ef12dd31e80130339ef99d50013a89e4558eee6d0fa4ffe2ee7b7b62eb92608b2251ac31396a718f9b34978888789042b790a30100000003515f342be6b6824a913eb7a57b03cb1ee7bfb4de02f2f65fe8a4e97baa7766ddb353a82a8a25c49dc63778cd9fe96173f12a2bc77f3682f4c4448f98f1df82c75234a100000003515f351f85760d6ab567465aadc2f180af9eae3800e6958fec96aef53fd8a7b195d7c000c6267a0dd5cfc22b3fe804f53e266069c0e36f51885baec1e7e67650c62e170000000c515f41524954484d455449430d9d0f8ece2aa12012fa21e6e5c859e97bd5704e5c122064a66051294bc5e04213f61f54a0ebdf6fee4d4a6ecf693478191de0c2899bcd8e86a636c8d3eff43400000003515f43224a99d02c86336737c8dd5b746c40d2be6aead8393889a76a18d664029096e90f7fe81adcc92a74350eada9622ac453f49ebac24a066a1f83b394df54dfa0130000000c515f46495845445f42415345060e8a013ed289c2f9fd7473b04f6594b138ddb4b4cf6b901622a14088f04b8d2c83ff74fce56e3d5573b99c7b26d85d5046ce0c6559506acb7a675e7713eb3a00000007515f4c4f4749430721a91cb8da4b917e054f72147e1760cfe0ef3d45090ac0f4961d84ec1996961a25e787b26bd8b50b1a99450f77a424a83513c2b33af268cd253b0587ff50c700000003515f4d05dbd8623b8652511e1eb38d38887a69eceb082f807514f09e127237c5213b401b9325b48c6c225968002318095f89d0ef9cf629b2b7f0172e03bc39aacf6ed800000007515f52414e474504b57a3805e41df328f5ca9aefa40fad5917391543b7b65c6476e60b8f72e9ad07c92f3b3e11c8feae96dedc4b14a6226ef3201244f37cfc1ee5b96781f48d2b000000075349474d415f3125001d1954a18571eaa007144c5a567bb0d2be4def08a8be918b8c05e3b27d312c59ed41e09e144eab5de77ca89a2fd783be702a47c951d3112e3de02ce6e47c000000075349474d415f3223994e6a23618e60fa01c449a7ab88378709197e186d48d604bfb6931ffb15ad11c5ec7a0700570f80088fd5198ab5d5c227f2ad2a455a6edeec024156bb7beb000000075349474d415f3300cda5845f23468a13275d18bddae27c6bb189cf9aa95b6a03a0cb6688c7e8d829639b45cf8607c525cc400b55ebf90205f2f378626dc3406cc59b2d1b474fba000000075349474d415f342d299e7928496ea2d37f10b43afd6a80c90a33b483090d18069ffa275eedb2fc2f82121e8de43dc036d99b478b6227ceef34248939987a19011f065d8b5cef5c0000000010000000000000000100000002000000030000000400000005000000060000000700000008000000090000000a0000000b0000000c0000000d0000000e0000000f"
    }
  ],
  "events": [],
  "debug": {
    "debugSymbols": [
      "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",
      "",
      "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N6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pZN6pbN6pbN6pbN6pbN2r9k9l4utd260Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160Z160YN60YN60YN60YN60aNF91rh3WjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjhnWjpnWjpnWjpnWjpnWj5ovutdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6UdO6Uc/LwlErn262K5+utiuf7rYrny63K59utyufrrcrn+63K58uuCufbrjPyxJSK5/uuCufLrkrn265K5+uuSuf7rkrny66K59uuiufrrorn+66z8tiUiufbrsrn667K5/uuyufLrwrn268K5+uvCuf7rwrny69K59uvc/LslIrn+69K58uviufbr4rn66+K5/uviufLr8rn26/K5+uvysf778WmFr5eP+1xNTKx/uvRaZWPt5/LTO18vH+a6GplY/3X0tNrXy8/1psauXj/ddyUysf778WnFr5eP+15NTKx/uvRadWPt5/LTu18vH+a+GplY/3X0tPrXy8/1p8auXj/dfyUysf778WoFr5eP+1BNXKx/uvRahWPt5/LUO18vH+ayGqlY/3X0tRrXy8/1qMauXj/ddyVCsf778WpFr5eP+1JNXKx/uvRalWPt5/LUu18vH+a2GqlY/3X0tTrXy7/z4Wp1r5dv99LE+18u3++7zs/vtYoWrl2/33sUbVyrf772OVquexTNXKt/vvY6GqlW/338dSVSvf7r+PxapWvt1/H8tVrXy7/z4WrFr5dv99LFm18u3++1i0auXb/fexbNXKt/vvY+GqlW/338fSVSvf7r+PxatWvt1/H8tXrXy7/z4WsFr5dv99LGG18vH+axGrlY/3X8tYrXy8/1rIauXj/ddSVisf778Ws1r5eP+1nNXKx/uvBa1WPt5/LWm18vH+a1GrlY/3X8tarXy8/1rYauXj/dfSVisf778Wt1r5eP+1vNXKx/uvBa5WPt5/LXG18vH+a5GrlY/3X8tcrXy8/1roauXj/ddSVysf778Wu1r5eP+13NXKx/uvBa9WPt5/LXm18vH+a9GrlY/3X8terXy8/1r4auXj/dfSVysf778Wv1r5eP+1/NXKt/tvwv5Vwv5Vwv5Vwv5Vetn9N2H/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmH/KmP/KmP/KmP/KmP/Kr/s/puxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf5Wxf1Wwf1Wwf1Wwf1Wwf1Vedv8t2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L8q2L+q2L+q2L+q2L+q2L+qL7v/VuxfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVexfVelf/fbbfwN7mWmE",
      ""
    ],
    "fileMap": {
      "1": {
        "source": "mod types;\nmod util;\n\ncontract Zybil {\n    use dep::aztec::{\n        context::Context,\n        hash::compute_secret_hash,\n        selector::compute_selector,\n        state_vars::{map::Map, public_state::PublicState, set::Set},\n        types::{\n            address::{AztecAddress, EthereumAddress},\n            type_serialization::field_serialization::{\n                FieldSerializationMethods, FIELD_SERIALIZED_LEN\n            }\n        },\n    };\n    use crate::{\n        types::{\n            public_key::{ Pubkey, PubkeyMethods, PUBKEY_SERIALIZED_LEN },\n            stamp_note::{ StampNote, StampNoteMethods, STAMP_SERIALIZED_NOTE_LEN }\n        },\n        util::get_ens_stamp_private_content_hash\n    };\n    use dep::std::{\n        option::Option,\n        schnorr\n    };\n\n\n    // Largest possible signed message length\n    global MAX_MSG_LEN = 380;\n\n\n    mod StorageSlots {\n        global BACKEND_ID = 1;\n        global STAMP_TYPE_ID = 2;\n        global STAMPS_ID = 3;\n        global SIGNER_ID = 4;\n    }\n\n    struct Storage {\n    // backend: PublicState<AddressNote, ADDRESS_NOTE_LEN>,\n        registered_signer: PublicState<Pubkey, PUBKEY_SERIALIZED_LEN>,\n        stamp_type: Map<PublicState<Field, FIELD_SERIALIZED_LEN>>,\n        stamps: Map<Set<StampNote, STAMP_SERIALIZED_NOTE_LEN>>\n    }\n\n    impl Storage {\n        fn init(context: Context) -> pub Self {\n            Storage {\n                // backend: PublicState::new(\n                //     context,\n                //     StorageSlots::BACKEND_ID,\n                //     AddressNoteMethods\n                // ),\n                registered_signer: PublicState::new(\n                    context,\n                    StorageSlots::SIGNER_ID,\n                    PubkeyMethods\n                ),\n                stamp_type: Map::new(\n                    context,\n                    StorageSlots::STAMP_TYPE_ID,\n                    |context, slot| PublicState::new(\n                        context,\n                        slot,\n                        FieldSerializationMethods\n                    )\n                ),\n                stamps: Map::new(\n                    context,\n                    StorageSlots::STAMPS_ID,\n                    |context, slot| Set::new(\n                        context,\n                        slot,\n                        StampNoteMethods\n                    )\n                ),\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor(signer: Pubkey) {\n        // Set registered signer\n        let selector = compute_selector(\"initialize(Field,Field)\");\n        context.call_public_function(context.this_address(), selector, [signer.x, signer.y]);\n        // set the backend address based on the sender\n        // setup bridge\n        // let selector = compute_selector(\"_initialize((Field))\");\n        // context.call_public_function(context.this_address(), selector, )\n    }\n\n    #[aztec(private)]\n    fn stamp_ens(\n        secret_redemption_hash: Field,\n        addr: EthereumAddress,\n        timestamp: Field,\n        canceller: EthereumAddress,\n        msg_key: Field,\n        secret_consumption_hash: Field,\n    ) {\n        // todo: constrain to make sure user has proven ownership of eth address\n        // consume L1 to L2 and emit nullifier\n        let content_hash = get_ens_stamp_private_content_hash(\n            secret_redemption_hash,\n            addr.address,\n            timestamp,\n            canceller.address\n        );\n    }\n\n    // #[aztec(private)]\n    // fn stamp_web2(signature: [u8; 64], msg: [u8; MAX_MSG_LEN]) {\n    //     // Ensure signature is valid before storing stamp\n    //     let Pubkey { x, y } = storage.registered_signer.read();\n    //     let valid_signature = schnorr::verify_signature(x, y, signature, msg);\n    //     assert(valid_signature, \"Invalid signature\");\n\n\n\n    //     let note = StampNote::new(\n    //         context.msg_sender(),\n    //         0, // TODO\n    //         [0, 0, 0]\n    //     );        \n    //     note.insert()\n    // }\n\n\n    unconstrained fn valid_signature(signature: [u8; 64], msg: [Field; 2]) -> bool {\n        let Pubkey { x, y } = storage.registered_signer.read();\n        let mut bytes: [u8; 33] = [0; 33]; \n        let data = msg[1].to_be_bytes(32);\n        bytes[0] = msg[0] as u8;\n        for i in 0..32 {\n            bytes[i + 1] = data[i];\n        }\n        schnorr::verify_signature(x, y, signature, bytes)\n    }\n\n    #[aztec(public)]\n    internal fn initialize(signer_x: Field, signer_y: Field) {\n        storage.registered_signer.write(Pubkey {x: signer_x, y: signer_y});\n    }\n\n    unconstrained fn registered_signer() -> Pubkey {\n        storage.registered_signer.read()\n    }\n}\n",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/main"
      },
      "21": {
        "source": "\nimpl Field {\n    #[builtin(to_le_bits)]\n    pub fn to_le_bits(_x : Field, _bit_size: u32) -> [u1] {}\n    #[builtin(to_be_bits)]\n    pub fn to_be_bits(_x : Field, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_le_radix(256, byte_size)\n    }\n    pub fn to_be_bytes(x : Field, byte_size: u32) -> [u8] {\n        x.to_be_radix(256, byte_size)\n    }\n\n    #[builtin(to_le_radix)]\n    //decompose _x into a _result_len vector over the _radix basis\n    //_radix must be less than 256\n    pub fn to_le_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n    #[builtin(to_be_radix)]\n    pub fn to_be_radix(_x : Field, _radix: u32, _result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n",
        "path": "std/field"
      },
      "35": {
        "source": "use crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    MAX_READ_REQUESTS_PER_CALL,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    GENERATOR_INDEX__FUNCTION_ARGS,\n    HISTORIC_BLOCK_DATA_LENGTH,\n    CONTRACT_DEPLOYMENT_DATA_LENGTH,\n    CALL_CONTEXT_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH,\n    CONTRACT_STORAGE_READ_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__FUNCTION_DATA,\n    GENERATOR_INDEX__PUBLIC_DATA_READ,\n    GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST,\n    GENERATOR_INDEX__CALL_CONTEXT,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS,\n    GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA,\n};\n\nuse crate::oracle::debug_log;\nuse crate::types::vec::BoundedVec;\nuse crate::types::point::Point;\n\n\n// docs:start:private-global-variables\nstruct PrivateGlobalVariables {\n    chain_id: Field,\n    version: Field,\n}\n// docs:end:private-global-variables\n\nimpl PrivateGlobalVariables {\n    fn serialize(self) -> [Field; 2] {\n        [self.chain_id, self.version]\n    }\n}\n\n// docs:start:public-global-variables\nstruct PublicGlobalVariables {\n    chain_id: Field,\n    version: Field,\n    block_number: Field,\n    timestamp: Field,\n}\n// docs:end:public-global-variables\n\nimpl PublicGlobalVariables {\n    fn serialize(self) -> [Field; 4] {\n        [self.chain_id, self.version, self.block_number, self.timestamp]\n    }\n}\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    deployer_public_key: Point,\n    constructor_vk_hash : Field,\n    function_tree_root : Field,\n    contract_address_salt : Field,\n    portal_contract_address : Field,\n}\n// docs:end:contract-deployment-data\n\nimpl ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.deployer_public_key.x,\n            self.deployer_public_key.y,\n            self.constructor_vk_hash,\n            self.function_tree_root,\n            self.contract_address_salt,\n            self.portal_contract_address,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)[0]\n    }\n}\n\n// PrivateContextInputs are expected to be provided to each private function\n// docs:start:private-context-inputs\nstruct PrivateContextInputs {\n    call_context : CallContext,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    private_global_variables: PrivateGlobalVariables,\n}\n// docs:end:private-context-inputs\n\n// PublicContextInputs are expected to be provided to each public function\n// docs:start:public-context-inputs\nstruct PublicContextInputs {\n    call_context: CallContext,\n    block_data: HistoricBlockData,\n\n    public_global_variables: PublicGlobalVariables,\n}\n// docs:end:public-context-inputs\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : Field,\n    storage_contract_address : Field,\n    portal_contract_address : Field,\n    function_selector: Field,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment: bool,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender,\n            self.storage_contract_address,\n            self.portal_contract_address,\n            self.function_selector,\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n        ]\n    }\n\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)[0]\n    }\n}\n\n// docs:start:historic-block-data\nstruct HistoricBlockData {\n    private_data_tree_root : Field,\n    nullifier_tree_root : Field,\n    contract_tree_root : Field,\n    l1_to_l2_messages_tree_root : Field,\n    blocks_tree_root: Field,\n    public_data_tree_root: Field,\n    global_variables_hash: Field,\n}\n// docs:end:historic-block-data\n\nimpl HistoricBlockData {\n    // NOTE: this order must match the order in `private_circuit_public_inputs.hpp`\n    pub fn serialize(self) -> [Field; HISTORIC_BLOCK_DATA_LENGTH] {\n        [\n            self.private_data_tree_root,\n            self.nullifier_tree_root,\n            self.contract_tree_root,\n            self.l1_to_l2_messages_tree_root,\n            self.blocks_tree_root,\n            self.public_data_tree_root,\n            self.global_variables_hash,\n        ]\n    }\n\n    pub fn empty() -> Self {\n        Self { private_data_tree_root: 0, nullifier_tree_root: 0, contract_tree_root: 0, l1_to_l2_messages_tree_root: 0, blocks_tree_root: 0, public_data_tree_root: 0, global_variables_hash: 0 }\n    }\n}\n\nstruct FunctionData {\n    function_selector: Field,\n    is_internal: bool,\n    is_private: bool,\n    is_constructor: bool,\n}\n\nimpl FunctionData {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.function_selector,\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ], GENERATOR_INDEX__FUNCTION_DATA)[0]\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    read_requests: [Field; crate::abi::MAX_READ_REQUESTS_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    nullified_commitments: [Field; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [Field; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    // Explore introducing a new type like uint256 (similar to Point), so it's more explicit that\n    // we're talking about a single number backed by two field elements.\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    contract_deployment_data: ContractDeploymentData,\n    chain_id: Field,\n    version: Field,\n}\n\nimpl PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0); \n        fields.push(self.call_context.hash());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.nullified_commitments);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.contract_deployment_data.hash());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        dep::std::hash::pedersen_with_separator(fields.storage, GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        fields.push_array(self.read_requests);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.private_call_stack);\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.encrypted_logs_hash);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.storage\n    }\n}\n\nstruct ContractStorageRead {\n    storage_slot: Field,\n    value: Field,\n}\n\nimpl ContractStorageRead {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, value: 0 }\n    }\n}\n\nstruct ContractStorageUpdateRequest {\n    storage_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nimpl ContractStorageUpdateRequest {\n    pub fn serialize(self) -> [Field; CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH] {\n        [self.storage_slot, self.old_value, self.new_value]\n    }\n\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST)[0]\n    }\n\n    pub fn empty() -> Self {\n        Self { storage_slot: 0, old_value: 0, new_value: 0 }\n    }\n}\n\n\nstruct PublicCircuitPublicInputs {\n    call_context: CallContext,\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n    contract_storage_update_requests: [ContractStorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_read: [ContractStorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n    public_call_stack: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_commitments: [Field; MAX_NEW_COMMITMENTS_PER_CALL],\n    new_nullifiers: [Field; crate::abi::MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [Field; crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_log_preimages_length: Field,\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicCircuitPublicInputs {\n    \n    pub fn hash(self) -> Field {\n        let mut inputs: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_HASH_INPUT_LENGTH> = BoundedVec::new(0);\n        inputs.push(self.call_context.hash());\n        inputs.push(self.args_hash);\n        inputs.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            inputs.push(self.contract_storage_update_requests[i].hash());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            inputs.push(self.contract_storage_read[i].hash());\n        }\n        inputs.push_array(self.public_call_stack);\n        inputs.push_array(self.new_commitments);\n        inputs.push_array(self.new_nullifiers);\n        inputs.push_array(self.new_l2_to_l1_msgs);\n\n        inputs.push_array(self.unencrypted_logs_hash);\n        inputs.push(self.unencrypted_log_preimages_length);\n        inputs.push_array(self.block_data.serialize());\n        inputs.push(self.prover_address);\n\n        dep::std::hash::pedersen_with_separator(inputs.storage, GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)[0]\n    }\n\n    pub fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.push_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.push_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.push_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.push_array(self.contract_storage_read[i].serialize());\n        }\n        fields.push_array(self.public_call_stack);\n        fields.push_array(self.new_commitments);\n        fields.push_array(self.new_nullifiers);\n        fields.push_array(self.new_l2_to_l1_msgs);\n        fields.push_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.push_array(self.block_data.serialize());\n        fields.push(self.prover_address);\n        fields.storage\n    }\n}\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hasher {\n    pub fn new()-> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n\n    pub fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 16;\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = dep::std::hash::pedersen_with_separator(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS)[0];\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        dep::std::hash::pedersen_with_separator(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)[0]\n    }\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/abi"
      },
      "38": {
        "source": "use crate::constants_gen::{\n    EMPTY_NULLIFIED_COMMITMENT,\n    MAX_NEW_COMMITMENTS_PER_CALL,\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL,\n    MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL,\n    NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH,\n};\n\nuse crate::abi;\n\nuse crate::abi::{\n    hash_args,\n    CallContext,\n    ContractDeploymentData,\n    HistoricBlockData,\n    FunctionData,\n    PrivateCircuitPublicInputs,\n    PublicCircuitPublicInputs,\n};\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// l1 to l2 messaging\nuse crate::messaging::process_l1_to_l2_message;\nuse crate::private_call_stack_item::PrivateCallStackItem;\nuse crate::public_call_stack_item::PublicCallStackItem;\n\nuse crate::types::{\n    vec::BoundedVec,\n    point::Point,\n};\n\nuse crate::utils::arr_copy_slice;\n\nuse crate::oracle::{\n    arguments,\n    call_private_function::call_private_function_internal,\n    public_call::call_public_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n    context::get_portal_address,\n};\n\nuse dep::std::option::Option;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: abi::PrivateContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<Field, MAX_READ_REQUESTS_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n    nullified_commitments: BoundedVec<Field, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<Field, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    block_data: HistoricBlockData,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: abi::PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            read_requests: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n            nullified_commitments: BoundedVec::new(0),\n\n            block_data: inputs.block_data,\n\n            private_call_stack: BoundedVec::new(0),\n            public_call_stack: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn finish(self) -> abi::PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = abi::PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            read_requests: self.read_requests.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            nullified_commitments: self.nullified_commitments.storage,\n            private_call_stack: self.private_call_stack.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            encrypted_logs_hash: encrypted_logs_hash,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            encrypted_log_preimages_length: encrypted_log_preimages_length,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.block_data,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version,\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        self.read_requests.push(read_request);\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    // We never push a zero nullified_commitment as zero is used to indicate the end\n    // of a field array in private kernel. This routine transparently replaces a\n    // zero value into the special placeholder: EMPTY_NULLIFIED_COMMITMENT.\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n        let mut non_zero_nullified = nullified_commitment;\n        if (non_zero_nullified == 0) {\n            non_zero_nullified = EMPTY_NULLIFIED_COMMITMENT;\n        }\n        self.nullified_commitments.push(non_zero_nullified);\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, content: Field) \n    // docs:end:context_message_portal\n    {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        msg_key: Field,\n        content: Field,\n        secret: Field\n    ) \n    // docs:end:context_consume_l1_to_l2_message\n    {\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, self.this_address(), msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let fields = call_private_function_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PrivateCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PrivateCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                // TODO handle the offsets as a variable incremented during extraction?\n                args_hash: fields[12],\n                return_values: arr_copy_slice(fields, [0; RETURN_VALUES_LENGTH], 13),\n                read_requests: arr_copy_slice(fields, [0; MAX_READ_REQUESTS_PER_CALL], 17),\n                new_commitments: arr_copy_slice(fields, [0; MAX_NEW_COMMITMENTS_PER_CALL], 49),\n                new_nullifiers: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 65),\n                nullified_commitments: arr_copy_slice(fields, [0; MAX_NEW_NULLIFIERS_PER_CALL], 81),\n                private_call_stack: arr_copy_slice(fields, [0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL], 97),\n                public_call_stack: arr_copy_slice(fields, [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL], 101),\n                new_l2_to_l1_msgs: arr_copy_slice(fields, [0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL], 105),\n                encrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 107),\n                unencrypted_logs_hash: arr_copy_slice(fields, [0; NUM_FIELDS_PER_SHA256], 109),\n                encrypted_log_preimages_length: fields[111],\n                unencrypted_log_preimages_length: fields[112],\n                block_data: HistoricBlockData {\n                    // Must match order in `private_circuit_public_inputs.hpp`\n                    private_data_tree_root : fields[113],\n                    nullifier_tree_root : fields[114],\n                    contract_tree_root : fields[115],\n                    l1_to_l2_messages_tree_root : fields[116],\n                    blocks_tree_root : fields[117],\n                    public_data_tree_root: fields[118],\n                    global_variables_hash: fields[119],\n                },\n                contract_deployment_data: ContractDeploymentData {\n                    deployer_public_key: Point::new(fields[120], fields[121]),\n                    constructor_vk_hash : fields[122],\n                    function_tree_root : fields[123],\n                    contract_address_salt : fields[124],\n                    portal_contract_address : fields[125],\n                },\n                chain_id: fields[126],\n                version: fields[127],\n            },\n            is_execution_request: fields[128] as bool,\n        };\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        assert(item.is_execution_request == false);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.private_call_stack.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field, \n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: Field, \n        function_selector: Field,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: Field,\n        function_selector: Field,\n        args_hash: Field\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address, \n            function_selector, \n            args_hash\n        );\n        let item = PublicCallStackItem {\n            contract_address: fields[0],\n            function_data: FunctionData {\n                function_selector: fields[1],\n                is_internal: fields[2] as bool,\n                is_private: fields[3] as bool,\n                is_constructor: fields[4] as bool,\n            },\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: CallContext {\n                    msg_sender : fields[5],\n                    storage_contract_address : fields[6],\n                    portal_contract_address : fields[7],\n                    function_selector: fields[8], // practically same as fields[1]\n                    is_delegate_call : fields[9] as bool,\n                    is_static_call : fields[10] as bool,\n                    is_contract_deployment: fields[11] as bool,\n                },\n                args_hash: fields[12],\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [ContractStorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_read: [ContractStorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_commitments: [0; MAX_NEW_COMMITMENTS_PER_CALL],\n                new_nullifiers: [0; MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs:[0; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash:[0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                block_data: HistoricBlockData::empty(),\n                prover_address: 0,\n            },\n            is_execution_request: true,\n        };\n\n        assert(contract_address == item.contract_address);\n        assert(function_selector == item.function_data.function_selector);\n        \n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        // We are issuing a regular call which is not delegate, static, or deployment. We also constrain\n        // the msg_sender in the nested call to be equal to our address, and the execution context address\n        // for the nested call to be equal to the address we actually called.\n        assert(item.public_inputs.call_context.is_delegate_call == false);\n        assert(item.public_inputs.call_context.is_static_call == false);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n        assert(item.public_inputs.call_context.msg_sender == self.inputs.call_context.storage_contract_address);\n        assert(item.public_inputs.call_context.storage_contract_address == contract_address);\n\n        self.public_call_stack.push(item.hash());\n    }\n}\n\nuse crate::abi::{\n    ContractStorageRead,\n    ContractStorageUpdateRequest\n};\n\nstruct PublicContext {\n    inputs: abi::PublicContextInputs,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<ContractStorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_read: BoundedVec<ContractStorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_commitments: BoundedVec<Field, MAX_NEW_COMMITMENTS_PER_CALL>,\n    new_nullifiers: BoundedVec<Field, crate::abi::MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<Field, crate::abi::MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    block_data: HistoricBlockData,\n    prover_address: Field,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: abi::PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = ContractStorageRead::empty();\n        let empty_storage_update = ContractStorageUpdateRequest::empty();\n        PublicContext {\n            inputs: inputs,\n\n            args_hash: args_hash,\n            return_values: BoundedVec::new(0),\n\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_read: BoundedVec::new(empty_storage_read),\n            public_call_stack: BoundedVec::new(0),\n\n            new_commitments: BoundedVec::new(0),\n            new_nullifiers: BoundedVec::new(0),\n\n            new_l2_to_l1_msgs: BoundedVec::new(0),\n\n            \n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n\n            block_data: inputs.block_data,\n            prover_address: 0,\n\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> Field {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> Field {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> Field {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> Field {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn finish(self) -> abi::PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = abi::PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_read: self.contract_storage_read.storage,\n            return_values: self.return_values.storage,\n            new_commitments: self.new_commitments.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack: self.public_call_stack.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash: unencrypted_logs_hash,\n            unencrypted_log_preimages_length: unencrypted_log_preimages_length,\n            block_data: self.inputs.block_data,\n            prover_address: self.prover_address,\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        self.new_commitments.push(note_hash);\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        self.new_nullifiers.push(nullifier);\n    }\n\n    pub fn message_portal(&mut self, content: Field) {\n        self.new_l2_to_l1_msgs.push(content);\n    }\n\n    // PrivateContextInputs must be temporarily passed in to prevent too many unknowns\n    // Note this returns self to get around an issue where mutable structs do not maintain mutations unless reassigned\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(self.block_data.l1_to_l2_messages_tree_root, this, msg_key, content, secret);\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, EMPTY_NULLIFIED_COMMITMENT)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n        args: [Field; ARGS_COUNT],\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = abi::hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            args_hash,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: Field, \n        function_selector: Field,\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(\n            contract_address, \n            function_selector, \n            0,\n        )\n    }\n\n}\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context {\n            private: Option::some(context),\n            public: Option::none()\n        }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context {\n            public: Option::some(context),\n            private: Option::none()\n        }\n    }\n\n    pub fn none() -> Context {\n        Context {\n            public: Option::none(),\n            private: Option::none()\n        }\n    }\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/context"
      },
      "54": {
        "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/arguments"
      },
      "62": {
        "source": "\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE +\n// = 2 + 4 + 7\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 13;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: Field, \n    _function_selector: Field, \n    _args_hash: Field,\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: Field, \n    function_selector: Field,\n    args_hash: Field\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address, \n        function_selector, \n        args_hash,\n    )\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/enqueue_public_function_call"
      },
      "65": {
        "source": "\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(\n    _storage_slot: Field,\n    _number_of_elements: Field,\n) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field)-> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<T, N>(\n    storage_slot: Field,\n    deserialize: fn ([Field; N]) -> T,\n) -> T {\n    let fields = storage_read_oracle_wrapper(storage_slot);\n    deserialize(fields)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(\n    _storage_slot: Field,\n    _values: [Field; N],\n) -> [Field; N] {}\n\n// TODO: Remove return value.\nunconstrained pub fn storage_write<N>(\n    storage_slot: Field,\n    fields: [Field; N]\n) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/oracle/storage"
      },
      "68": {
        "source": "use crate::{\n    abi,\n    abi::{\n        PublicCircuitPublicInputs,\n        FunctionData,\n    },\n};\nuse crate::constants_gen::{\n    RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__CALL_STACK_ITEM,\n};\n\n// oracles\nuse crate::oracle::{\n    enqueue_public_function_call::enqueue_public_function_call_internal,\n};\n\nstruct PublicCallStackItem {\n    contract_address: Field,\n    function_data: FunctionData,\n    public_inputs: PublicCircuitPublicInputs,\n    is_execution_request: bool,\n}\n\nimpl PublicCallStackItem {\n    pub fn hash(self) -> Field {\n        dep::std::hash::pedersen_with_separator([\n            self.contract_address,\n            self.function_data.hash(),\n            self.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)[0]\n    }\n}\n\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/public_call_stack_item"
      },
      "73": {
        "source": "use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse crate::types::type_serialization::TypeSerializationInterface;\nuse dep::std::option::Option;\n\n// docs:start:public_state_struct\nstruct PublicState<T, T_SERIALIZED_LEN> {\n    context: Context,\n    storage_slot: Field,\n    serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n}\n// docs:end:public_state_struct\n\nimpl<T, T_SERIALIZED_LEN> PublicState<T, T_SERIALIZED_LEN> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n        serialization_methods: TypeSerializationInterface<T, T_SERIALIZED_LEN>,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState {\n            context,\n            storage_slot,\n            serialization_methods,\n        }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read(self) -> T {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        storage_read(self.storage_slot, self.serialization_methods.deserialize)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write(self, value: T) {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let serialize = self.serialization_methods.serialize;\n        let fields = serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n",
        "path": "/Users/ianbrighton/nargo/github.com/AztecProtocol/aztec-packages/aztec-packages-v0.8.14/yarn-project/aztec-nr/aztec/src/state_vars/public_state"
      },
      "88": {
        "source": "use dep::aztec::types::type_serialization::TypeSerializationInterface;\n\nglobal PUBKEY_SERIALIZED_LEN: Field = 2;\n\nstruct Pubkey {\n    x: Field,\n    y: Field\n}\n\nimpl Pubkey {\n    fn new(x: Field, y: Field) -> Self {\n        Self { x, y }\n    }\n\n    fn deserialize(preimage: [Field; PUBKEY_SERIALIZED_LEN]) -> Self {\n        Self { x: preimage[0], y: preimage[1] }\n    }\n\n    fn serialize(self) -> [Field; PUBKEY_SERIALIZED_LEN] {\n        [\n         self.x,\n         self.y   \n        ]\n    }\n}\n\nfn deserialize(preimage: [Field; PUBKEY_SERIALIZED_LEN]) -> Pubkey {\n    Pubkey::deserialize(preimage)\n}\n\nfn serialize(pubkey: Pubkey) -> [Field; PUBKEY_SERIALIZED_LEN] {\n    pubkey.serialize()\n}\n\n\n\nglobal PubkeyMethods = TypeSerializationInterface {\n    deserialize,\n    serialize\n};",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/types/public_key"
      },
      "90": {
        "source": "use dep::aztec::hash::sha256_to_field;\n\npub fn get_ens_stamp_private_content_hash(\n    secret_redemption_hash: Field,\n    name: Field,\n    timestamp: Field,\n    canceller: Field\n) -> Field {\n    // 132 = 32 * 4 + 4\n    let mut hash_bytes: [u8; 132] = [0; 132];\n    let secret_hash_bytes = secret_redemption_hash.to_be_bytes(32);\n    let name_bytes = name.to_be_bytes(32);\n    let timestamp_bytes = timestamp.to_be_bytes(32);\n    let canceller_bytes = canceller.to_be_bytes(32);\n\n    // insert into bytes array\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = name_bytes[i];\n        hash_bytes[i + 68] = timestamp_bytes[i];\n        hash_bytes[i + 100] = canceller_bytes[i];\n    }\n\n    // ethers.id(\"stamp_ens(bytes32,bytes32,uint256,address)\").slice(0, 10)\n    hash_bytes[0] = 0x5e;\n    hash_bytes[1] = 0x8d;\n    hash_bytes[2] = 0x7e;\n    hash_bytes[3] = 0x7e;\n\n    sha256_to_field(hash_bytes)\n}",
        "path": "/Users/ianbrighton/Documents/Mach34/aztec_sandbox/zybil/backend/contracts/l2/src/util"
      }
    }
  }
}